"""
Module materials.mn
Translated using PySD version 3.10.0
"""


@component.add(
    name="COEFFICIENTs_Mn_CHANGE_MINING_GRADE",
    units="DMNL",
    subscripts=["Mn_ORE_GRADES_I", "S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_mn_change_mining_grade():
    """
    Curve parameterization
    """
    value = xr.DataArray(
        np.nan,
        {
            "Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"],
            "S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"],
        },
        ["Mn_ORE_GRADES_I", "S_CURVE_FIT_ABC_I"],
    )
    value.loc[["RICH_GRADE"], ["A_S_CURVE"]] = 1
    value.loc[["RICH_GRADE"], ["B_S_CURVE"]] = 1
    value.loc[["RICH_GRADE"], ["C_S_CURVE"]] = 1
    value.loc[["HIGH_GRADE"], ["A_S_CURVE"]] = 1
    value.loc[["HIGH_GRADE"], ["B_S_CURVE"]] = 0.0145
    value.loc[["HIGH_GRADE"], ["C_S_CURVE"]] = 552
    value.loc[["LOW_GRADE"], ["A_S_CURVE"]] = 1.01
    value.loc[["LOW_GRADE"], ["B_S_CURVE"]] = 0.00781
    value.loc[["LOW_GRADE"], ["C_S_CURVE"]] = 1380
    return value


@component.add(
    name="COEFFICIENTS_Mn_MARKET_BRAKE",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_mn_market_brake():
    """
    Response function parameterization A=0,973589719 B=4,654669183 C=0,947935617
    """
    value = xr.DataArray(
        np.nan,
        {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
        ["S_CURVE_FIT_ABC_I"],
    )
    value.loc[["A_S_CURVE"]] = 0.97359
    value.loc[["B_S_CURVE"]] = 4.65467
    value.loc[["C_S_CURVE"]] = 0.947936
    return value


@component.add(
    name="COEFFICIENTS_Mn_MINING_TECHNOLOGY",
    units="DMNL",
    subscripts=["Mn_ORE_GRADES_I", "S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_mn_mining_technology():
    value = xr.DataArray(
        np.nan,
        {
            "Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"],
            "S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"],
        },
        ["Mn_ORE_GRADES_I", "S_CURVE_FIT_ABC_I"],
    )
    value.loc[["RICH_GRADE"], ["A_S_CURVE"]] = 1.05067
    value.loc[["RICH_GRADE"], ["B_S_CURVE"]] = 0.054026
    value.loc[["RICH_GRADE"], ["C_S_CURVE"]] = 1908.72
    value.loc[["HIGH_GRADE"], ["A_S_CURVE"]] = 1.00216
    value.loc[["HIGH_GRADE"], ["B_S_CURVE"]] = 0.144301
    value.loc[["HIGH_GRADE"], ["C_S_CURVE"]] = 2016.54
    value.loc[["LOW_GRADE"], ["A_S_CURVE"]] = 1
    value.loc[["LOW_GRADE"], ["B_S_CURVE"]] = 0.3
    value.loc[["LOW_GRADE"], ["C_S_CURVE"]] = 2010
    return value


@component.add(
    name="COEFFICIENTS_Mn_PRICE_EFFECT_ON_DEMAND",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_mn_price_effect_on_demand():
    """
    Demand effect parameteriazation
    """
    value = xr.DataArray(
        np.nan,
        {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
        ["S_CURVE_FIT_ABC_I"],
    )
    value.loc[["A_S_CURVE"]] = 0.881675
    value.loc[["B_S_CURVE"]] = 0.00155998
    value.loc[["C_S_CURVE"]] = 3587.6
    return value


@component.add(
    name="COEFFICIENTS_Mn_PRICE_EXP_FIT_ONE",
    units="DMNL",
    subscripts=["EXP_CURVE_FIT_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_mn_price_exp_fit_one():
    """
    Response curve coefficients A=14774,12335 B=3,984471026 C=707,39833
    """
    value = xr.DataArray(
        np.nan,
        {"EXP_CURVE_FIT_I": _subscript_dict["EXP_CURVE_FIT_I"]},
        ["EXP_CURVE_FIT_I"],
    )
    value.loc[["A_EXP_CURVE"]] = 14650.9
    value.loc[["B_EXP_CURVE"]] = 13.6125
    value.loc[["C_EXP_CURVE"]] = 5260.39
    return value


@component.add(
    name="COEFFICIENTS_Mn_PRICE_EXP_FIT_TWO",
    units="DMNL",
    subscripts=["EXP_CURVE_FIT_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_mn_price_exp_fit_two():
    """
    Response curve coefficients A=14774,12335 B=3,984471026 C=707,39833
    """
    value = xr.DataArray(
        np.nan,
        {"EXP_CURVE_FIT_I": _subscript_dict["EXP_CURVE_FIT_I"]},
        ["EXP_CURVE_FIT_I"],
    )
    value.loc[["A_EXP_CURVE"]] = 9848.24
    value.loc[["B_EXP_CURVE"]] = 2.21076
    value.loc[["C_EXP_CURVE"]] = 130.072
    return value


@component.add(
    name="coefficients_mn_profit_effect_on_mining",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_mn_profit_effect_on_mining():
    """
    a=1,258193e+00 b=1,292795e-04 c=5,268404e+03
    """
    value = xr.DataArray(
        np.nan,
        {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
        ["S_CURVE_FIT_ABC_I"],
    )
    value.loc[["A_S_CURVE"]] = 1.2
    value.loc[["B_S_CURVE"]] = 0.0002
    value.loc[["C_S_CURVE"]] = 400
    return value


@component.add(
    name="COEFFICIENTS_Mn_PROSPECTING_TECHNOLOGY",
    units="DMNL",
    subscripts=["Mn_ORE_GRADES_I", "S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_mn_prospecting_technology():
    value = xr.DataArray(
        np.nan,
        {
            "Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"],
            "S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"],
        },
        ["Mn_ORE_GRADES_I", "S_CURVE_FIT_ABC_I"],
    )
    value.loc[["RICH_GRADE"], ["A_S_CURVE"]] = 1.00243
    value.loc[["RICH_GRADE"], ["B_S_CURVE"]] = 0.0382981
    value.loc[["RICH_GRADE"], ["C_S_CURVE"]] = 1901.98
    value.loc[["HIGH_GRADE"], ["A_S_CURVE"]] = 1.00243
    value.loc[["HIGH_GRADE"], ["B_S_CURVE"]] = 0.0382981
    value.loc[["HIGH_GRADE"], ["C_S_CURVE"]] = 1901.98
    value.loc[["LOW_GRADE"], ["A_S_CURVE"]] = 1
    value.loc[["LOW_GRADE"], ["B_S_CURVE"]] = 0.3
    value.loc[["LOW_GRADE"], ["C_S_CURVE"]] = 2010
    return value


@component.add(
    name="COEFFICIENTS_Mn_RECYCLING",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_mn_recycling():
    """
    Parameterization of the price response for recycling
    """
    value = xr.DataArray(
        np.nan,
        {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
        ["S_CURVE_FIT_ABC_I"],
    )
    value.loc[["A_S_CURVE"]] = 0.542437
    value.loc[["B_S_CURVE"]] = 0.00191223
    value.loc[["C_S_CURVE"]] = 2779.86
    return value


@component.add(
    name="EXTRACTION_PRICE_OF_ORE_GRADES",
    units="M$/Mt",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def extraction_price_of_ore_grades():
    """
    Switch price parameterization Harald Sverdrup, 2021: LOCOMOTION Project report: Estimating the cost of extraction and the price required for changing between mining of different ore grades in the WORLD7 model. 20 pp.
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = 125
    value.loc[["HIGH_GRADE"]] = 550
    value.loc[["LOW_GRADE"]] = 1200
    return value


@component.add(
    name='"Go_from_MJ/kg_to_TJ/Mt"',
    units="(TJ/Mt)/(MJ/kg)",
    comp_type="Constant",
    comp_subtype="Normal",
)
def go_from_mjkg_to_tjmt():
    """
    Convert form MJ/year to TJ/year The key energy translation is: MJ/kg = 1,000,000 J/kg = 1,000,000,000 J/ton = 1,000,000,000,000,000 J/million ton. 1 TJ =1012 J 1 MJ/kg = 1,000 * TJ/Mt 1 TJ/Mt = 1/1000 *MJ/kg
    """
    return 1000


@component.add(
    name="IMV_Mn_MINING_HISTORICAL",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_mn_mining_historical():
    """
    USGS Mineral Commodities Summaries DS-140 series, downloaded from their website. Annual updates available
    """
    return np.interp(
        time(),
        [
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
        ],
        [
            0.0,
            0.0,
            0.0,
            0.411,
            0.416,
            0.481,
            0.868,
            1.08,
            0.641,
            0.811,
            0.888,
            0.719,
            0.856,
            1.04,
            0.84,
            0.636,
            0.85,
            0.864,
            0.934,
            0.55,
            0.754,
            0.523,
            0.535,
            0.731,
            0.919,
            1.17,
            1.37,
            1.43,
            1.28,
            1.58,
            1.59,
            0.982,
            0.559,
            0.779,
            1.31,
            1.8,
            2.34,
            2.74,
            2.38,
            1.11,
            2.54,
            2.45,
            2.29,
            1.8,
            1.27,
            1.9,
            1.65,
            1.75,
            1.83,
            2.16,
            2.53,
            3.18,
            4.44,
            4.94,
            4.5,
            4.87,
            5.31,
            5.82,
            5.58,
            5.83,
            6.12,
            6.11,
            6.4,
            6.63,
            7.24,
            7.98,
            8.15,
            7.51,
            7.8,
            8.42,
            8.2,
            9.07,
            9.08,
            9.74,
            9.27,
            9.81,
            10.0,
            8.69,
            8.69,
            9.8,
            9.67,
            8.4,
            8.58,
            7.78,
            8.6,
            8.69,
            8.83,
            8.34,
            8.65,
            9.25,
            9.08,
            7.6,
            7.26,
            7.07,
            6.53,
            7.97,
            8.18,
            7.52,
            7.33,
            6.39,
            6.96,
            7.58,
            7.8,
            8.79,
            9.9,
            11.0,
            11.5,
            12.1,
            12.9,
            10.8,
            14.2,
            16.0,
            16.0,
            17.7,
        ],
    )


@component.add(
    name="IMV_Mn_OTHER_DEMAND",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_mn_other_demand():
    return np.interp(
        time(),
        [
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
        ],
        [
            0.05,
            0.346205,
            0.661111,
            0.93609,
            1.19267,
            1.5416,
            1.91149,
            2.11753,
            2.38263,
            2.60021,
            2.80943,
            2.97157,
            3.11178,
            3.23394,
            3.38267,
            3.56648,
            3.70997,
            3.85842,
            4.02577,
            4.16117,
            4.26867,
            4.34897,
            4.40765,
            4.45365,
            4.506,
            4.53,
            4.53,
            4.50085,
            4.4466,
            4.39417,
            4.345,
            4.2715,
            4.19182,
            4.12752,
            4.04051,
            3.90329,
            3.74739,
            3.6113,
            3.47563,
            3.36576,
            3.23657,
            3.09845,
            2.95468,
            2.77956,
            2.61774,
            2.48614,
            2.36606,
            2.21966,
            2.15098,
            2.05223,
            1.92811,
            1.7955,
            1.68043,
            1.56112,
            1.50576,
            1.36261,
            1.27,
            1.18061,
            1.02909,
            0.966842,
            0.8,
        ],
    )


@component.add(
    name="IMV_Mn_PRICE_PER_TON_HISTORICAL",
    units="$/t",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_mn_price_per_ton_historical():
    """
    USGS Mineral Commodities Summaries DS-140 series, downloaded from their website. Annual updates available. From 2005 on: Manganese Price 2020 [Updated Daily] - Metalary https://www.metalary.com/manganese-price/ Accessed: 2021-07-09
    """
    return np.interp(
        time(),
        [
            1900,
            1901,
            1902,
            1903,
            1904,
            1905,
            1906,
            1907,
            1908,
            1909,
            1910,
            1911,
            1912,
            1913,
            1914,
            1915,
            1916,
            1917,
            1918,
            1919,
            1920,
            1921,
            1922,
            1923,
            1924,
            1925,
            1926,
            1927,
            1928,
            1929,
            1930,
            1931,
            1932,
            1933,
            1934,
            1935,
            1936,
            1937,
            1938,
            1939,
            1940,
            1941,
            1942,
            1943,
            1944,
            1945,
            1946,
            1947,
            1948,
            1949,
            1950,
            1951,
            1952,
            1953,
            1954,
            1955,
            1956,
            1957,
            1958,
            1959,
            1960,
            1961,
            1962,
            1963,
            1964,
            1965,
            1966,
            1967,
            1968,
            1969,
            1970,
            1971,
            1972,
            1973,
            1974,
            1975,
            1976,
            1977,
            1978,
            1979,
            1980,
            1981,
            1982,
            1983,
            1984,
            1985,
            1986,
            1987,
            1988,
            1989,
            1990,
            1991,
            1992,
            1993,
            1994,
            1995,
            1996,
            1997,
            1998,
            1999,
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
        ],
        [
            450,
            510,
            500,
            790,
            430,
            520,
            870,
            810,
            480,
            520,
            530,
            510,
            420,
            460,
            445,
            471,
            742,
            594,
            794,
            759,
            465,
            169,
            318,
            403,
            341,
            375,
            359,
            327,
            353,
            366,
            322,
            280,
            420,
            485,
            353,
            368,
            320,
            311,
            410,
            415,
            367,
            380,
            346,
            336,
            405,
            446,
            410,
            375,
            362,
            398,
            478,
            461,
            519,
            589,
            539,
            499,
            574,
            703,
            612,
            571,
            523,
            563,
            474,
            400,
            415,
            398,
            405,
            387,
            334,
            287,
            284,
            294,
            339,
            357,
            528,
            640,
            705,
            722,
            719,
            715,
            700,
            647,
            750,
            594,
            633,
            597,
            557,
            565,
            671,
            798,
            858,
            966,
            760,
            683,
            662,
            640,
            676,
            645,
            591,
            523,
            551,
            487,
            426,
            530,
            944,
            1515,
            1385,
            3210,
            4580,
            2390,
            2760,
            3480,
            2950,
            2330,
            2290,
            2140,
            1660,
            1850,
            2060,
        ],
    )


@component.add(
    name="IMV_Mn_PRICE_PER_TON_HISTORICAL_2",
    units="$/t",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_mn_price_per_ton_historical_2():
    """
    USGS Mineral Commodities Summaries DS-140 series, downloaded from their website. Annual updates available
    """
    return np.interp(
        time(),
        [
            1900.0,
            1900.95,
            1901.9,
            1902.85,
            1903.8,
            1904.75,
            1905.7,
            1906.65,
            1907.6,
            1908.55,
            1909.5,
            1910.45,
            1911.39,
            1912.34,
            1913.29,
            1914.24,
            1915.19,
            1916.14,
            1917.09,
            1918.04,
            1918.99,
            1919.94,
            1920.89,
            1921.84,
            1922.79,
            1923.74,
            1924.69,
            1925.64,
            1926.59,
            1927.54,
            1928.49,
            1929.44,
            1930.39,
            1931.34,
            1932.29,
            1933.24,
            1934.18,
            1935.13,
            1936.08,
            1937.03,
            1937.98,
            1938.93,
            1939.88,
            1940.83,
            1941.78,
            1942.73,
            1943.68,
            1944.63,
            1945.58,
            1946.53,
            1947.48,
            1948.43,
            1949.38,
            1950.33,
            1951.28,
            1952.23,
            1953.18,
            1954.13,
            1955.08,
            1956.03,
            1956.97,
            1957.92,
            1958.87,
            1959.82,
            1960.77,
            1961.72,
            1962.67,
            1963.62,
            1964.57,
            1965.52,
            1966.47,
            1967.42,
            1968.37,
            1969.32,
            1970.27,
            1971.22,
            1972.17,
            1973.12,
            1974.07,
            1975.02,
            1975.97,
            1976.92,
            1977.87,
            1978.82,
            1979.76,
            1980.71,
            1981.66,
            1982.61,
            1983.56,
            1984.51,
            1985.46,
            1986.41,
            1987.36,
            1988.31,
            1989.26,
            1990.21,
            1991.16,
            1992.11,
            1993.06,
            1994.01,
            1994.96,
            1995.91,
            1996.86,
            1997.81,
            1998.76,
            1999.71,
            2000.66,
            2001.61,
            2002.55,
            2003.5,
            2004.45,
            2005.4,
            2006.35,
            2007.3,
            2008.25,
            2009.2,
            2010.15,
            2011.1,
            2012.05,
            2013.0,
        ],
        [
            450.0,
            510.0,
            500.0,
            790.0,
            430.0,
            520.0,
            870.0,
            810.0,
            480.0,
            520.0,
            530.0,
            510.0,
            420.0,
            460.0,
            445.0,
            471.0,
            742.0,
            594.0,
            794.0,
            759.0,
            465.0,
            169.0,
            318.0,
            403.0,
            341.0,
            375.0,
            359.0,
            327.0,
            353.0,
            366.0,
            322.0,
            280.0,
            420.0,
            485.0,
            353.0,
            368.0,
            320.0,
            311.0,
            410.0,
            415.0,
            367.0,
            380.0,
            346.0,
            336.0,
            405.0,
            446.0,
            410.0,
            375.0,
            362.0,
            398.0,
            478.0,
            461.0,
            519.0,
            589.0,
            539.0,
            499.0,
            574.0,
            703.0,
            612.0,
            571.0,
            523.0,
            563.0,
            474.0,
            400.0,
            415.0,
            398.0,
            405.0,
            387.0,
            334.0,
            287.0,
            284.0,
            294.0,
            339.0,
            357.0,
            528.0,
            640.0,
            705.0,
            722.0,
            719.0,
            715.0,
            700.0,
            647.0,
            750.0,
            594.0,
            633.0,
            597.0,
            557.0,
            565.0,
            671.0,
            798.0,
            858.0,
            966.0,
            760.0,
            683.0,
            662.0,
            640.0,
            676.0,
            645.0,
            591.0,
            523.0,
            551.0,
            487.0,
            426.0,
            530.0,
            944.0,
            594.0,
            646.0,
            935.0,
            1800.0,
            870.0,
            1120.0,
            1060.0,
            997.0,
            1140.0,
            700.0,
            380.0,
            770.0,
            554.0,
            690.0,
            500.0,
        ],
    )


@component.add(
    name="IMV_MnCrNi_RECYCLED",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_mncrni_recycled():
    """
    From the Mn module, arriving with Mn alloys Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return np.interp(
        time(),
        [
            1850.0,
            1851.0,
            1852.0,
            1853.0,
            1854.0,
            1855.0,
            1856.0,
            1857.0,
            1858.0,
            1859.0,
            1860.0,
            1861.0,
            1862.0,
            1863.0,
            1864.0,
            1865.0,
            1866.0,
            1867.0,
            1868.0,
            1869.0,
            1870.0,
            1871.0,
            1872.0,
            1873.0,
            1874.0,
            1875.0,
            1876.0,
            1877.0,
            1878.0,
            1879.0,
            1880.0,
            1881.0,
            1882.0,
            1883.0,
            1884.0,
            1885.0,
            1886.0,
            1887.0,
            1888.0,
            1889.0,
            1890.0,
            1891.0,
            1892.0,
            1893.0,
            1894.0,
            1895.0,
            1896.0,
            1897.0,
            1898.0,
            1899.0,
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
            2101.0,
            2102.0,
            2103.0,
            2104.0,
            2105.0,
            2106.0,
            2107.0,
            2108.0,
            2109.0,
            2110.0,
            2111.0,
            2112.0,
            2113.0,
            2114.0,
            2115.0,
            2116.0,
            2117.0,
            2118.0,
            2119.0,
            2120.0,
            2121.0,
            2122.0,
            2123.0,
            2124.0,
            2125.0,
            2126.0,
            2127.0,
            2128.0,
            2129.0,
            2130.0,
            2131.0,
            2132.0,
            2133.0,
            2134.0,
            2135.0,
            2136.0,
            2137.0,
            2138.0,
            2139.0,
            2140.0,
            2141.0,
            2142.0,
            2143.0,
            2144.0,
            2145.0,
            2146.0,
            2147.0,
            2148.0,
            2149.0,
            2150.0,
            2151.0,
            2152.0,
            2153.0,
            2154.0,
            2155.0,
            2156.0,
            2157.0,
            2158.0,
            2159.0,
            2160.0,
            2161.0,
            2162.0,
            2163.0,
            2164.0,
            2165.0,
            2166.0,
            2167.0,
            2168.0,
            2169.0,
            2170.0,
            2171.0,
            2172.0,
            2173.0,
            2174.0,
            2175.0,
            2176.0,
            2177.0,
            2178.0,
            2179.0,
            2180.0,
            2181.0,
            2182.0,
            2183.0,
            2184.0,
            2185.0,
            2186.0,
            2187.0,
            2188.0,
            2189.0,
            2190.0,
            2191.0,
            2192.0,
            2193.0,
            2194.0,
            2195.0,
            2196.0,
            2197.0,
            2198.0,
            2199.0,
            2200.0,
            2201.0,
            2202.0,
            2203.0,
            2204.0,
            2205.0,
            2206.0,
            2207.0,
            2208.0,
            2209.0,
            2210.0,
            2211.0,
            2212.0,
            2213.0,
            2214.0,
            2215.0,
            2216.0,
            2217.0,
            2218.0,
            2219.0,
            2220.0,
            2221.0,
            2222.0,
            2223.0,
            2224.0,
            2225.0,
            2226.0,
            2227.0,
            2228.0,
            2229.0,
            2230.0,
            2231.0,
            2232.0,
            2233.0,
            2234.0,
            2235.0,
            2236.0,
            2237.0,
            2238.0,
            2239.0,
            2240.0,
            2241.0,
            2242.0,
            2243.0,
            2244.0,
            2245.0,
            2246.0,
            2247.0,
            2248.0,
            2249.0,
            2250.0,
        ],
        [
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            1.12000e-04,
            1.00100e-03,
            2.30700e-03,
            3.67000e-03,
            4.90200e-03,
            6.19200e-03,
            8.09600e-03,
            1.01110e-02,
            1.20520e-02,
            1.38470e-02,
            1.65460e-02,
            2.06340e-02,
            2.53870e-02,
            3.07880e-02,
            3.75620e-02,
            4.45850e-02,
            5.35440e-02,
            6.49840e-02,
            8.15230e-02,
            9.05210e-02,
            9.25280e-02,
            9.96570e-02,
            1.06805e-01,
            1.24825e-01,
            1.52643e-01,
            1.90630e-01,
            2.23541e-01,
            2.58235e-01,
            2.85620e-01,
            3.17753e-01,
            3.48321e-01,
            3.69345e-01,
            4.10917e-01,
            4.65191e-01,
            5.11574e-01,
            5.25058e-01,
            5.69730e-01,
            6.30223e-01,
            6.93997e-01,
            7.54310e-01,
            7.71721e-01,
            8.34839e-01,
            9.00825e-01,
            9.70423e-01,
            9.61837e-01,
            1.00984e00,
            1.08739e00,
            1.14825e00,
            1.20690e00,
            1.29034e00,
            1.40498e00,
            1.52601e00,
            1.65735e00,
            1.75974e00,
            1.87059e00,
            2.00081e00,
            2.14766e00,
            2.42865e00,
            2.61853e00,
            2.82811e00,
            3.05768e00,
            3.27327e00,
            3.54394e00,
            3.87357e00,
            4.17646e00,
            4.50066e00,
            4.82677e00,
            5.37015e00,
            5.59645e00,
            5.84289e00,
            6.16630e00,
            6.53770e00,
            7.09563e00,
            8.04517e00,
            8.32649e00,
            9.34361e00,
            9.87520e00,
            9.82943e00,
            9.91073e00,
            1.04664e01,
            1.13632e01,
            1.18379e01,
            1.25288e01,
            1.28577e01,
            1.33892e01,
            1.38242e01,
            1.39835e01,
            1.42578e01,
            1.44985e01,
            1.52537e01,
            1.60203e01,
            1.64677e01,
            1.65027e01,
            1.70181e01,
            1.75776e01,
            1.82628e01,
            1.88611e01,
            1.96003e01,
            2.02019e01,
            2.06359e01,
            2.08308e01,
            2.07889e01,
            2.10365e01,
            2.12516e01,
            2.19272e01,
            2.23567e01,
            2.30083e01,
            2.34183e01,
            2.33790e01,
            2.31559e01,
            2.23954e01,
            2.33421e01,
            2.47424e01,
            2.55821e01,
            2.63587e01,
            2.57435e01,
            2.39472e01,
            2.33195e01,
            2.39487e01,
            2.47747e01,
            2.54322e01,
            2.55240e01,
            2.59678e01,
            2.64499e01,
            2.67957e01,
            2.71189e01,
            2.80288e01,
            2.92034e01,
            2.96581e01,
            2.98723e01,
            3.00145e01,
            3.10232e01,
            3.27899e01,
            3.36704e01,
            3.40402e01,
            3.54315e01,
            3.67680e01,
            3.81218e01,
            3.94554e01,
            4.06535e01,
            4.17303e01,
            4.27845e01,
            4.39423e01,
            4.52102e01,
            4.64741e01,
            4.75873e01,
            4.83135e01,
            4.91166e01,
            5.04090e01,
            5.18030e01,
            5.33022e01,
            5.48904e01,
            5.61349e01,
            5.71775e01,
            5.80804e01,
            5.89883e01,
            5.95500e01,
            6.02091e01,
            6.13498e01,
            6.25809e01,
            6.36676e01,
            6.46695e01,
            6.58268e01,
            6.77958e01,
            6.89052e01,
            6.99559e01,
            7.11500e01,
            7.23420e01,
            7.27653e01,
            7.38253e01,
            7.42747e01,
            7.44326e01,
            7.46272e01,
            7.33163e01,
            7.57358e01,
            7.70083e01,
            7.79761e01,
            7.81873e01,
            7.82729e01,
            7.84059e01,
            7.85536e01,
            7.87484e01,
            7.91962e01,
            7.95472e01,
            7.98298e01,
            8.01355e01,
            8.04441e01,
            8.07921e01,
            8.11333e01,
            8.13812e01,
            8.16455e01,
            8.18992e01,
            8.24081e01,
            8.26780e01,
            8.28475e01,
            8.29989e01,
            8.31460e01,
            8.33943e01,
            8.38141e01,
            8.41078e01,
            8.42646e01,
            8.45193e01,
            8.47425e01,
            8.50944e01,
            8.53063e01,
            8.53905e01,
            8.55335e01,
            8.56740e01,
            8.57823e01,
            8.59656e01,
            8.62821e01,
            8.65134e01,
            8.66096e01,
            8.66830e01,
            8.67993e01,
            8.69239e01,
            8.70621e01,
            8.71907e01,
            8.73070e01,
            8.74082e01,
            8.74945e01,
            8.75677e01,
            8.76292e01,
            8.76827e01,
            8.77317e01,
            8.77747e01,
            8.78111e01,
            8.78277e01,
            8.78171e01,
            8.77871e01,
            8.77493e01,
            8.77135e01,
            8.76874e01,
            8.76699e01,
            8.76683e01,
            8.88993e01,
            8.89585e01,
            8.86941e01,
            8.85238e01,
            8.84342e01,
            8.86155e01,
            8.87806e01,
            8.87136e01,
            8.82332e01,
            8.80850e01,
            8.79720e01,
            8.77037e01,
            8.72955e01,
            8.70783e01,
            8.65922e01,
            8.61154e01,
            8.56455e01,
            8.51462e01,
            8.46014e01,
            8.41269e01,
            8.37920e01,
            8.36171e01,
            8.34037e01,
            8.31791e01,
            8.28544e01,
            8.26446e01,
            8.24634e01,
            8.23316e01,
            8.17957e01,
            8.11903e01,
            8.06571e01,
            8.01315e01,
            7.94023e01,
            7.92413e01,
            7.88652e01,
            7.85754e01,
            7.81633e01,
            7.76058e01,
            7.71867e01,
            7.66662e01,
            7.63192e01,
            7.62218e01,
            7.58012e01,
            7.53387e01,
            7.49960e01,
            7.43495e01,
            7.37388e01,
            7.31883e01,
            7.27678e01,
            7.22397e01,
            7.16407e01,
            7.10524e01,
            7.05849e01,
            7.00139e01,
            6.94592e01,
            6.90318e01,
            6.86012e01,
            6.81021e01,
            6.77609e01,
            6.72756e01,
            6.69874e01,
            6.64096e01,
            6.58602e01,
            6.53964e01,
            6.48397e01,
            6.43266e01,
            6.36661e01,
            6.30993e01,
            6.25053e01,
            6.20957e01,
            6.18735e01,
            6.12876e01,
            6.07727e01,
            6.02474e01,
            5.94593e01,
            5.83689e01,
            5.74790e01,
            5.62203e01,
            5.51369e01,
            5.43179e01,
            5.33007e01,
            5.22371e01,
            5.12402e01,
            5.03083e01,
            4.93088e01,
            4.82338e01,
            4.75388e01,
            4.64724e01,
            4.57298e01,
            4.48342e01,
            4.39096e01,
            4.29970e01,
            4.21509e01,
            4.13302e01,
            4.07053e01,
            3.98996e01,
            3.92552e01,
            3.85396e01,
            3.76853e01,
            3.69031e01,
            3.60144e01,
            3.51821e01,
            3.46228e01,
            3.38736e01,
            3.30891e01,
            3.24971e01,
            3.17200e01,
            3.10233e01,
            3.05125e01,
            2.97333e01,
            2.90409e01,
            2.84113e01,
            2.77417e01,
            2.72437e01,
            2.66424e01,
            2.60004e01,
            2.55426e01,
            2.50092e01,
            2.44094e01,
            2.39205e01,
            2.34431e01,
            2.29277e01,
            2.24252e01,
            2.21606e01,
            2.16245e01,
            2.12134e01,
            2.07728e01,
            2.03878e01,
            2.00102e01,
            1.96371e01,
            1.93872e01,
            1.90064e01,
            1.87791e01,
        ],
    )


@component.add(
    name="IMV_SCRAPPING_RATE_0",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_scrapping_rate_0():
    return np.interp(
        time(),
        [
            1850.0,
            1851.0,
            1852.0,
            1853.0,
            1854.0,
            1855.0,
            1856.0,
            1857.0,
            1858.0,
            1859.0,
            1860.0,
            1861.0,
            1862.0,
            1863.0,
            1864.0,
            1865.0,
            1866.0,
            1867.0,
            1868.0,
            1869.0,
            1870.0,
            1871.0,
            1872.0,
            1873.0,
            1874.0,
            1875.0,
            1876.0,
            1877.0,
            1878.0,
            1879.0,
            1880.0,
            1881.0,
            1882.0,
            1883.0,
            1884.0,
            1885.0,
            1886.0,
            1887.0,
            1888.0,
            1889.0,
            1890.0,
            1891.0,
            1892.0,
            1893.0,
            1894.0,
            1895.0,
            1896.0,
            1897.0,
            1898.0,
            1899.0,
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
            2101.0,
            2102.0,
            2103.0,
            2104.0,
            2105.0,
            2106.0,
            2107.0,
            2108.0,
            2109.0,
            2110.0,
            2111.0,
            2112.0,
            2113.0,
            2114.0,
            2115.0,
            2116.0,
            2117.0,
            2118.0,
            2119.0,
            2120.0,
            2121.0,
            2122.0,
            2123.0,
            2124.0,
            2125.0,
            2126.0,
            2127.0,
            2128.0,
            2129.0,
            2130.0,
            2131.0,
            2132.0,
            2133.0,
            2134.0,
            2135.0,
            2136.0,
            2137.0,
            2138.0,
            2139.0,
            2140.0,
            2141.0,
            2142.0,
            2143.0,
            2144.0,
            2145.0,
            2146.0,
            2147.0,
            2148.0,
            2149.0,
            2150.0,
            2151.0,
            2152.0,
            2153.0,
            2154.0,
            2155.0,
            2156.0,
            2157.0,
            2158.0,
            2159.0,
            2160.0,
            2161.0,
            2162.0,
            2163.0,
            2164.0,
            2165.0,
            2166.0,
            2167.0,
            2168.0,
            2169.0,
            2170.0,
            2171.0,
            2172.0,
            2173.0,
            2174.0,
            2175.0,
            2176.0,
            2177.0,
            2178.0,
            2179.0,
            2180.0,
            2181.0,
            2182.0,
            2183.0,
            2184.0,
            2185.0,
            2186.0,
            2187.0,
            2188.0,
            2189.0,
            2190.0,
            2191.0,
            2192.0,
            2193.0,
            2194.0,
            2195.0,
            2196.0,
            2197.0,
            2198.0,
            2199.0,
            2200.0,
            2201.0,
            2202.0,
            2203.0,
            2204.0,
            2205.0,
            2206.0,
            2207.0,
            2208.0,
            2209.0,
            2210.0,
            2211.0,
            2212.0,
            2213.0,
            2214.0,
            2215.0,
            2216.0,
            2217.0,
            2218.0,
            2219.0,
            2220.0,
            2221.0,
            2222.0,
            2223.0,
            2224.0,
            2225.0,
            2226.0,
            2227.0,
            2228.0,
            2229.0,
            2230.0,
            2231.0,
            2232.0,
            2233.0,
            2234.0,
            2235.0,
            2236.0,
            2237.0,
            2238.0,
            2239.0,
            2240.0,
            2241.0,
            2242.0,
            2243.0,
            2244.0,
            2245.0,
            2246.0,
            2247.0,
            2248.0,
            2249.0,
            2250.0,
        ],
        [
            0.045338,
            0.045177,
            0.045016,
            0.045016,
            0.044695,
            0.044373,
            0.044051,
            0.044051,
            0.043891,
            0.043087,
            0.042765,
            0.042444,
            0.042444,
            0.041479,
            0.041479,
            0.041158,
            0.040836,
            0.040514,
            0.040193,
            0.040193,
            0.03955,
            0.03955,
            0.03955,
            0.039228,
            0.038585,
            0.038585,
            0.038264,
            0.037942,
            0.037942,
            0.037942,
            0.037621,
            0.03746,
            0.037299,
            0.037299,
            0.037299,
            0.036977,
            0.036977,
            0.036977,
            0.036656,
            0.036656,
            0.036334,
            0.036334,
            0.036334,
            0.036334,
            0.036334,
            0.036013,
            0.036013,
            0.036013,
            0.036013,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.035691,
            0.035691,
            0.035691,
            0.065595,
            0.065595,
            0.065595,
            0.065595,
            0.065595,
            0.046945,
            0.038264,
            0.035691,
            0.035691,
            0.034084,
            0.034084,
            0.034405,
            0.034727,
            0.034727,
            0.035048,
            0.035048,
            0.035691,
            0.035852,
            0.036334,
            0.036334,
            0.036334,
            0.037942,
            0.038585,
            0.039228,
            0.039228,
            0.040514,
            0.042765,
            0.044373,
            0.044373,
            0.096141,
            0.096141,
            0.096141,
            0.042444,
            0.042765,
            0.042122,
            0.041801,
            0.041801,
            0.041479,
            0.041158,
            0.039871,
            0.039228,
            0.038585,
            0.038585,
            0.037621,
            0.036977,
            0.036656,
            0.036013,
            0.036013,
            0.035691,
            0.034405,
            0.034405,
            0.034084,
            0.033762,
            0.033762,
            0.033441,
            0.033441,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.032154,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032219,
            0.032283,
            0.032347,
            0.032412,
            0.032476,
            0.032476,
            0.032476,
            0.032476,
            0.032583,
            0.03269,
            0.032797,
            0.032797,
            0.032797,
            0.032797,
            0.032905,
            0.033012,
            0.033119,
            0.033119,
            0.033199,
            0.03328,
            0.03336,
            0.033441,
            0.033441,
            0.033441,
            0.033548,
            0.033655,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033869,
            0.033976,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034244,
            0.034405,
            0.034405,
            0.034405,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.035048,
            0.035048,
            0.035048,
            0.035048,
            0.035048,
            0.03537,
            0.03537,
            0.035691,
            0.035691,
            0.035691,
            0.035691,
            0.035691,
            0.036013,
            0.036334,
            0.036495,
            0.036656,
            0.036656,
            0.036656,
            0.036656,
            0.036736,
            0.036817,
            0.036897,
            0.036977,
            0.036977,
            0.036977,
            0.037138,
            0.037299,
            0.037299,
            0.037299,
            0.037621,
            0.037621,
            0.037781,
            0.037942,
            0.037942,
            0.037942,
            0.037942,
            0.038049,
            0.038156,
            0.038264,
            0.038264,
            0.038264,
            0.038585,
            0.038585,
            0.038907,
            0.039228,
            0.039228,
            0.039228,
            0.039228,
            0.039228,
            0.03955,
            0.03955,
            0.03955,
            0.03955,
            0.03955,
            0.03955,
            0.03955,
            0.039711,
            0.039871,
            0.039871,
            0.039871,
            0.040193,
            0.040193,
            0.040193,
            0.040193,
            0.040354,
            0.040514,
            0.040514,
            0.040514,
            0.040836,
            0.040514,
            0.040675,
            0.040836,
            0.041158,
            0.041158,
            0.041158,
            0.041158,
            0.041158,
            0.041158,
            0.041158,
            0.041479,
            0.041479,
            0.041479,
            0.041479,
            0.041801,
            0.041801,
            0.041801,
            0.041961,
            0.042122,
            0.042444,
            0.042444,
            0.042765,
            0.042765,
            0.042765,
            0.042765,
            0.042926,
            0.043087,
            0.043408,
            0.043408,
            0.04373,
            0.04373,
            0.04373,
            0.04373,
            0.044051,
            0.044051,
            0.044051,
            0.044051,
            0.044051,
            0.044373,
            0.044373,
            0.044373,
            0.044695,
            0.044695,
            0.044695,
            0.045016,
            0.045016,
            0.045016,
            0.045016,
            0.045016,
            0.045338,
            0.045338,
            0.045498,
            0.045659,
            0.045659,
            0.045659,
            0.045659,
            0.04582,
            0.045981,
            0.045981,
            0.046302,
            0.046302,
            0.046302,
            0.046463,
            0.046624,
            0.046624,
            0.046624,
            0.046624,
            0.046624,
            0.046624,
            0.046624,
            0.1,
        ],
    )


@component.add(
    name="IMV_SS_Final_Mn_residual",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_ss_final_mn_residual():
    return np.interp(
        time(),
        [
            1850.0,
            1851.0,
            1852.0,
            1853.0,
            1854.0,
            1855.0,
            1856.0,
            1857.0,
            1858.0,
            1859.0,
            1860.0,
            1861.0,
            1862.0,
            1863.0,
            1864.0,
            1865.0,
            1866.0,
            1867.0,
            1868.0,
            1869.0,
            1870.0,
            1871.0,
            1872.0,
            1873.0,
            1874.0,
            1875.0,
            1876.0,
            1877.0,
            1878.0,
            1879.0,
            1880.0,
            1881.0,
            1882.0,
            1883.0,
            1884.0,
            1885.0,
            1886.0,
            1887.0,
            1888.0,
            1889.0,
            1890.0,
            1891.0,
            1892.0,
            1893.0,
            1894.0,
            1895.0,
            1896.0,
            1897.0,
            1898.0,
            1899.0,
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
            2101.0,
            2102.0,
            2103.0,
            2104.0,
            2105.0,
            2106.0,
            2107.0,
            2108.0,
            2109.0,
            2110.0,
            2111.0,
            2112.0,
            2113.0,
            2114.0,
            2115.0,
            2116.0,
            2117.0,
            2118.0,
            2119.0,
            2120.0,
            2121.0,
            2122.0,
            2123.0,
            2124.0,
            2125.0,
            2126.0,
            2127.0,
            2128.0,
            2129.0,
            2130.0,
            2131.0,
            2132.0,
            2133.0,
            2134.0,
            2135.0,
            2136.0,
            2137.0,
            2138.0,
            2139.0,
            2140.0,
            2141.0,
            2142.0,
            2143.0,
            2144.0,
            2145.0,
            2146.0,
            2147.0,
            2148.0,
            2149.0,
            2150.0,
            2151.0,
            2152.0,
            2153.0,
            2154.0,
            2155.0,
            2156.0,
            2157.0,
            2158.0,
            2159.0,
            2160.0,
            2161.0,
            2162.0,
            2163.0,
            2164.0,
            2165.0,
            2166.0,
            2167.0,
            2168.0,
            2169.0,
            2170.0,
            2171.0,
            2172.0,
            2173.0,
            2174.0,
            2175.0,
            2176.0,
            2177.0,
            2178.0,
            2179.0,
            2180.0,
            2181.0,
            2182.0,
            2183.0,
            2184.0,
            2185.0,
            2186.0,
            2187.0,
            2188.0,
            2189.0,
            2190.0,
            2191.0,
            2192.0,
            2193.0,
            2194.0,
            2195.0,
            2196.0,
            2197.0,
            2198.0,
            2199.0,
            2200.0,
            2201.0,
            2202.0,
            2203.0,
            2204.0,
            2205.0,
            2206.0,
            2207.0,
            2208.0,
            2209.0,
            2210.0,
            2211.0,
            2212.0,
            2213.0,
            2214.0,
            2215.0,
            2216.0,
            2217.0,
            2218.0,
            2219.0,
            2220.0,
            2221.0,
            2222.0,
            2223.0,
            2224.0,
            2225.0,
            2226.0,
            2227.0,
            2228.0,
            2229.0,
            2230.0,
            2231.0,
            2232.0,
            2233.0,
            2234.0,
            2235.0,
            2236.0,
            2237.0,
            2238.0,
            2239.0,
            2240.0,
            2241.0,
            2242.0,
            2243.0,
            2244.0,
            2245.0,
            2246.0,
            2247.0,
            2248.0,
            2249.0,
            2250.0,
        ],
        [
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            -1.79000e-04,
            -2.10000e-05,
            -8.00000e-06,
            -7.00000e-06,
            -1.00000e-06,
            -7.40000e-05,
            -2.50000e-05,
            -3.00000e-05,
            -1.30000e-05,
            -7.32000e-04,
            -3.12000e-04,
            -3.80000e-05,
            -4.52000e-04,
            -4.65000e-04,
            -2.70000e-05,
            8.68300e-03,
            1.60000e-02,
            2.36270e-02,
            1.44490e-02,
            -6.34000e-04,
            -1.15300e-03,
            -1.06800e-03,
            -2.27400e-03,
            1.69000e-04,
            9.70000e-05,
            2.18000e-04,
            1.86000e-04,
            1.69000e-04,
            4.27000e-04,
            9.28000e-04,
            1.11800e-03,
            5.17000e-04,
            1.41400e-03,
            3.93000e-04,
            3.30000e-05,
            -2.99000e-04,
            -1.00000e-04,
            5.08000e-04,
            2.01400e-03,
            1.64200e-03,
            7.68000e-04,
            1.16500e-03,
            1.35400e-03,
            1.83000e-03,
            1.30900e-03,
            3.72900e-03,
            1.81500e-03,
            2.28900e-03,
            2.87500e-03,
            1.89300e-03,
            3.29100e-03,
            3.38300e-03,
            5.38000e-04,
            4.00000e-05,
            2.14000e-03,
            2.54500e-03,
            3.67100e-03,
            2.45900e-03,
            2.16100e-03,
            4.72000e-03,
            4.68300e-03,
            6.25000e-03,
            5.53800e-03,
            8.28900e-03,
            9.29000e-03,
            3.94100e-03,
            9.62200e-03,
            1.58600e-03,
            6.33000e-04,
            7.67100e-03,
            1.48930e-02,
            1.07030e-02,
            2.70710e-02,
            1.44719e-01,
            1.00390e-02,
            5.24813e-01,
            7.42572e-01,
            7.31056e-01,
            6.98464e-01,
            8.89664e-01,
            1.13915e00,
            1.30288e00,
            1.39056e00,
            1.45070e00,
            1.53326e00,
            1.55034e00,
            1.52107e00,
            1.54514e00,
            1.58181e00,
            1.74376e00,
            1.84792e00,
            1.75779e00,
            1.75619e00,
            1.89091e00,
            1.94605e00,
            2.08365e00,
            2.10754e00,
            2.27638e00,
            2.35073e00,
            2.33100e00,
            2.25848e00,
            2.20133e00,
            2.18046e00,
            2.28957e00,
            2.30399e00,
            2.37778e00,
            2.44843e00,
            2.45849e00,
            2.32581e00,
            2.04195e00,
            1.49353e-01,
            1.22828e00,
            1.83989e00,
            2.15379e00,
            2.31565e00,
            1.97956e00,
            4.28000e-04,
            2.34140e-02,
            2.84190e-02,
            1.81670e-02,
            -6.00680e-02,
            7.42500e-03,
            -9.09300e-03,
            -3.79300e-03,
            -1.07880e-02,
            4.82970e-02,
            -1.37600e-03,
            2.28490e-02,
            6.56420e-02,
            4.50680e-02,
            4.22930e-02,
            2.96500e-03,
            2.13180e-02,
            7.80000e-04,
            1.19266e-01,
            8.83300e-03,
            3.68200e-03,
            2.20760e-02,
            2.32420e-02,
            7.36900e-03,
            5.24850e-02,
            7.11680e-02,
            4.43510e-02,
            2.65800e-02,
            2.17260e-02,
            3.93250e-02,
            1.55640e-02,
            2.47730e-02,
            3.17240e-02,
            1.52950e-02,
            7.54350e-02,
            -4.89800e-03,
            -4.32200e-03,
            5.40400e-03,
            -2.04000e-03,
            -6.00000e-05,
            1.55220e-02,
            2.39660e-02,
            1.41140e-02,
            1.07000e-04,
            1.33260e-02,
            -1.82000e-03,
            7.34080e-02,
            3.26140e-02,
            -6.49500e-03,
            -1.53580e-02,
            2.38790e-02,
            2.13387e00,
            5.44183e00,
            6.68063e00,
            7.14847e00,
            7.30990e00,
            7.43432e00,
            1.88954e00,
            2.18061e00,
            2.08315e00,
            2.05270e00,
            2.01802e00,
            1.79566e00,
            1.66833e00,
            1.57412e00,
            1.61069e00,
            1.85108e00,
            1.99058e00,
            2.03884e00,
            2.09497e00,
            2.14493e00,
            2.13560e00,
            2.10656e00,
            2.08163e00,
            2.15498e00,
            2.29833e00,
            2.28855e00,
            2.25624e00,
            2.24134e00,
            2.22293e00,
            2.25368e00,
            2.25031e00,
            2.20216e00,
            2.37267e00,
            2.39967e00,
            2.28799e00,
            2.25092e00,
            2.17127e00,
            2.03061e00,
            1.88783e00,
            1.74057e00,
            1.81204e00,
            1.80460e00,
            2.00620e00,
            2.17261e00,
            2.15077e00,
            2.14150e00,
            2.14990e00,
            2.23723e00,
            2.27732e00,
            2.27395e00,
            2.27710e00,
            2.28031e00,
            2.28337e00,
            2.28639e00,
            2.28950e00,
            2.29198e00,
            2.29370e00,
            2.29448e00,
            2.29535e00,
            2.28356e00,
            2.21548e00,
            2.17758e00,
            2.19337e00,
            2.19838e00,
            2.20000e00,
            2.19895e00,
            2.19817e00,
            2.38640e00,
            6.41469e00,
            8.42145e00,
            9.16443e00,
            9.54024e00,
            9.73115e00,
            9.84567e00,
            9.93019e00,
            1.00095e01,
            1.00858e01,
            9.77955e00,
            9.83536e00,
            9.65884e00,
            9.48309e00,
            9.51584e00,
            9.38847e00,
            9.24206e00,
            9.28891e00,
            9.10522e00,
            9.02903e00,
            9.07749e00,
            9.12905e00,
            9.18251e00,
            9.15938e00,
            9.07592e00,
            9.02217e00,
            9.07692e00,
            9.13290e00,
            9.18460e00,
            9.02138e00,
            9.00206e00,
            8.99048e00,
            8.96886e00,
            8.98632e00,
            8.95951e00,
            8.72447e00,
            8.71817e00,
            8.58838e00,
            8.42857e00,
            8.46466e00,
            8.40348e00,
            8.23529e00,
            8.18568e00,
            8.10298e00,
            8.04740e00,
            8.03590e00,
            7.86384e00,
            7.81930e00,
            7.81622e00,
            7.72229e00,
            7.61357e00,
            7.44699e00,
            7.36439e00,
            7.31809e00,
            7.17928e00,
            7.10804e00,
            7.13029e00,
            7.00272e00,
            6.92384e00,
            6.68699e00,
            6.64888e00,
            6.61014e00,
            6.46214e00,
            6.30872e00,
            6.20253e00,
            5.97802e00,
            5.94130e00,
            5.79139e00,
            5.76201e00,
            5.52163e00,
            5.32124e00,
            5.07499e00,
            4.82968e00,
            4.71515e00,
            4.54301e00,
            4.47186e00,
            4.13527e00,
            3.98405e00,
            3.88469e00,
            3.69443e00,
            3.59880e00,
            3.49626e00,
            3.34953e00,
            3.27692e00,
            3.21911e00,
            3.09916e00,
            2.94012e00,
            2.87119e00,
            2.97266e00,
            3.44736e00,
            3.30042e00,
            3.16799e00,
            3.03018e00,
            2.89358e00,
            2.75362e00,
            2.64292e00,
            2.49634e00,
            2.36376e00,
            2.25601e00,
            2.17737e00,
            2.11652e00,
            2.02554e00,
            1.89436e00,
            1.82651e00,
            1.78200e00,
            1.69769e00,
            1.64320e00,
            1.55954e00,
            1.46095e00,
            1.39497e00,
            1.35503e00,
            1.27503e00,
            1.21337e00,
            1.17872e00,
            1.14915e00,
            1.09797e00,
            1.05002e00,
            1.00161e00,
            9.66713e-01,
            9.25098e-01,
            9.20083e-01,
            9.02998e-01,
            8.82607e-01,
            8.71637e-01,
            8.52670e-01,
            8.33386e-01,
            8.48585e-01,
            8.49301e-01,
            8.41900e-01,
            8.19090e-01,
            8.11758e-01,
            8.09366e-01,
            7.93095e-01,
            7.78620e-01,
        ],
    )


@component.add(
    name="IMV_SS_Mn_WANTED",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_ss_mn_wanted():
    return np.interp(
        time(),
        [
            1850.0,
            1851.0,
            1852.0,
            1853.0,
            1854.0,
            1855.0,
            1856.0,
            1857.0,
            1858.0,
            1859.0,
            1860.0,
            1861.0,
            1862.0,
            1863.0,
            1864.0,
            1865.0,
            1866.0,
            1867.0,
            1868.0,
            1869.0,
            1870.0,
            1871.0,
            1872.0,
            1873.0,
            1874.0,
            1875.0,
            1876.0,
            1877.0,
            1878.0,
            1879.0,
            1880.0,
            1881.0,
            1882.0,
            1883.0,
            1884.0,
            1885.0,
            1886.0,
            1887.0,
            1888.0,
            1889.0,
            1890.0,
            1891.0,
            1892.0,
            1893.0,
            1894.0,
            1895.0,
            1896.0,
            1897.0,
            1898.0,
            1899.0,
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
            2101.0,
            2102.0,
            2103.0,
            2104.0,
            2105.0,
            2106.0,
            2107.0,
            2108.0,
            2109.0,
            2110.0,
            2111.0,
            2112.0,
            2113.0,
            2114.0,
            2115.0,
            2116.0,
            2117.0,
            2118.0,
            2119.0,
            2120.0,
            2121.0,
            2122.0,
            2123.0,
            2124.0,
            2125.0,
            2126.0,
            2127.0,
            2128.0,
            2129.0,
            2130.0,
            2131.0,
            2132.0,
            2133.0,
            2134.0,
            2135.0,
            2136.0,
            2137.0,
            2138.0,
            2139.0,
            2140.0,
            2141.0,
            2142.0,
            2143.0,
            2144.0,
            2145.0,
            2146.0,
            2147.0,
            2148.0,
            2149.0,
            2150.0,
            2151.0,
            2152.0,
            2153.0,
            2154.0,
            2155.0,
            2156.0,
            2157.0,
            2158.0,
            2159.0,
            2160.0,
            2161.0,
            2162.0,
            2163.0,
            2164.0,
            2165.0,
            2166.0,
            2167.0,
            2168.0,
            2169.0,
            2170.0,
            2171.0,
            2172.0,
            2173.0,
            2174.0,
            2175.0,
            2176.0,
            2177.0,
            2178.0,
            2179.0,
            2180.0,
            2181.0,
            2182.0,
            2183.0,
            2184.0,
            2185.0,
            2186.0,
            2187.0,
            2188.0,
            2189.0,
            2190.0,
            2191.0,
            2192.0,
            2193.0,
            2194.0,
            2195.0,
            2196.0,
            2197.0,
            2198.0,
            2199.0,
            2200.0,
            2201.0,
            2202.0,
            2203.0,
            2204.0,
            2205.0,
            2206.0,
            2207.0,
            2208.0,
            2209.0,
            2210.0,
            2211.0,
            2212.0,
            2213.0,
            2214.0,
            2215.0,
            2216.0,
            2217.0,
            2218.0,
            2219.0,
            2220.0,
            2221.0,
            2222.0,
            2223.0,
            2224.0,
            2225.0,
            2226.0,
            2227.0,
            2228.0,
            2229.0,
            2230.0,
            2231.0,
            2232.0,
            2233.0,
            2234.0,
            2235.0,
            2236.0,
            2237.0,
            2238.0,
            2239.0,
            2240.0,
            2241.0,
            2242.0,
            2243.0,
            2244.0,
            2245.0,
            2246.0,
            2247.0,
            2248.0,
            2249.0,
            2250.0,
        ],
        [
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            1.12200e-03,
            1.22800e-03,
            1.30100e-03,
            1.33600e-03,
            1.35900e-03,
            2.61700e-03,
            2.66500e-03,
            2.86900e-03,
            2.93100e-03,
            4.73600e-03,
            6.07200e-03,
            7.06100e-03,
            8.04000e-03,
            1.09760e-02,
            1.12640e-02,
            1.18650e-02,
            1.60510e-02,
            2.36270e-02,
            1.98740e-02,
            1.94630e-02,
            2.28700e-02,
            2.91800e-02,
            4.01750e-02,
            5.46890e-02,
            6.44780e-02,
            7.24590e-02,
            7.78330e-02,
            8.18680e-02,
            8.59400e-02,
            9.46800e-02,
            9.85650e-02,
            1.09118e-01,
            1.25280e-01,
            1.34091e-01,
            1.50425e-01,
            1.51243e-01,
            1.58745e-01,
            1.65978e-01,
            1.79839e-01,
            2.00746e-01,
            2.08651e-01,
            2.16988e-01,
            2.27482e-01,
            2.42558e-01,
            2.42521e-01,
            2.61442e-01,
            2.85092e-01,
            3.01211e-01,
            3.14363e-01,
            3.38950e-01,
            3.82336e-01,
            4.12935e-01,
            4.29753e-01,
            4.37279e-01,
            4.72668e-01,
            5.05361e-01,
            5.37201e-01,
            5.90414e-01,
            6.11439e-01,
            6.44387e-01,
            6.86277e-01,
            7.37510e-01,
            7.80234e-01,
            8.29286e-01,
            8.82329e-01,
            9.11644e-01,
            9.90875e-01,
            1.05506e00,
            1.06940e00,
            1.10795e00,
            1.18576e00,
            1.25434e00,
            1.36754e00,
            1.53610e00,
            1.44697e00,
            2.00975e00,
            2.27460e00,
            2.29390e00,
            2.31196e00,
            2.54258e00,
            2.84861e00,
            3.05855e00,
            3.19231e00,
            3.29374e00,
            3.44528e00,
            3.50294e00,
            3.52575e00,
            3.59804e00,
            3.71453e00,
            3.94052e00,
            4.06720e00,
            4.03675e00,
            4.07009e00,
            4.25006e00,
            4.35079e00,
            4.54067e00,
            4.62530e00,
            4.86163e00,
            4.98305e00,
            5.02544e00,
            5.02544e00,
            5.03951e00,
            5.07624e00,
            5.25986e00,
            5.32360e00,
            5.44655e00,
            5.61268e00,
            5.69640e00,
            5.64728e00,
            5.44687e00,
            3.66020e00,
            4.79698e00,
            5.48407e00,
            5.86672e00,
            6.12750e00,
            5.87135e00,
            3.82042e00,
            3.88442e00,
            4.02873e00,
            4.13827e00,
            4.04604e00,
            3.97539e00,
            3.91695e00,
            3.90316e00,
            3.83465e00,
            3.97399e00,
            4.05509e00,
            4.17071e00,
            4.34953e00,
            4.56194e00,
            4.68544e00,
            4.85580e00,
            4.97226e00,
            4.99115e00,
            5.62116e00,
            5.76495e00,
            5.90005e00,
            6.14635e00,
            6.32324e00,
            6.41483e00,
            6.62784e00,
            6.80751e00,
            7.09335e00,
            7.22120e00,
            7.41171e00,
            7.48738e00,
            7.50813e00,
            7.76240e00,
            7.81702e00,
            7.92682e00,
            8.21284e00,
            8.25072e00,
            8.22703e00,
            8.32284e00,
            8.31444e00,
            8.33278e00,
            8.42910e00,
            8.44021e00,
            8.63174e00,
            8.62413e00,
            8.71183e00,
            8.70698e00,
            8.87277e00,
            9.04367e00,
            8.92218e00,
            8.85974e00,
            8.86035e00,
            1.10590e01,
            1.43395e01,
            1.55625e01,
            1.60305e01,
            1.61911e01,
            1.63069e01,
            1.09329e01,
            1.12246e01,
            1.11017e01,
            1.10333e01,
            1.09830e01,
            1.09768e01,
            1.08921e01,
            1.07950e01,
            1.08019e01,
            1.10554e01,
            1.12536e01,
            1.13006e01,
            1.13517e01,
            1.13996e01,
            1.13741e01,
            1.13021e01,
            1.12487e01,
            1.13295e01,
            1.14607e01,
            1.14774e01,
            1.14155e01,
            1.13784e01,
            1.13382e01,
            1.13557e01,
            1.13443e01,
            1.12587e01,
            1.14666e01,
            1.15327e01,
            1.13629e01,
            1.12927e01,
            1.11804e01,
            1.10594e01,
            1.10167e01,
            1.10275e01,
            1.11379e01,
            1.10865e01,
            1.12766e01,
            1.15183e01,
            1.14730e01,
            1.14295e01,
            1.14120e01,
            1.14920e01,
            1.15412e01,
            1.15236e01,
            1.15071e01,
            1.14926e01,
            1.14801e01,
            1.14694e01,
            1.14602e01,
            1.14518e01,
            1.14428e01,
            1.14320e01,
            1.14222e01,
            1.13982e01,
            1.12902e01,
            1.12096e01,
            1.12130e01,
            1.12132e01,
            1.12101e01,
            1.12022e01,
            1.11939e01,
            1.14440e01,
            1.52902e01,
            1.71281e01,
            1.78060e01,
            1.81096e01,
            1.82317e01,
            1.82766e01,
            1.82932e01,
            1.82992e01,
            1.83015e01,
            1.80810e01,
            1.80249e01,
            1.78879e01,
            1.77614e01,
            1.76254e01,
            1.74672e01,
            1.73567e01,
            1.73028e01,
            1.71661e01,
            1.71063e01,
            1.70989e01,
            1.70447e01,
            1.69905e01,
            1.69455e01,
            1.68728e01,
            1.67894e01,
            1.67447e01,
            1.66999e01,
            1.66552e01,
            1.64952e01,
            1.63628e01,
            1.62597e01,
            1.61272e01,
            1.59789e01,
            1.59479e01,
            1.58378e01,
            1.57785e01,
            1.56681e01,
            1.55440e01,
            1.54943e01,
            1.54242e01,
            1.53293e01,
            1.52517e01,
            1.51402e01,
            1.50315e01,
            1.49212e01,
            1.47377e01,
            1.46176e01,
            1.45343e01,
            1.44541e01,
            1.43714e01,
            1.42132e01,
            1.40855e01,
            1.39916e01,
            1.38678e01,
            1.37581e01,
            1.36768e01,
            1.35578e01,
            1.34903e01,
            1.33690e01,
            1.32842e01,
            1.31986e01,
            1.30752e01,
            1.29561e01,
            1.28754e01,
            1.27341e01,
            1.26302e01,
            1.24755e01,
            1.23858e01,
            1.22091e01,
            1.21121e01,
            1.19898e01,
            1.18081e01,
            1.16378e01,
            1.14386e01,
            1.12571e01,
            1.09387e01,
            1.07285e01,
            1.05712e01,
            1.02719e01,
            1.00406e01,
            9.81690e00,
            9.58575e00,
            9.38164e00,
            9.20855e00,
            9.00767e00,
            8.79296e00,
            8.60700e00,
            8.45585e00,
            8.31432e00,
            8.14960e00,
            8.00089e00,
            7.84698e00,
            7.69249e00,
            7.53549e00,
            7.40004e00,
            7.24115e00,
            7.09488e00,
            6.93144e00,
            6.75835e00,
            6.60954e00,
            6.44898e00,
            6.29772e00,
            6.14579e00,
            6.02296e00,
            5.86918e00,
            5.75707e00,
            5.62198e00,
            5.48817e00,
            5.39583e00,
            5.28332e00,
            5.14429e00,
            5.01426e00,
            4.93821e00,
            4.86300e00,
            4.72718e00,
            4.61237e00,
            4.51710e00,
            4.43471e00,
            4.33366e00,
            4.25127e00,
            4.19167e00,
            4.08954e00,
            4.00192e00,
            3.92768e00,
            3.87572e00,
            3.76120e00,
            3.74681e00,
            3.68233e00,
            3.59464e00,
            3.56069e00,
            3.53756e00,
            3.48171e00,
            3.42304e00,
        ],
    )


@component.add(
    name="IMV_SS_MnCr_RECYCLED",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_ss_mncr_recycled():
    return np.interp(
        time(),
        [
            1850.0,
            1851.0,
            1852.0,
            1853.0,
            1854.0,
            1855.0,
            1856.0,
            1857.0,
            1858.0,
            1859.0,
            1860.0,
            1861.0,
            1862.0,
            1863.0,
            1864.0,
            1865.0,
            1866.0,
            1867.0,
            1868.0,
            1869.0,
            1870.0,
            1871.0,
            1872.0,
            1873.0,
            1874.0,
            1875.0,
            1876.0,
            1877.0,
            1878.0,
            1879.0,
            1880.0,
            1881.0,
            1882.0,
            1883.0,
            1884.0,
            1885.0,
            1886.0,
            1887.0,
            1888.0,
            1889.0,
            1890.0,
            1891.0,
            1892.0,
            1893.0,
            1894.0,
            1895.0,
            1896.0,
            1897.0,
            1898.0,
            1899.0,
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
            2101.0,
            2102.0,
            2103.0,
            2104.0,
            2105.0,
            2106.0,
            2107.0,
            2108.0,
            2109.0,
            2110.0,
            2111.0,
            2112.0,
            2113.0,
            2114.0,
            2115.0,
            2116.0,
            2117.0,
            2118.0,
            2119.0,
            2120.0,
            2121.0,
            2122.0,
            2123.0,
            2124.0,
            2125.0,
            2126.0,
            2127.0,
            2128.0,
            2129.0,
            2130.0,
            2131.0,
            2132.0,
            2133.0,
            2134.0,
            2135.0,
            2136.0,
            2137.0,
            2138.0,
            2139.0,
            2140.0,
            2141.0,
            2142.0,
            2143.0,
            2144.0,
            2145.0,
            2146.0,
            2147.0,
            2148.0,
            2149.0,
            2150.0,
            2151.0,
            2152.0,
            2153.0,
            2154.0,
            2155.0,
            2156.0,
            2157.0,
            2158.0,
            2159.0,
            2160.0,
            2161.0,
            2162.0,
            2163.0,
            2164.0,
            2165.0,
            2166.0,
            2167.0,
            2168.0,
            2169.0,
            2170.0,
            2171.0,
            2172.0,
            2173.0,
            2174.0,
            2175.0,
            2176.0,
            2177.0,
            2178.0,
            2179.0,
            2180.0,
            2181.0,
            2182.0,
            2183.0,
            2184.0,
            2185.0,
            2186.0,
            2187.0,
            2188.0,
            2189.0,
            2190.0,
            2191.0,
            2192.0,
            2193.0,
            2194.0,
            2195.0,
            2196.0,
            2197.0,
            2198.0,
            2199.0,
            2200.0,
            2201.0,
            2202.0,
            2203.0,
            2204.0,
            2205.0,
            2206.0,
            2207.0,
            2208.0,
            2209.0,
            2210.0,
            2211.0,
            2212.0,
            2213.0,
            2214.0,
            2215.0,
            2216.0,
            2217.0,
            2218.0,
            2219.0,
            2220.0,
            2221.0,
            2222.0,
            2223.0,
            2224.0,
            2225.0,
            2226.0,
            2227.0,
            2228.0,
            2229.0,
            2230.0,
            2231.0,
            2232.0,
            2233.0,
            2234.0,
            2235.0,
            2236.0,
            2237.0,
            2238.0,
            2239.0,
            2240.0,
            2241.0,
            2242.0,
            2243.0,
            2244.0,
            2245.0,
            2246.0,
            2247.0,
            2248.0,
            2249.0,
            2250.0,
        ],
        [
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            9.41000e-07,
            8.88347e-06,
            2.16957e-05,
            3.65144e-05,
            5.15793e-05,
            6.80538e-05,
            9.08572e-05,
            1.16336e-04,
            1.42598e-04,
            1.68566e-04,
            2.03060e-04,
            2.51704e-04,
            3.09929e-04,
            3.74914e-04,
            4.50824e-04,
            5.30287e-04,
            6.17379e-04,
            7.65529e-04,
            1.16871e-03,
            2.10233e-03,
            3.43934e-03,
            4.57039e-03,
            5.55418e-03,
            6.29835e-03,
            6.90450e-03,
            7.25453e-03,
            7.26459e-03,
            7.03231e-03,
            6.58634e-03,
            5.96177e-03,
            5.25826e-03,
            4.56368e-03,
            3.92008e-03,
            3.34444e-03,
            2.84044e-03,
            2.40507e-03,
            2.03225e-03,
            1.71481e-03,
            1.44558e-03,
            1.21782e-03,
            1.02550e-03,
            8.63280e-04,
            7.26572e-04,
            6.11425e-04,
            7.22883e-04,
            1.53734e-03,
            2.72310e-03,
            4.05851e-03,
            5.38816e-03,
            6.66134e-03,
            7.90790e-03,
            9.17079e-03,
            1.04509e-02,
            1.16675e-02,
            1.27711e-02,
            1.38284e-02,
            1.48850e-02,
            1.59892e-02,
            1.72029e-02,
            1.84127e-02,
            1.95811e-02,
            2.05197e-02,
            2.04361e-02,
            1.90705e-02,
            1.71270e-02,
            1.50335e-02,
            1.30079e-02,
            1.11511e-02,
            9.50104e-03,
            8.06211e-03,
            6.82229e-03,
            5.76237e-03,
            4.86094e-03,
            4.09698e-03,
            3.45105e-03,
            2.90578e-03,
            2.44598e-03,
            2.05855e-03,
            1.73226e-03,
            1.45756e-03,
            1.22635e-03,
            1.03177e-03,
            8.68039e-04,
            2.52340e-03,
            1.10169e-02,
            2.09383e-02,
            2.87700e-02,
            3.40303e-02,
            3.51777e-02,
            3.33732e-02,
            3.45448e-02,
            3.93566e-02,
            4.38393e-02,
            4.50872e-02,
            4.66831e-02,
            4.91977e-02,
            5.14311e-02,
            5.40629e-02,
            5.67981e-02,
            5.91446e-02,
            6.15854e-02,
            6.41912e-02,
            6.67209e-02,
            6.55274e-02,
            6.05476e-02,
            5.40645e-02,
            4.72871e-02,
            4.08219e-02,
            3.49426e-02,
            2.97423e-02,
            2.52210e-02,
            2.13327e-02,
            1.80129e-02,
            1.51919e-02,
            1.28024e-02,
            1.07829e-02,
            9.07861e-03,
            7.64171e-03,
            6.43110e-03,
            5.41163e-03,
            4.55339e-03,
            3.83105e-03,
            3.22317e-03,
            2.71168e-03,
            2.28131e-03,
            1.91922e-03,
            1.61459e-03,
            1.35830e-03,
            1.14269e-03,
            9.61306e-04,
            8.08709e-04,
            6.80335e-04,
            5.72338e-04,
            4.81485e-04,
            4.05053e-04,
            3.40754e-04,
            2.86662e-04,
            2.41157e-04,
            2.02875e-04,
            1.70670e-04,
            1.43578e-04,
            1.20786e-04,
            1.01612e-04,
            8.54820e-05,
            7.19124e-05,
            6.04969e-05,
            5.08935e-05,
            4.28145e-05,
            3.60180e-05,
            3.03005e-05,
            2.54905e-05,
            2.14441e-05,
            1.80400e-05,
            1.51763e-05,
            1.27672e-05,
            1.07405e-05,
            9.03552e-06,
            7.60120e-06,
            6.39457e-06,
            5.37948e-06,
            4.52553e-06,
            3.80714e-06,
            3.20278e-06,
            2.69437e-06,
            2.26666e-06,
            1.90684e-06,
            1.60415e-06,
            1.34950e-06,
            1.13528e-06,
            9.55000e-07,
            8.03000e-07,
            6.76000e-07,
            5.69000e-07,
            4.78000e-07,
            4.02000e-07,
            3.39000e-07,
            2.85000e-07,
            5.81168e-04,
            1.66354e-02,
            5.56474e-02,
            1.12581e-01,
            1.78978e-01,
            2.46284e-01,
            3.10135e-01,
            3.68376e-01,
            4.20154e-01,
            4.65506e-01,
            5.04903e-01,
            5.38930e-01,
            5.68115e-01,
            5.93093e-01,
            6.14529e-01,
            6.33096e-01,
            6.49257e-01,
            6.63171e-01,
            6.75063e-01,
            6.85177e-01,
            6.93825e-01,
            7.01332e-01,
            7.08025e-01,
            7.14283e-01,
            7.20132e-01,
            7.25399e-01,
            7.30025e-01,
            7.34315e-01,
            7.46180e-01,
            7.77050e-01,
            8.34347e-01,
            9.06888e-01,
            9.82012e-01,
            1.05390e00,
            1.12030e00,
            1.17979e00,
            1.23207e00,
            1.27757e00,
            1.31715e00,
            1.35150e00,
            1.38109e00,
            1.40643e00,
            1.42803e00,
            1.44639e00,
            1.46197e00,
            1.47516e00,
            1.48631e00,
            1.49573e00,
            1.50367e00,
            1.51035e00,
            1.51590e00,
            1.52028e00,
            1.52359e00,
            1.52612e00,
            1.52810e00,
            1.52968e00,
            1.53096e00,
            1.53207e00,
            1.54570e00,
            1.60242e00,
            1.67941e00,
            1.76103e00,
            1.83947e00,
            1.91110e00,
            1.97462e00,
            2.03002e00,
            2.07788e00,
            2.13540e00,
            2.22562e00,
            2.32923e00,
            2.45628e00,
            2.60652e00,
            2.76348e00,
            2.93007e00,
            3.11142e00,
            3.29594e00,
            3.49752e00,
            3.71009e00,
            3.91439e00,
            4.10003e00,
            4.26451e00,
            4.42128e00,
            4.58501e00,
            4.75266e00,
            4.91087e00,
            5.05296e00,
            5.18286e00,
            5.30846e00,
            5.41823e00,
            5.51037e00,
            5.57796e00,
            5.61758e00,
            5.65303e00,
            5.70976e00,
            5.77944e00,
            5.86887e00,
            5.98263e00,
            6.10339e00,
            6.23874e00,
            6.39769e00,
            6.57198e00,
            6.75776e00,
            6.94574e00,
            7.13230e00,
            7.32650e00,
            7.51622e00,
            7.69040e00,
            7.86776e00,
            8.06251e00,
            8.26751e00,
            8.47203e00,
            8.67336e00,
            8.87733e00,
            9.07615e00,
            9.25827e00,
            9.43946e00,
            9.62923e00,
            9.83421e00,
            1.00421e01,
            1.02477e01,
            1.04578e01,
            1.06766e01,
            1.09069e01,
            1.11522e01,
            1.13997e01,
            1.16455e01,
            1.18880e01,
            1.21336e01,
            1.23985e01,
            1.27009e01,
            1.30370e01,
            1.34025e01,
            1.37979e01,
            1.42148e01,
            1.46463e01,
            1.50873e01,
            1.55431e01,
            1.60052e01,
            1.64644e01,
            1.69214e01,
            1.73807e01,
            1.78395e01,
            1.82933e01,
            1.87478e01,
            1.92140e01,
            1.96851e01,
            2.01382e01,
            2.05449e01,
            2.09236e01,
            2.12854e01,
            2.16355e01,
            2.19775e01,
            2.23138e01,
            2.26453e01,
            2.29772e01,
            2.33120e01,
            2.36394e01,
            2.39463e01,
            2.42258e01,
            2.44808e01,
            2.47210e01,
            2.49438e01,
            2.51458e01,
            2.53264e01,
            2.54848e01,
            2.56216e01,
            2.57434e01,
            2.58524e01,
            2.59463e01,
            2.60229e01,
            2.60785e01,
            2.61126e01,
            2.61251e01,
            2.61156e01,
            2.60868e01,
            2.60424e01,
            2.59838e01,
            2.59109e01,
            2.58239e01,
            2.57271e01,
            2.56259e01,
            2.55197e01,
            2.54121e01,
            2.53030e01,
            2.51925e01,
            2.50800e01,
            2.49695e01,
            2.48709e01,
            2.47900e01,
            2.47316e01,
            2.46942e01,
        ],
    )


@component.add(
    name="INITIAL_Mn_AVERAGE_PROFIT_EFFECT",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_mn_average_profit_effect():
    """
    World 7 name was Li Ceramics, The initial values for the Li Ceramics stock is based on simulation outputs from the World 7 for the year 2005. The World 7 outputs are based on initial values from 1850. Source: Sverdrup, H. U. (2016) â€˜Modelling global extraction, supply, price and depletion of the extractable geological resources with the LITHIUM modelâ€™, Resources, Conservation and Recycling, 114, pp. 112â€“129. doi: 10.1016/j.resconrec.2016.07.002.
    """
    return 7.68924


@component.add(
    name="INITIAL_Mn_HIDDEN",
    units="Mt",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_mn_hidden():
    """
    World 7 name was Li hidden high grade, Li hidden low grade, Li hidden ultralow grade The initial values for the Li hidden stocks are based on simulation outputs from the World7 for the year 2005. The World7 outputs are based on initial values from 1850. high grade is 0,65 low grade is 19,88 ultralow grade is 2,89 Source: Sverdrup, H. U. (2016) â€˜Modelling global extraction, supply, price and depletion of the extractable geological resources with the LITHIUM modelâ€™, Resources, Conservation and Recycling, 114, pp. 112â€“129. doi: 10.1016/j.resconrec.2016.07.002.
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = 148.225
    value.loc[["HIGH_GRADE"]] = 395.266
    value.loc[["LOW_GRADE"]] = 3165.84
    return value


@component.add(
    name="INITIAL_Mn_IN_OTHER_USE",
    units="Mt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_mn_in_other_use():
    """
    World 7 name was Li Air conditioning, The initial values for the Li Air conditioning stock is based on simulation outputs from the World 7 for the year 2005. The World 7 outputs are based on initial values from 1850. Source: Sverdrup, H. U. (2016) â€˜Modelling global extraction, supply, price and depletion of the extractable geological resources with the LITHIUM modelâ€™, Resources, Conservation and Recycling, 114, pp. 112â€“129. doi: 10.1016/j.resconrec.2016.07.002.
    """
    return 248.305


@component.add(
    name="INITIAL_Mn_KNOWN",
    units="Mt",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_mn_known():
    """
    World 7 name was Li known high grade, Li known low grade, Li known ultralow grade. The initial values for the Li hidden stocks are based on simulation outputs from the World 7 for the year 2005. The World 7 outputs are based on initial values from 1850. high grade is 18,73 low grade is 4,06 ultralow grade is 0,00 Source: Sverdrup, H. U. (2016) â€˜Modelling global extraction, supply, price and depletion of the extractable geological resources with the LITHIUM modelâ€™, Resources, Conservation and Recycling, 114, pp. 112â€“129. doi: 10.1016/j.resconrec.2016.07.002.
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = 614.975
    value.loc[["HIGH_GRADE"]] = 1642.49
    value.loc[["LOW_GRADE"]] = 134.156
    return value


@component.add(
    name="INITIAL_Mn_MARKET", units="Mt", comp_type="Constant", comp_subtype="Normal"
)
def initial_mn_market():
    """
    World 7 name was Li Batteries, The initial values for the Li Batteries stock is based on simulation outputs from the World 7 for the year 2005. The World 7 outputs are based on initial values from 1850. Source: Sverdrup, H. U. (2016) â€˜Modelling global extraction, supply, price and depletion of the extractable geological resources with the LITHIUM modelâ€™, Resources, Conservation and Recycling, 114, pp. 112â€“129. doi: 10.1016/j.resconrec.2016.07.002.
    """
    return 1.25889


@component.add(
    name="INITIAL_Mn_WASTE", units="Mt", comp_type="Constant", comp_subtype="Normal"
)
def initial_mn_waste():
    """
    World 7 name was Li Effect averanger, The initial values for the Li Effect averanger stock is based on simulation outputs from the World 7 for the year 2005. The World 7 outputs are based on initial values from 1850. Source: Sverdrup, H. U. (2016) â€˜Modelling global extraction, supply, price and depletion of the extractable geological resources with the LITHIUM modelâ€™, Resources, Conservation and Recycling, 114, pp. 112â€“129. doi: 10.1016/j.resconrec.2016.07.002.
    """
    return 186.712


@component.add(
    name="mining_costs_of_ore_grades",
    units="M$/Year",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"extraction_price_of_ore_grades": 3, "mn_mining": 3},
)
def mining_costs_of_ore_grades():
    """
    Switching from higher ore quality to lower, based on la cost limit. When the price excceds the limit, the switch is made Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Harald Sverdrup, 2021: LOCOMOTION Project report: Estimating the cost of extraction and the price required for changing between mining of different ore grades in the WORLD7 model. 20 pp.
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = float(
        extraction_price_of_ore_grades().loc["RICH_GRADE"]
    ) * float(mn_mining().loc["RICH_GRADE"])
    value.loc[["HIGH_GRADE"]] = float(
        extraction_price_of_ore_grades().loc["HIGH_GRADE"]
    ) * float(mn_mining().loc["HIGH_GRADE"])
    value.loc[["LOW_GRADE"]] = float(
        extraction_price_of_ore_grades().loc["LOW_GRADE"]
    ) * float(mn_mining().loc["LOW_GRADE"])
    return value


@component.add(
    name="Mn_average_profit_effect",
    units="DMNL",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_mn_average_profit_effect": 1},
    other_deps={
        "_integ_mn_average_profit_effect": {
            "initial": {"initial_mn_average_profit_effect": 1},
            "step": {"mn_profit_effect_in": 1, "mn_profit_effect_out": 1},
        }
    },
)
def mn_average_profit_effect():
    """
    Averager for profit signal
    """
    return _integ_mn_average_profit_effect()


_integ_mn_average_profit_effect = Integ(
    lambda: mn_profit_effect_in() - mn_profit_effect_out(),
    lambda: initial_mn_average_profit_effect(),
    "_integ_mn_average_profit_effect",
)


@component.add(
    name="Mn_change_mining_grade",
    units="DMNL",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_mn_change_mining_grade": 7, "smooth_mn_price": 2},
)
def mn_change_mining_grade():
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = float(
        coefficients_mn_change_mining_grade().loc["RICH_GRADE", "A_S_CURVE"]
    )
    value.loc[["HIGH_GRADE"]] = float(
        coefficients_mn_change_mining_grade().loc["HIGH_GRADE", "A_S_CURVE"]
    ) / (
        1
        + np.exp(
            -float(coefficients_mn_change_mining_grade().loc["HIGH_GRADE", "B_S_CURVE"])
            * (
                smooth_mn_price()
                - float(
                    coefficients_mn_change_mining_grade().loc["HIGH_GRADE", "C_S_CURVE"]
                )
            )
        )
    )
    value.loc[["LOW_GRADE"]] = float(
        coefficients_mn_change_mining_grade().loc["LOW_GRADE", "A_S_CURVE"]
    ) / (
        1
        + np.exp(
            -float(coefficients_mn_change_mining_grade().loc["LOW_GRADE", "B_S_CURVE"])
            * (
                smooth_mn_price()
                - float(
                    coefficients_mn_change_mining_grade().loc["LOW_GRADE", "C_S_CURVE"]
                )
            )
        )
    )
    return value


@component.add(
    name="Mn_CONTENT_IN_MnCr", units="DMNL", comp_type="Constant", comp_subtype="Normal"
)
def mn_content_in_mncr():
    """
    Averaged Ni, Mn and Cr stainless steel content in simple quality stainless steel Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return 0.2


@component.add(
    name="Mn_CONTENT_IN_MnCrNi",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="Normal",
)
def mn_content_in_mncrni():
    """
    Averaged Ni, Mn and Cr stainless steel content in high quality stainless steel Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return 0.12


@component.add(
    name="Mn_demand",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "switch_eco2mat_mn_demand": 1,
        "time": 1,
        "mn_implicit_price": 1,
        "output_real": 1,
        "rate_mn_of_other_metals": 1,
        "mn_modified_demand_world7": 1,
    },
)
def mn_demand():
    return if_then_else(
        np.logical_and(switch_eco2mat_mn_demand() == 1, time() >= 2015),
        lambda: (
            sum(
                output_real()
                .loc[:, "MINING_AND_MANUFACTURING_OTHER_METALS"]
                .reset_coords(drop=True)
                .rename({"REGIONS_35_I": "REGIONS_35_I!"}),
                dim=["REGIONS_35_I!"],
            )
            * rate_mn_of_other_metals()
        )
        / mn_implicit_price(),
        lambda: mn_modified_demand_world7(),
    )


@component.add(
    name="Mn_demand_from_Al",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_in_al": 1, "al_mined": 1},
)
def mn_demand_from_al():
    """
    A small content of Mn is used in aluminium alloys. No data exists for this, but we have based the content on assumptions Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return mn_in_al() * al_mined()


@component.add(
    name="Mn_demand_from_Conventional_steel",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_society_output": 1, "mn_in_conventional_carbon_steel": 1},
)
def mn_demand_from_conventional_steel():
    """
    Demand for manganese from the Iron module Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return fe_society_output() * mn_in_conventional_carbon_steel()


@component.add(
    name="Mn_demand_WORLD7",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "imv_mn_other_demand": 1,
        "scaling_factor_in_mn_demand": 1,
        "mn_demand_from_conventional_steel": 1,
        "mn_demand_from_al": 1,
    },
)
def mn_demand_world7():
    """
    Summing up all demands for Mn Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return (
        imv_mn_other_demand() * scaling_factor_in_mn_demand()
        + mn_demand_from_conventional_steel()
        + mn_demand_from_al()
    )


@component.add(
    name="Mn_energy",
    units="TJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mn_energy_required_per_ore_grade": 3,
        "mn_mining": 3,
        "unit_conversion_kg_mt": 1,
        "unit_conversion_tj_mj": 1,
    },
)
def mn_energy():
    """
    This is the energy and water used associated with the materials consumed to extract this specific resource grade, expressed in MJ/kg product and m3/ton The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return (
        (
            float(mn_energy_required_per_ore_grade().loc["RICH_GRADE"])
            * float(mn_mining().loc["RICH_GRADE"])
            + float(mn_energy_required_per_ore_grade().loc["HIGH_GRADE"])
            * float(mn_mining().loc["HIGH_GRADE"])
            + float(mn_energy_required_per_ore_grade().loc["LOW_GRADE"])
            * float(mn_mining().loc["LOW_GRADE"])
        )
        * unit_conversion_kg_mt()
        * unit_conversion_tj_mj()
    )


@component.add(
    name="Mn_ENERGY_REQUIRED_FOR_RECYCLING",
    units="MJ/kg",
    comp_type="Constant",
    comp_subtype="Normal",
)
def mn_energy_required_for_recycling():
    """
    This is the energy and water used associated with the materials consumed to extract this specific resource grade, expressed in MJ/kg product and m3/ton The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup, Ole van Allen and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return 6


@component.add(
    name="Mn_energy_use_all",
    units="TJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_energy": 1, "mn_energy_use_recycling": 1},
)
def mn_energy_use_all():
    """
    All energy used for Mn production
    """
    return mn_energy() + mn_energy_use_recycling()


@component.add(
    name="Mn_energy_use_recycling",
    units="TJ/Mt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mn_recycled": 1,
        "mn_energy_required_for_recycling": 1,
        "unit_conversion_kg_mt": 1,
        "unit_conversion_tj_mj": 1,
    },
)
def mn_energy_use_recycling():
    """
    All energy used for recycling
    """
    return (
        mn_recycled()
        * mn_energy_required_for_recycling()
        * unit_conversion_kg_mt()
        * unit_conversion_tj_mj()
    )


@component.add(
    name="Mn_hidden_resources",
    units="Mt",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_mn_hidden_resources": 1},
    other_deps={
        "_integ_mn_hidden_resources": {
            "initial": {"initial_mn_hidden": 1},
            "step": {"mn_hidden_to_known": 1},
        }
    },
)
def mn_hidden_resources():
    """
    Hidden resources are assumed to exist based on geological understanding, but it has to be found and moved to known before it can be extracted Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _integ_mn_hidden_resources()


_integ_mn_hidden_resources = Integ(
    lambda: -mn_hidden_to_known(),
    lambda: initial_mn_hidden(),
    "_integ_mn_hidden_resources",
)


@component.add(
    name="Mn_hidden_to_known",
    units="Mt/Year",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mn_hidden_resources": 3,
        "mn_prospecting_rate": 3,
        "mn_prospecting_technology": 3,
    },
)
def mn_hidden_to_known():
    """
    The rate of actually finding hidden as a result of exploration. Proportional to amount remaining to be found and effort. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = (
        float(mn_hidden_resources().loc["RICH_GRADE"])
        * float(mn_prospecting_rate().loc["RICH_GRADE"])
        * float(mn_prospecting_technology().loc["RICH_GRADE"])
    )
    value.loc[["HIGH_GRADE"]] = (
        float(mn_hidden_resources().loc["HIGH_GRADE"])
        * float(mn_prospecting_rate().loc["HIGH_GRADE"])
        * float(mn_prospecting_technology().loc["HIGH_GRADE"])
    )
    value.loc[["LOW_GRADE"]] = (
        float(mn_hidden_resources().loc["LOW_GRADE"])
        * float(mn_prospecting_rate().loc["LOW_GRADE"])
        * float(mn_prospecting_technology().loc["LOW_GRADE"])
    )
    return value


@component.add(
    name="Mn_IMPLICIT_PRICE",
    units="Mdollars_2015/Mt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def mn_implicit_price():
    return 1270


@component.add(
    name="Mn_IN_CONVENTIONAL_CARBON_STEEL",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="Normal",
)
def mn_in_conventional_carbon_steel():
    """
    Derived from literature as explained in Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return 0.01


@component.add(
    name="Mn_in_other_use_stock",
    units="Mt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_mn_in_other_use_stock": 1},
    other_deps={
        "_integ_mn_in_other_use_stock": {
            "initial": {},
            "step": {"other_uses": 1, "mn_other_scrap": 1},
        }
    },
)
def mn_in_other_use_stock():
    """
    Stocks in use of all manganese that is not used for stainless steel or regular iron-based steel.
    """
    return _integ_mn_in_other_use_stock()


_integ_mn_in_other_use_stock = Integ(
    lambda: other_uses() - mn_other_scrap(), lambda: 0, "_integ_mn_in_other_use_stock"
)


@component.add(
    name="Mn_income_ore_grades",
    units="M$/Year",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_mining": 3, "smooth_mn_price": 3},
)
def mn_income_ore_grades():
    """
    Mining income as price times the amount supplied to market Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = float(mn_mining().loc["RICH_GRADE"]) * smooth_mn_price()
    value.loc[["HIGH_GRADE"]] = float(mn_mining().loc["HIGH_GRADE"]) * smooth_mn_price()
    value.loc[["LOW_GRADE"]] = float(mn_mining().loc["LOW_GRADE"]) * smooth_mn_price()
    return value


@component.add(
    name="Mn_known_reserves",
    units="Mt",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_mn_known_reserves": 1},
    other_deps={
        "_integ_mn_known_reserves": {
            "initial": {"initial_mn_known": 1},
            "step": {"mn_hidden_to_known": 1, "mn_mining": 1},
        }
    },
)
def mn_known_reserves():
    """
    Known are reserves that are known where they are located, and to be physically available, in such a way that they can be extracted. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _integ_mn_known_reserves()


_integ_mn_known_reserves = Integ(
    lambda: mn_hidden_to_known() - mn_mining(),
    lambda: initial_mn_known(),
    "_integ_mn_known_reserves",
)


@component.add(
    name="Mn_loss",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_waste": 1, "mn_loss_faktor": 1},
)
def mn_loss():
    return mn_waste() * mn_loss_faktor()


@component.add(
    name="Mn_LOSS_FAKTOR", units="1/Year", comp_type="Constant", comp_subtype="Normal"
)
def mn_loss_faktor():
    """
    Assumption based loss fraction of waste
    """
    return 0.02


@component.add(
    name="Mn_market",
    units="Mt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_mn_market": 1},
    other_deps={
        "_integ_mn_market": {
            "initial": {},
            "step": {
                "mn_return": 1,
                "mn_supply": 1,
                "mn_supply_to_society": 1,
                "mn_supply_to_ss": 1,
            },
        }
    },
)
def mn_market():
    """
    The amount Mn awailable for transaction in the maket.
    """
    return _integ_mn_market()


_integ_mn_market = Integ(
    lambda: mn_return() + mn_supply() - mn_supply_to_society() - mn_supply_to_ss(),
    lambda: 0.3,
    "_integ_mn_market",
)


@component.add(
    name="Mn_market_brake",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_mn_market_brake": 3, "mn_market": 1},
)
def mn_market_brake():
    """
    Market brake. The producers look at the commodity intermittent stocks in the market and reduce output when these stocks pile up during market slumps. The response curve and reaction limit is undocumented market trading experience by Sverdrup A=0,973589719 B=4,654669183 C=0,947935617
    """
    return (
        -float(coefficients_mn_market_brake().loc["A_S_CURVE"])
        / (
            1
            + np.exp(
                -float(coefficients_mn_market_brake().loc["B_S_CURVE"])
                * (mn_market() - float(coefficients_mn_market_brake().loc["C_S_CURVE"]))
            )
        )
        + 1
    )


@component.add(
    name="Mn_mining",
    units="Mt/Year",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mn_known_reserves": 3,
        "mn_mining_technology": 3,
        "mn_mining_rate": 3,
        "mn_rate_k": 3,
        "mn_change_mining_grade": 2,
    },
)
def mn_mining():
    """
    Mining output, summed over all grades Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = (
        float(mn_known_reserves().loc["RICH_GRADE"])
        * float(mn_mining_technology().loc["RICH_GRADE"])
        * float(mn_mining_rate().loc["RICH_GRADE"])
        * mn_rate_k()
    )
    value.loc[["HIGH_GRADE"]] = (
        float(mn_known_reserves().loc["HIGH_GRADE"])
        * float(mn_mining_technology().loc["HIGH_GRADE"])
        * float(mn_mining_rate().loc["HIGH_GRADE"])
        * float(mn_change_mining_grade().loc["HIGH_GRADE"])
        * mn_rate_k()
    )
    value.loc[["LOW_GRADE"]] = (
        float(mn_known_reserves().loc["LOW_GRADE"])
        * float(mn_change_mining_grade().loc["LOW_GRADE"])
        * mn_rate_k()
        * float(mn_mining_rate().loc["LOW_GRADE"])
        * float(mn_mining_technology().loc["LOW_GRADE"])
    )
    return value


@component.add(
    name="Mn_MINING_HISTORICAL",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"imv_mn_mining_historical": 1},
)
def mn_mining_historical():
    """
    USGS Mineral Commodities Summaries DS-140 series, downloaded from their website. Annual updates available
    """
    return imv_mn_mining_historical()


@component.add(
    name="Mn_MINING_RATE",
    units="1/Year",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def mn_mining_rate():
    """
    Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = 0.2
    value.loc[["HIGH_GRADE"]] = 0.2
    value.loc[["LOW_GRADE"]] = 0.2
    return value


@component.add(
    name="Mn_mining_technology",
    units="DMNL",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_mn_mining_technology": 9, "time": 3},
)
def mn_mining_technology():
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = float(
        coefficients_mn_mining_technology().loc["RICH_GRADE", "A_S_CURVE"]
    ) / (
        1
        + np.exp(
            -float(coefficients_mn_mining_technology().loc["RICH_GRADE", "B_S_CURVE"])
            * (
                time()
                - float(
                    coefficients_mn_mining_technology().loc["RICH_GRADE", "C_S_CURVE"]
                )
            )
        )
    )
    value.loc[["HIGH_GRADE"]] = float(
        coefficients_mn_mining_technology().loc["HIGH_GRADE", "A_S_CURVE"]
    ) / (
        1
        + np.exp(
            -float(coefficients_mn_mining_technology().loc["HIGH_GRADE", "B_S_CURVE"])
            * (
                time()
                - float(
                    coefficients_mn_mining_technology().loc["HIGH_GRADE", "C_S_CURVE"]
                )
            )
        )
    )
    value.loc[["LOW_GRADE"]] = float(
        coefficients_mn_mining_technology().loc["LOW_GRADE", "A_S_CURVE"]
    ) / (
        1
        + np.exp(
            -float(coefficients_mn_mining_technology().loc["LOW_GRADE", "B_S_CURVE"])
            * (
                time()
                - float(
                    coefficients_mn_mining_technology().loc["LOW_GRADE", "C_S_CURVE"]
                )
            )
        )
    )
    return value


@component.add(
    name="Mn_mining_total",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_mining": 3},
)
def mn_mining_total():
    """
    Total mining from all ore qualities
    """
    return (
        float(mn_mining().loc["RICH_GRADE"])
        + float(mn_mining().loc["HIGH_GRADE"])
        + float(mn_mining().loc["LOW_GRADE"])
    )


@component.add(
    name="Mn_modified_demand_WORLD7",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_demand_world7": 1, "mn_price_effect_demand": 1},
)
def mn_modified_demand_world7():
    """
    Mn demand after adjustment for price effects
    """
    return mn_demand_world7() * mn_price_effect_demand()


@component.add(
    name="Mn_NEW_price",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"mn_market": 1},
)
def mn_new_price():
    return np.interp(
        mn_market(),
        [
            0.0,
            0.01,
            0.02,
            0.03,
            0.04,
            0.05,
            0.06,
            0.07,
            0.08,
            0.09,
            0.1,
            0.11,
            0.12,
            0.13,
            0.14,
            0.15,
            0.16,
            0.17,
            0.18,
            0.19,
            0.2,
            0.21,
            0.22,
            0.23,
            0.24,
            0.25,
            0.26,
            0.27,
            0.28,
            0.29,
            0.3,
            0.31,
            0.32,
            0.33,
            0.34,
            0.35,
            0.36,
            0.37,
            0.38,
            0.39,
            0.4,
            0.41,
            0.42,
            0.43,
            0.44,
            0.45,
            0.46,
            0.47,
            0.48,
            0.49,
            0.5,
            0.51,
            0.52,
            0.53,
            0.54,
            0.55,
            0.56,
            0.57,
            0.58,
            0.59,
            0.6,
            0.61,
            0.62,
            0.63,
            0.64,
            0.65,
            0.66,
            0.67,
            0.68,
            0.69,
            0.7,
            0.71,
            0.72,
            0.73,
            0.74,
            0.75,
            0.76,
            0.77,
            0.78,
            0.79,
            0.8,
            0.81,
            0.82,
            0.83,
            0.84,
            0.85,
            0.86,
            0.87,
            0.88,
            0.89,
            0.9,
            0.91,
            0.92,
            0.93,
            0.94,
            0.95,
            0.96,
            0.97,
            0.98,
            0.99,
            1.0,
            1.01,
            1.02,
            1.03,
            1.04,
            1.05,
            1.06,
            1.07,
            1.08,
            1.09,
            1.1,
            1.11,
            1.12,
            1.13,
            1.14,
            1.15,
            1.16,
            1.17,
            1.18,
            1.19,
            1.2,
            1.21,
            1.22,
            1.23,
            1.24,
            1.25,
            1.26,
            1.27,
            1.28,
            1.29,
            1.3,
            1.31,
            1.32,
            1.33,
            1.34,
            1.35,
            1.36,
            1.37,
            1.38,
            1.39,
            1.4,
            1.41,
            1.42,
            1.43,
            1.44,
            1.45,
            1.46,
            1.47,
            1.48,
            1.49,
            1.5,
            1.51,
            1.52,
            1.53,
            1.54,
            1.55,
            1.56,
            1.57,
            1.58,
            1.59,
            1.6,
            1.61,
            1.62,
            1.63,
            1.64,
            1.65,
            1.66,
            1.67,
            1.68,
            1.69,
            1.7,
            1.71,
            1.72,
            1.73,
            1.74,
            1.75,
            1.76,
            1.77,
            1.78,
            1.79,
            1.8,
            1.81,
            1.82,
            1.83,
            1.84,
            1.85,
            1.86,
            1.87,
            1.88,
            1.89,
            1.9,
            1.91,
            1.92,
            1.93,
            1.94,
            1.95,
            1.96,
            1.97,
            1.98,
            1.99,
            2.0,
        ],
        [
            19900.0,
            18500.0,
            16000.0,
            15700.0,
            13300.0,
            12800.0,
            11300.0,
            10200.0,
            9900.0,
            9400.0,
            9000.0,
            8600.0,
            8300.0,
            8100.0,
            7800.0,
            7600.0,
            7200.0,
            6900.0,
            6700.0,
            6600.0,
            6400.0,
            6200.0,
            6100.0,
            5900.0,
            5700.0,
            5700.0,
            5500.0,
            5400.0,
            5300.0,
            5300.0,
            5200.0,
            5000.0,
            5000.0,
            4800.0,
            4700.0,
            4600.0,
            4400.0,
            4300.0,
            4250.0,
            4200.0,
            4166.67,
            4133.33,
            4100.0,
            4000.0,
            3900.0,
            3850.0,
            3800.0,
            3766.67,
            3733.33,
            3700.0,
            3550.0,
            3400.0,
            3300.0,
            3200.0,
            3100.0,
            3000.0,
            2975.0,
            2950.0,
            2925.0,
            2900.0,
            2800.0,
            2700.0,
            2600.0,
            2600.0,
            2600.0,
            2500.0,
            2500.0,
            2300.0,
            2300.0,
            2200.0,
            2200.0,
            2200.0,
            2150.0,
            2100.0,
            2100.0,
            2000.0,
            1950.0,
            1900.0,
            1900.0,
            1900.0,
            1900.0,
            1800.0,
            1800.0,
            1800.0,
            1700.0,
            1700.0,
            1700.0,
            1700.0,
            1500.0,
            1450.0,
            1400.0,
            1400.0,
            1300.0,
            1300.0,
            1300.0,
            1300.0,
            1200.0,
            1150.0,
            1100.0,
            1100.0,
            1100.0,
            1100.0,
            1100.0,
            1000.0,
            1000.0,
            1000.0,
            1000.0,
            1000.0,
            1000.0,
            1000.0,
            900.0,
            900.0,
            900.0,
            900.0,
            900.0,
            900.0,
            900.0,
            800.0,
            800.0,
            800.0,
            800.0,
            800.0,
            800.0,
            800.0,
            700.0,
            700.0,
            700.0,
            700.0,
            700.0,
            700.0,
            700.0,
            700.0,
            700.0,
            700.0,
            700.0,
            700.0,
            600.0,
            600.0,
            600.0,
            600.0,
            600.0,
            600.0,
            600.0,
            600.0,
            600.0,
            600.0,
            600.0,
            600.0,
            600.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            400.0,
            400.0,
            400.0,
            400.0,
            350.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            300.0,
            170.0,
            170.0,
        ],
    )


@component.add(
    name="Mn_other_Scrap",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_in_other_use_stock": 1, "imv_scrapping_rate_0": 1},
)
def mn_other_scrap():
    """
    Scrap flow, as a result of assuming a average resisidence time. Exoert assumption based on generic knowledge of the metal flows
    """
    return mn_in_other_use_stock() * imv_scrapping_rate_0()


@component.add(
    name="Mn_price",
    units="M$/Mt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_market": 1, "mn_price_exp_fit": 1, "mn_price_exp_fit_two": 1},
)
def mn_price():
    """
    The Mn market price as a function of market availability Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return if_then_else(
        mn_market() <= 0.31, lambda: mn_price_exp_fit(), lambda: mn_price_exp_fit_two()
    )


@component.add(
    name="Mn_price_effect_demand",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_mn_price_effect_on_demand": 3, "smooth_mn_price": 1},
)
def mn_price_effect_demand():
    """
    Response ofdemand to price Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return (
        -float(coefficients_mn_price_effect_on_demand().loc["A_S_CURVE"])
        / (
            1
            + np.exp(
                -float(coefficients_mn_price_effect_on_demand().loc["B_S_CURVE"])
                * (
                    smooth_mn_price()
                    - float(coefficients_mn_price_effect_on_demand().loc["C_S_CURVE"])
                )
            )
        )
        + 1
    )


@component.add(
    name="mn_price_exp_fit",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_mn_price_exp_fit_one": 3, "mn_market": 1},
)
def mn_price_exp_fit():
    """
    Intermediate parameterization of response curve
    """
    return float(coefficients_mn_price_exp_fit_one().loc["A_EXP_CURVE"]) * np.exp(
        -float(coefficients_mn_price_exp_fit_one().loc["B_EXP_CURVE"]) * mn_market()
    ) + float(coefficients_mn_price_exp_fit_one().loc["C_EXP_CURVE"])


@component.add(
    name="mn_price_exp_fit_two",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_mn_price_exp_fit_two": 3, "mn_market": 1},
)
def mn_price_exp_fit_two():
    """
    Intermediate parameterization
    """
    return float(coefficients_mn_price_exp_fit_two().loc["A_EXP_CURVE"]) * np.exp(
        -float(coefficients_mn_price_exp_fit_two().loc["B_EXP_CURVE"]) * mn_market()
    ) + float(coefficients_mn_price_exp_fit_two().loc["C_EXP_CURVE"])


@component.add(
    name="Mn_Profit",
    units="$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_income_ore_grades": 3, "mining_costs_of_ore_grades": 3},
)
def mn_profit():
    """
    Profit is defined as income minus all costs
    """
    return (
        (
            float(mn_income_ore_grades().loc["RICH_GRADE"])
            - float(mining_costs_of_ore_grades().loc["RICH_GRADE"])
        )
        + (
            float(mn_income_ore_grades().loc["HIGH_GRADE"])
            - float(mining_costs_of_ore_grades().loc["HIGH_GRADE"])
        )
        + (
            float(mn_income_ore_grades().loc["LOW_GRADE"])
            - float(mining_costs_of_ore_grades().loc["LOW_GRADE"])
        )
    )


@component.add(
    name="Mn_profit_effect_in",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_profit_effect_on_mining": 1},
)
def mn_profit_effect_in():
    return mn_profit_effect_on_mining()


@component.add(
    name="Mn_profit_effect_on_mining",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_profit": 2, "coefficients_mn_profit_effect_on_mining": 3},
)
def mn_profit_effect_on_mining():
    return if_then_else(
        mn_profit() < -120,
        lambda: 0,
        lambda: float(coefficients_mn_profit_effect_on_mining().loc["A_S_CURVE"])
        / (
            1
            + np.exp(
                -float(coefficients_mn_profit_effect_on_mining().loc["B_S_CURVE"])
                * (
                    mn_profit()
                    - float(coefficients_mn_profit_effect_on_mining().loc["C_S_CURVE"])
                )
            )
        ),
    )


@component.add(
    name="Mn_profit_effect_out",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_average_profit_effect": 1, "scaling_factor_in_mn_profit": 1},
)
def mn_profit_effect_out():
    return mn_average_profit_effect() * scaling_factor_in_mn_profit()


@component.add(
    name="Mn_PROSPECTING_RATE",
    units="1/Year",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def mn_prospecting_rate():
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = 0.016
    value.loc[["HIGH_GRADE"]] = 0.016
    value.loc[["LOW_GRADE"]] = 0.2
    return value


@component.add(
    name="Mn_Prospecting_technology",
    units="DMNL",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_mn_prospecting_technology": 9, "time": 3},
)
def mn_prospecting_technology():
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = float(
        coefficients_mn_prospecting_technology().loc["RICH_GRADE", "A_S_CURVE"]
    ) / (
        1
        + np.exp(
            -float(
                coefficients_mn_prospecting_technology().loc["RICH_GRADE", "B_S_CURVE"]
            )
            * (
                time()
                - float(
                    coefficients_mn_prospecting_technology().loc[
                        "RICH_GRADE", "C_S_CURVE"
                    ]
                )
            )
        )
    )
    value.loc[["HIGH_GRADE"]] = float(
        coefficients_mn_prospecting_technology().loc["HIGH_GRADE", "A_S_CURVE"]
    ) / (
        1
        + np.exp(
            -float(
                coefficients_mn_prospecting_technology().loc["HIGH_GRADE", "B_S_CURVE"]
            )
            * (
                time()
                - float(
                    coefficients_mn_prospecting_technology().loc[
                        "HIGH_GRADE", "C_S_CURVE"
                    ]
                )
            )
        )
    )
    value.loc[["LOW_GRADE"]] = float(
        coefficients_mn_prospecting_technology().loc["LOW_GRADE", "A_S_CURVE"]
    ) / (
        1
        + np.exp(
            -float(
                coefficients_mn_prospecting_technology().loc["LOW_GRADE", "B_S_CURVE"]
            )
            * (
                time()
                - float(
                    coefficients_mn_prospecting_technology().loc[
                        "LOW_GRADE", "C_S_CURVE"
                    ]
                )
            )
        )
    )
    return value


@component.add(
    name="Mn_rate_k",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mn_rate_k_scaling": 1,
        "mn_profit_effect_out": 1,
        "mn_market_brake": 1,
    },
)
def mn_rate_k():
    """
    Extraction rate. The final value for 2005 is based on the ratio of extraction rate and the estimated known (sometimes called Reserves). Adjusted for market size, when stock pile up. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return mn_rate_k_scaling() * mn_profit_effect_out() * mn_market_brake()


@component.add(
    name="Mn_RATE_K_SCALING", units="DMNL", comp_type="Constant", comp_subtype="Normal"
)
def mn_rate_k_scaling():
    """
    Numerical scaling of the extraction rate Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return 0.08


@component.add(
    name="Mn_recycled",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_waste": 1, "mn_recycling": 1},
)
def mn_recycled():
    """
    Mn recovered from the waste
    """
    return mn_waste() * mn_recycling()


@component.add(
    name="Mn_Recycling",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_mn_recycling": 3, "smooth_mn_price": 1},
)
def mn_recycling():
    """
    Response of recycling to price Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return float(coefficients_mn_recycling().loc["A_S_CURVE"]) / (
        1
        + np.exp(
            -float(coefficients_mn_recycling().loc["B_S_CURVE"])
            * (smooth_mn_price() - float(coefficients_mn_recycling().loc["C_S_CURVE"]))
        )
    )


@component.add(
    name="Mn_return",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"imv_ss_final_mn_residual": 1},
)
def mn_return():
    return imv_ss_final_mn_residual()


@component.add(
    name="Mn_scrap_in",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_other_scrap": 1},
)
def mn_scrap_in():
    """
    Scrap and waste from non-steel uses of manganese
    """
    return mn_other_scrap()


@component.add(
    name="Mn_Supply",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_mining_total": 1, "mn_recycled": 1},
)
def mn_supply():
    """
    The amount primary Mn produced is shipped to market
    """
    return mn_mining_total() + mn_recycled()


@component.add(
    name="Mn_supply_to_society",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_demand": 1},
)
def mn_supply_to_society():
    return mn_demand()


@component.add(
    name="Mn_Supply_to_SS",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"imv_ss_mn_wanted": 1},
)
def mn_supply_to_ss():
    return imv_ss_mn_wanted()


@component.add(
    name="Mn_systemic_supply",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mn_supply_to_society": 1,
        "mn_supply_to_ss": 1,
        "imv_mncrni_recycled": 1,
        "mn_content_in_mncrni": 1,
        "imv_ss_mncr_recycled": 1,
        "mn_content_in_mncr": 1,
    },
)
def mn_systemic_supply():
    """
    Total supply of Mn, directly from primary, direct recycling and indirectly thru recycling of alloys.
    """
    return (
        mn_supply_to_society()
        + mn_supply_to_ss()
        + imv_mncrni_recycled() * mn_content_in_mncrni()
        + imv_ss_mncr_recycled() * mn_content_in_mncr()
    )


@component.add(
    name="Mn_waste",
    units="Mt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_mn_waste": 1},
    other_deps={
        "_integ_mn_waste": {
            "initial": {},
            "step": {"mn_scrap_in": 1, "mn_loss": 1, "mn_recycled": 1},
        }
    },
)
def mn_waste():
    """
    Mn waste waiting for its fate
    """
    return _integ_mn_waste()


_integ_mn_waste = Integ(
    lambda: mn_scrap_in() - mn_loss() - mn_recycled(), lambda: 0, "_integ_mn_waste"
)


@component.add(
    name="Mn_water_for_recycling",
    units="MtW/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_recycled": 1, "coeffficient_mn_water_per_recycle": 1},
)
def mn_water_for_recycling():
    """
    This is the energy and water used associated with the materials consumed to extract this specific resource grade, expressed in MJ/kg product and MtW/year. The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return mn_recycled() * coeffficient_mn_water_per_recycle()


@component.add(
    name="Mn_water_use_all",
    units="MtW/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_water_for_recycling": 1, "mn_water_use_per_ore_grade": 3},
)
def mn_water_use_all():
    """
    This is the energy and water used associated with the materials consumed to extract this specific resource grade, expressed in MJ/kg product and MtW/year. The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return (
        mn_water_for_recycling()
        + float(mn_water_use_per_ore_grade().loc["RICH_GRADE"])
        + float(mn_water_use_per_ore_grade().loc["HIGH_GRADE"])
        + float(mn_water_use_per_ore_grade().loc["LOW_GRADE"])
    )


@component.add(
    name="Mn_water_use_per_ore_grade",
    units="MtW/Year",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_mining": 3, "water_use_per_mn_grade": 3},
)
def mn_water_use_per_ore_grade():
    """
    This is the energy and water used associated with the materials consumed to extract this specific resource grade, expressed in MJ/kg product and m3/ton. The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup, Ole van Allen and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = float(mn_mining().loc["RICH_GRADE"]) * float(
        water_use_per_mn_grade().loc["RICH_GRADE"]
    )
    value.loc[["HIGH_GRADE"]] = float(
        water_use_per_mn_grade().loc["HIGH_GRADE"]
    ) * float(mn_mining().loc["HIGH_GRADE"])
    value.loc[["LOW_GRADE"]] = float(water_use_per_mn_grade().loc["LOW_GRADE"]) * float(
        mn_mining().loc["LOW_GRADE"]
    )
    return value


@component.add(
    name="other_uses",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mn_supply_to_society": 1},
)
def other_uses():
    """
    Supply based on other demand
    """
    return mn_supply_to_society()


@component.add(
    name="RATE_Mn_OF_OTHER_METALS",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="Normal",
)
def rate_mn_of_other_metals():
    return 1


@component.add(
    name="SCALING_FACTOR_IN_Mn_DEMAND",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="Normal",
)
def scaling_factor_in_mn_demand():
    """
    Scaling the demand curve to get it to match observed values
    """
    return 1.4


@component.add(
    name="SCALING_FACTOR_IN_Mn_PROFIT",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def scaling_factor_in_mn_profit():
    """
    Averaging time for profit signal was set at 6 months
    """
    return 0.5


@component.add(
    name="Smooth_Mn_price",
    comp_type="Stateful",
    comp_subtype="Smooth",
    depends_on={"_smooth_smooth_mn_price": 1},
    other_deps={
        "_smooth_smooth_mn_price": {"initial": {"mn_price": 1}, "step": {"mn_price": 1}}
    },
)
def smooth_mn_price():
    return _smooth_smooth_mn_price()


_smooth_smooth_mn_price = Smooth(
    lambda: mn_price(),
    lambda: 1,
    lambda: mn_price(),
    lambda: 3,
    "_smooth_smooth_mn_price",
)


@component.add(
    name="SWITCH_ECO2MAT_Mn_DEMAND",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="Normal",
)
def switch_eco2mat_mn_demand():
    """
    Intermodule links SWITCH, it can take two values: 0: the link is broken, the intermodule variable is replaced by an exogenous parameter. 1: the link between modules is operational.
    """
    return 0


@component.add(
    name="WATER_USE_PER_Mn_GRADE",
    units="MtW/Mt",
    subscripts=["Mn_ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def water_use_per_mn_grade():
    """
    This is the energy and water used associated with the materials consumed to extract this specific resource grade, expressed in MJ/kg product and MtW/year. The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    value = xr.DataArray(
        np.nan,
        {"Mn_ORE_GRADES_I": _subscript_dict["Mn_ORE_GRADES_I"]},
        ["Mn_ORE_GRADES_I"],
    )
    value.loc[["RICH_GRADE"]] = 26
    value.loc[["HIGH_GRADE"]] = 36
    value.loc[["LOW_GRADE"]] = 46
    return value
