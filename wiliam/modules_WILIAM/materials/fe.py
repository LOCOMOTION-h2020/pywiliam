"""
Module materials.fe
Translated using PySD version 3.10.0
"""


@component.add(
    name="AMPLIFICATION_AVERAGING",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_amplification_averaging"},
)
def amplification_averaging():
    """
    This amplifies the price signal, with the result that price feedback on demand is amplified.
    """
    return _ext_constant_amplification_averaging()


_ext_constant_amplification_averaging = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "AMPLIFICATION_AVERAGING",
    {},
    _root,
    {},
    "_ext_constant_amplification_averaging",
)


@component.add(
    name="AVERAGING_TIME", units="Years", comp_type="Constant", comp_subtype="Normal"
)
def averaging_time():
    """
    Averaging time of a year before the profit is mobilised to make investment into mining. Averaging time and stock flow structure is used to prevent circular connection errors and to prevent a to fast adoptation of higher extraction. GET DIRECT CONSTANTS('model_parameters/materials/materials.xlsx', 'Iron', 'AVERAGING TIME')
    """
    return 1


@component.add(
    name="COEFFICIENT_Fe_PROSPECTING",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficient_fe_prospecting"},
)
def coefficient_fe_prospecting():
    """
    Prospecting activity set so that it approximately matches the extraction rate Market price estimation based on Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7. and with explanations in: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return _ext_constant_coefficient_fe_prospecting()


_ext_constant_coefficient_fe_prospecting = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENT_Fe_PROSPECTING",
    {},
    _root,
    {},
    "_ext_constant_coefficient_fe_prospecting",
)


@component.add(
    name="COEFFICIENTS_CHANGE_GRADE",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I", "ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_change_grade():
    """
    A separate working paper is made for the parameterization of costs limits for switching from higher ore quality to lower, based on a review of the data, most not scientifically published commercial analysises. Will be available on Alfresco High grade: a= 1,000593458 b= 0,035334751 c= 136,8185009 Low grade: a= 0,998490865 b= 0,076030171 c= 279,4686678 ultralow: A B C a=0,998489536 b=0,060825689 c=524,3348432 Harald Sverdrup, 2021: LOCOMOTION Project report: Estimating the cost of extraction and the price required for changing between mining of different ore grades in the WORLD7 model. 20 pp.
    """
    value = xr.DataArray(
        np.nan,
        {
            "S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"],
            "ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"],
        },
        ["S_CURVE_FIT_ABC_I", "ORE_GRADES_I"],
    )
    value.loc[["A_S_CURVE"], ["RICH_GRADE"]] = 0
    value.loc[["A_S_CURVE"], ["HIGH_GRADE"]] = 1.00059
    value.loc[["A_S_CURVE"], ["LOW_GRADE"]] = 0.998491
    value.loc[["A_S_CURVE"], ["ULTRALOW_GRADE"]] = 0.99849
    value.loc[["A_S_CURVE"], ["TRACE_GRADE"]] = 0
    value.loc[["A_S_CURVE"], ["OCEANS_GRADE"]] = 0
    value.loc[["B_S_CURVE"], ["RICH_GRADE"]] = 0
    value.loc[["B_S_CURVE"], ["HIGH_GRADE"]] = 0.0353348
    value.loc[["B_S_CURVE"], ["LOW_GRADE"]] = 0.0760302
    value.loc[["B_S_CURVE"], ["ULTRALOW_GRADE"]] = 0.0608257
    value.loc[["B_S_CURVE"], ["TRACE_GRADE"]] = 0
    value.loc[["B_S_CURVE"], ["OCEANS_GRADE"]] = 0
    value.loc[["C_S_CURVE"], ["RICH_GRADE"]] = 0
    value.loc[["C_S_CURVE"], ["HIGH_GRADE"]] = 136.818
    value.loc[["C_S_CURVE"], ["LOW_GRADE"]] = 279.469
    value.loc[["C_S_CURVE"], ["ULTRALOW_GRADE"]] = 524.335
    value.loc[["C_S_CURVE"], ["TRACE_GRADE"]] = 0
    value.loc[["C_S_CURVE"], ["OCEANS_GRADE"]] = 0
    return value


@component.add(
    name="COEFFICIENTS_DEMAND_BRAKES",
    units="DMNL",
    subscripts=["LINEAR_LOG_FIT_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_demand_brakes"},
)
def coefficients_demand_brakes():
    """
    Demand brakes- If the price is high the demand will be lowered, If the price is low the demand is higher. Orginates from world7 (graphical variabel) Parameters derived from curve fitting. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Demand response parameterization y = -0,0009x + 1,0695
    """
    return _ext_constant_coefficients_demand_brakes()


_ext_constant_coefficients_demand_brakes = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_DEMAND_BRAKES*",
    {"LINEAR_LOG_FIT_I": _subscript_dict["LINEAR_LOG_FIT_I"]},
    _root,
    {"LINEAR_LOG_FIT_I": _subscript_dict["LINEAR_LOG_FIT_I"]},
    "_ext_constant_coefficients_demand_brakes",
)


@component.add(
    name="COEFFICIENTS_Fe_ENERGY_USE",
    units="MJ/kg",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_fe_energy_use"},
)
def coefficients_fe_energy_use():
    """
    Our own estimates of energz use per grade extraction, based on a large literature survey. See the separate report for documentation of setting the value and where the information came from. This is the energy used associated with the materials consumed to extract this specific resource grade, expressed in MJ/kg product. The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. A
    """
    return _ext_constant_coefficients_fe_energy_use()


_ext_constant_coefficients_fe_energy_use = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_Fe_ENERGY_USE*",
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    _root,
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    "_ext_constant_coefficients_fe_energy_use",
)


@component.add(
    name="COEFFICIENTS_Fe_MINING",
    units="1/Years",
    comp_type="Constant",
    comp_subtype="Normal",
)
def coefficients_fe_mining():
    """
    Annual basic mining rate as fraction of the reserve. Paramerter calibrated to fit the historical mining output. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return 0.03


@component.add(
    name="COEFFICIENTS_Fe_MINING_TECHNOLOGY",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_fe_mining_technology"},
)
def coefficients_fe_mining_technology():
    """
    Originates from World7- Curve fit of a graphical function. Coefficients used to from equation that describes the technoligical improvement over time for the mining technology. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access A B C a=1,009547104 b=0,040362362 c=1985,393438
    """
    return _ext_constant_coefficients_fe_mining_technology()


_ext_constant_coefficients_fe_mining_technology = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_Fe_MINING_TECHNOLOGY*",
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    _root,
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    "_ext_constant_coefficients_fe_mining_technology",
)


@component.add(
    name="COEFFICIENTS_Fe_PRODUCTION_PRICE",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_fe_production_price"},
)
def coefficients_fe_production_price():
    """
    Originates from the world7 model. Development of the price for the extraction of Fe. Coefficients for the Fe price development. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _ext_constant_coefficients_fe_production_price()


_ext_constant_coefficients_fe_production_price = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_Fe_PRODUCTION_PRICE*",
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    _root,
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    "_ext_constant_coefficients_fe_production_price",
)


@component.add(
    name="COEFFICIENTS_Fe_PROFIT_RESPONSE",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_fe_profit_response"},
)
def coefficients_fe_profit_response():
    """
    Coefficients for Fe Profit response curve. Origanally a graphical variable from the world7 model-(curve fitted to get parameters). Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access a=1,4 b=9,14198E-05 c=1100
    """
    return _ext_constant_coefficients_fe_profit_response()


_ext_constant_coefficients_fe_profit_response = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_Fe_PROFIT_RESPONSE*",
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    _root,
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    "_ext_constant_coefficients_fe_profit_response",
)


@component.add(
    name="COEFFICIENTS_Fe_PROSPECTING_SHUT_DOWN",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_fe_prospecting_shut_down"},
)
def coefficients_fe_prospecting_shut_down():
    """
    Prospecting response curve parameterization for when to shut down prospecting because of little success. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access a=1,004024901 0 b=148605522 c=2038,82219
    """
    return _ext_constant_coefficients_fe_prospecting_shut_down()


_ext_constant_coefficients_fe_prospecting_shut_down = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_Fe_PROSPECTING_SHUT_DOWN*",
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    _root,
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    "_ext_constant_coefficients_fe_prospecting_shut_down",
)


@component.add(
    name="COEFFICIENTS_Fe_SOCIETY_IN",
    units="DMNL",
    subscripts=["Fe_SOCIETY_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_fe_society_in"},
)
def coefficients_fe_society_in():
    """
    Shares of different uses in Society. Long term, intermediate term and short term
    """
    return _ext_constant_coefficients_fe_society_in()


_ext_constant_coefficients_fe_society_in = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_Fe_SOCIETY_IN*",
    {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]},
    _root,
    {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]},
    "_ext_constant_coefficients_fe_society_in",
)


@component.add(
    name="COEFFICIENTS_Fe_TECHNOLOGY",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_fe_technology"},
)
def coefficients_fe_technology():
    """
    Parameterization of graphical function from world7 Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access a=1,004024901 0 b=148605522 c=2038,82219
    """
    return _ext_constant_coefficients_fe_technology()


_ext_constant_coefficients_fe_technology = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_Fe_TECHNOLOGY*",
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    _root,
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    "_ext_constant_coefficients_fe_technology",
)


@component.add(
    name="coefficients_global_steel_demand",
    units="DMNL",
    subscripts=["EQUATION_SPLIT_I", "S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_global_steel_demand"},
)
def coefficients_global_steel_demand():
    """
    Curve parameterization (graphical variable world 7 model-> curve fitting to derive paratmers) GDP dependend demand of steel, high steel demand wiht high GDP and low steel demand with lower GDP. If GDP per person <33600 then S curve with a=0,595, b=0,0003, c=9300, else y = -1E-05x + 0,9394
    """
    return _ext_constant_coefficients_global_steel_demand()


_ext_constant_coefficients_global_steel_demand = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_GLOBAL_STEEL_DEMAND",
    {
        "EQUATION_SPLIT_I": _subscript_dict["EQUATION_SPLIT_I"],
        "S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"],
    },
    _root,
    {
        "EQUATION_SPLIT_I": _subscript_dict["EQUATION_SPLIT_I"],
        "S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"],
    },
    "_ext_constant_coefficients_global_steel_demand",
)


@component.add(
    name="COEFFICIENTS_SCRAP_CURVE",
    units="DMNL",
    subscripts=["S_CURVE_FIT_ABC_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_scrap_curve"},
)
def coefficients_scrap_curve():
    """
    Scrapping is partly dependent on Fe prices. Higher scrapping rate with higher price. Lower scrapping rate with lower prices. Curve-graphical variable originates from world7 model-paramter are derived from curve fitting. a=0,6 b=0,009481761 c=300 Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access a=0,6 b=0,009481761 c=300
    """
    return _ext_constant_coefficients_scrap_curve()


_ext_constant_coefficients_scrap_curve = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_SCRAP_CURVE*",
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    _root,
    {"S_CURVE_FIT_ABC_I": _subscript_dict["S_CURVE_FIT_ABC_I"]},
    "_ext_constant_coefficients_scrap_curve",
)


@component.add(
    name="COEFFICIENTS_WATER_PER_Fe_GRADE",
    units="MtW/Mt",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_coefficients_water_per_fe_grade"},
)
def coefficients_water_per_fe_grade():
    """
    Our own estimates of water use per grade for extraction, based on a large literature survey. See the separate report for documentation of setting the value and where the information came from. Water used associated with the materials consumed to extract this specific resource grade, expressed in and m3/ton product. The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return _ext_constant_coefficients_water_per_fe_grade()


_ext_constant_coefficients_water_per_fe_grade = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "COEFFICIENTS_WATER_PER_Fe_GRADE*",
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    _root,
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    "_ext_constant_coefficients_water_per_fe_grade",
)


@component.add(
    name="CORROSION_RATE",
    units="1/Years",
    subscripts=["Fe_SOCIETY_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_corrosion_rate"},
)
def corrosion_rate():
    """
    Assumption : -This is what is lost as corrosion (rust). Different for different se type (long-, intermediate- and short term)
    """
    return _ext_constant_corrosion_rate()


_ext_constant_corrosion_rate = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "CORROSION_RATE*",
    {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]},
    _root,
    {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]},
    "_ext_constant_corrosion_rate",
)


@component.add(
    name="delayed_TS_Fe_price",
    units="M$/Mt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_delayed_ts_fe_price": 1},
    other_deps={
        "_integ_delayed_ts_fe_price": {
            "initial": {"initial_delayed_ts_fe_price": 1},
            "step": {"fe_price_in": 1, "fe_market_feedback_price": 1},
        }
    },
)
def delayed_ts_fe_price():
    """
    Price averager used to prevent circular connections, noise disturbances and also to introduce a delay.
    """
    return _integ_delayed_ts_fe_price()


_integ_delayed_ts_fe_price = Integ(
    lambda: fe_price_in() - fe_market_feedback_price(),
    lambda: initial_delayed_ts_fe_price(),
    "_integ_delayed_ts_fe_price",
)


@component.add(
    name="delayed_TS_Fe_price_economy_adjusted",
    units="DMNL",
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_delayed_ts_fe_price_economy_adjusted": 1},
    other_deps={
        "_delayfixed_delayed_ts_fe_price_economy_adjusted": {
            "initial": {"time_step": 1},
            "step": {"fe_price_economy_adjusted": 1},
        }
    },
)
def delayed_ts_fe_price_economy_adjusted():
    """
    Delayed Fe price economy adjusted. Delay is used to aviod similtanous equations.
    """
    return _delayfixed_delayed_ts_fe_price_economy_adjusted()


_delayfixed_delayed_ts_fe_price_economy_adjusted = DelayFixed(
    lambda: fe_price_economy_adjusted(),
    lambda: time_step(),
    lambda: 100,
    time_step,
    "_delayfixed_delayed_ts_fe_price_economy_adjusted",
)


@component.add(
    name="demand_brakes",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_demand_brakes": 2, "fe_market_feedback_price": 1},
)
def demand_brakes():
    """
    Demad is reduced when the price increases. This is done here y = -0,0009x + 1,0695 Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return float(
        coefficients_demand_brakes().loc["A_LINEAR_LOG_FIT"]
    ) * fe_market_feedback_price() + float(
        coefficients_demand_brakes().loc["B_LINEAR_LOG_FIT"]
    )


@component.add(name="DEMAND_Fe_BASE_YEAR", comp_type="Constant", comp_subtype="Normal")
def demand_fe_base_year():
    return 1663


@component.add(
    name="Fe_available",
    units="Mt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_market_supply": 1, "fe_market": 1},
)
def fe_available():
    """
    Fe available is the SUM of want is moving to the market in the time step and what is available on the market at that time step.
    """
    return fe_market_supply() + fe_market()


@component.add(
    name="Fe_available_DELAYED",
    comp_type="Stateful",
    comp_subtype="DelayFixed",
    depends_on={"_delayfixed_fe_available_delayed": 1},
    other_deps={
        "_delayfixed_fe_available_delayed": {
            "initial": {"time_step": 1},
            "step": {"fe_available": 1},
        }
    },
)
def fe_available_delayed():
    """
    Fe available delayed-used to avoid simultanous equation errors.
    """
    return _delayfixed_fe_available_delayed()


_delayfixed_fe_available_delayed = DelayFixed(
    lambda: fe_available(),
    lambda: time_step(),
    lambda: 3580,
    time_step,
    "_delayfixed_fe_available_delayed",
)


@component.add(
    name="Fe_base_price_2015", units="$/t", comp_type="Constant", comp_subtype="Normal"
)
def fe_base_price_2015():
    """
    Price of Cu in the starting year of the similation.Used to calculate the nominal price for the economy module. 180
    """
    return 245.118


@component.add(
    name="Fe_change_grade",
    units="DMNL",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_change_grade": 9, "fe_market_feedback_price": 3},
)
def fe_change_grade():
    """
    When the market price for Fe exceeds the cost of extraction for a resource quality, then that quality is extracted. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Harald Sverdrup, 2021: LOCOMOTION Project report: Estimating the cost of extraction and the price required for changing between mining of different ore grades in the WORLD7 model. 20 pp.
    """
    value = xr.DataArray(
        np.nan, {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]}, ["ORE_GRADES_I"]
    )
    value.loc[["RICH_GRADE"]] = 0
    value.loc[["HIGH_GRADE"]] = float(
        coefficients_change_grade().loc["A_S_CURVE", "HIGH_GRADE"]
    ) / (
        1
        + np.exp(
            -float(coefficients_change_grade().loc["B_S_CURVE", "HIGH_GRADE"])
            * (
                fe_market_feedback_price()
                - float(coefficients_change_grade().loc["C_S_CURVE", "HIGH_GRADE"])
            )
        )
    )
    value.loc[["LOW_GRADE"]] = float(
        coefficients_change_grade().loc["A_S_CURVE", "LOW_GRADE"]
    ) / (
        1
        + np.exp(
            -float(coefficients_change_grade().loc["B_S_CURVE", "LOW_GRADE"])
            * (
                fe_market_feedback_price()
                - float(coefficients_change_grade().loc["C_S_CURVE", "LOW_GRADE"])
            )
        )
    )
    value.loc[["ULTRALOW_GRADE"]] = float(
        coefficients_change_grade().loc["A_S_CURVE", "ULTRALOW_GRADE"]
    ) / (
        1
        + np.exp(
            -float(coefficients_change_grade().loc["B_S_CURVE", "ULTRALOW_GRADE"])
            * (
                fe_market_feedback_price()
                - float(coefficients_change_grade().loc["C_S_CURVE", "ULTRALOW_GRADE"])
            )
        )
    )
    value.loc[["TRACE_GRADE"]] = 0
    value.loc[["OCEANS_GRADE"]] = 0
    return value


@component.add(
    name="Fe_corrosion_lost",
    units="Mt/Year",
    subscripts=["Fe_SOCIETY_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_society": 1, "corrosion_rate": 1},
)
def fe_corrosion_lost():
    """
    Lost in corrosion from each stock in use. Irreversible losses. The lost to corrosion is significant. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return fe_society() * corrosion_rate()


@component.add(
    name="Fe_cumulative_mining",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_fe_cumulative_mining": 1},
    other_deps={
        "_integ_fe_cumulative_mining": {
            "initial": {"initial_fe_cumulative_mining": 1},
            "step": {"increase_fe_cumulative": 1},
        }
    },
)
def fe_cumulative_mining():
    """
    Total amount of Fe mined. Based on USGS DATA: https://www.usgs.gov/media/files/iron-and-steel-historical-statistics-data- series-140 Known and Hidden Fe stocks-
    """
    return _integ_fe_cumulative_mining()


_integ_fe_cumulative_mining = Integ(
    lambda: increase_fe_cumulative(),
    lambda: initial_fe_cumulative_mining(),
    "_integ_fe_cumulative_mining",
)


@component.add(
    name="Fe_demand",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "switch_eco2mat_fe_demand": 1,
        "switch_materials": 1,
        "imv_fe_mining_historical": 1,
        "implicit_price_fe": 1,
        "output_real": 1,
    },
)
def fe_demand():
    """
    Using either the historical demand or the demand coming from the economy module.
    """
    return if_then_else(
        np.logical_or(
            time() < 2015,
            np.logical_or(switch_eco2mat_fe_demand() == 0, switch_materials() == 0),
        ),
        lambda: imv_fe_mining_historical(),
        lambda: sum(
            output_real()
            .loc[:, "MINING_AND_MANUFACTURING_IRON"]
            .reset_coords(drop=True)
            .rename({"REGIONS_35_I": "REGIONS_35_I!"}),
            dim=["REGIONS_35_I!"],
        )
        / implicit_price_fe(),
    )


@component.add(
    name="Fe_DEMAND_SHARES",
    units="DMNL",
    subscripts=["Fe_DEMAND_SHARES_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_fe_demand_shares"},
)
def fe_demand_shares():
    """
    Demand for different Fe industry sectors Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return _ext_constant_fe_demand_shares()


_ext_constant_fe_demand_shares = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "Fe_DEMAND_SHARES*",
    {"Fe_DEMAND_SHARES_I": _subscript_dict["Fe_DEMAND_SHARES_I"]},
    _root,
    {"Fe_DEMAND_SHARES_I": _subscript_dict["Fe_DEMAND_SHARES_I"]},
    "_ext_constant_fe_demand_shares",
)


@component.add(
    name="Fe_demand_WORLD7",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "imv_global_population": 1,
        "imv_iron_demand_per_person": 1,
        "fe_demand_shares": 2,
        "global_steel_demand": 1,
        "unit_conversion_billion_to_million": 2,
        "imv_fe_demand_for_reinforcment_bars": 1,
    },
)
def fe_demand_world7():
    """
    World7-Fe-demand:Demand coming from the world7 model. IMV_GLOBAL_POPULATION*(Fe_DEMAND_SHARES[IRON]*Iron_demand_per_person+Fe_DEMAND_SHARES [STEEL]*Global_Steel_demand_kg_per_person)*UNIT_CONVERSION_MILLIARD_TO_MILL ION+Fe_demand_for_reinforcment_bars*UNIT_CONVERSION_MILLIARD_TO_MILLION Billion persons*(Dmnl*Mt/person+Dmnl*Kg/person)*1/billions+billion*t*1/billion = Mt + kg + ton IMV_GLOBAL_POPULATION = Billion persons Fe_DEMAND_SHARES[IRON] = Dmnl Iron_demand_per_person = t/person Fe_DEMAND_SHARES[STEEL] = Dmnl Global_Steel_demand_kg_per_person) = t/person UNIT_CONVERSION_MILLIARD_TO_MILLION = M/Billion Fe_demand_for_reinforcment_bars = Billion ton If this is true we get: Billion persons*(Dmnl*t/person+Dmnl*t/person)*M/billions+billion*t*M/billion = Mt + Mt = Mt Milliard = billion
    """
    return (
        imv_global_population()
        * (
            float(fe_demand_shares().loc["Iron"]) * imv_iron_demand_per_person()
            + float(fe_demand_shares().loc["steel"]) * global_steel_demand()
        )
        * unit_conversion_billion_to_million()
        + imv_fe_demand_for_reinforcment_bars() * unit_conversion_billion_to_million()
    )


@component.add(
    name="Fe_discovery",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"finding_fe": 4},
)
def fe_discovery():
    """
    Total Fe discovered. New Reserves.
    """
    return (
        float(finding_fe().loc["RICH_GRADE"])
        + float(finding_fe().loc["HIGH_GRADE"])
        + float(finding_fe().loc["LOW_GRADE"])
        + float(finding_fe().loc["ULTRALOW_GRADE"])
    )


@component.add(
    name="Fe_energy_all",
    units="TJ/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_energy_use_recycling": 1, "fe_energy_use_extraction": 1},
)
def fe_energy_all():
    """
    Total energy used to extract,produce and refine Fe from mining and recycling.
    """
    return fe_energy_use_recycling() + fe_energy_use_extraction()


@component.add(
    name="Fe_ENERGY_RECYCLING",
    units="MJ/kg",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_fe_energy_recycling"},
)
def fe_energy_recycling():
    """
    Our own estimates of energy use on Fe recycling, based on a large literature survey. See the separate report for documentation of setting the value and where the information came from. This is the energy used associated for recycling of Fe expressed in MJ/kg product The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return _ext_constant_fe_energy_recycling()


_ext_constant_fe_energy_recycling = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "Fe_ENERGY_RECYCLING",
    {},
    _root,
    {},
    "_ext_constant_fe_energy_recycling",
)


@component.add(
    name="Fe_energy_use",
    units="(MJ/kg)*(Mt/Years)",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_fe_energy_use": 5, "fe_mining": 5},
)
def fe_energy_use():
    """
    total Fe energy use for extraction and refining from mining.
    """
    value = xr.DataArray(
        np.nan, {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]}, ["ORE_GRADES_I"]
    )
    value.loc[["RICH_GRADE"]] = float(
        coefficients_fe_energy_use().loc["RICH_GRADE"]
    ) * float(fe_mining().loc["RICH_GRADE"])
    value.loc[["HIGH_GRADE"]] = float(fe_mining().loc["HIGH_GRADE"]) * float(
        coefficients_fe_energy_use().loc["HIGH_GRADE"]
    )
    value.loc[["LOW_GRADE"]] = float(fe_mining().loc["LOW_GRADE"]) * float(
        coefficients_fe_energy_use().loc["LOW_GRADE"]
    )
    value.loc[["ULTRALOW_GRADE"]] = float(fe_mining().loc["ULTRALOW_GRADE"]) * float(
        coefficients_fe_energy_use().loc["ULTRALOW_GRADE"]
    )
    value.loc[["TRACE_GRADE"]] = float(fe_mining().loc["TRACE_GRADE"]) * float(
        coefficients_fe_energy_use().loc["TRACE_GRADE"]
    )
    value.loc[["OCEANS_GRADE"]] = 0
    return value


@component.add(
    name="Fe_energy_use_extraction",
    units="TJ/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_energy_use": 5,
        "unit_conversion_kg_mt": 1,
        "unit_conversion_tj_mj": 1,
    },
)
def fe_energy_use_extraction():
    """
    SUM of energy used associated with the materials consumed to extract and produce from this specific resource grade, expressed in TJ/Years product The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages. Gutowski, T.G., Sahni, S., Allwood, M., Ashby, M.F., Worrell, E., 2016. The energy required to produce materials: constraints on energy-intensity improvements, parameters of demand. Philosophical Transactions of the Royal Society A 371: 20120003. http://dx.doi.org/10.1098/rsta.2012.0003
    """
    return (
        (
            float(fe_energy_use().loc["HIGH_GRADE"])
            + float(fe_energy_use().loc["LOW_GRADE"])
            + float(fe_energy_use().loc["ULTRALOW_GRADE"])
            + float(fe_energy_use().loc["TRACE_GRADE"])
            + float(fe_energy_use().loc["RICH_GRADE"])
        )
        * unit_conversion_kg_mt()
        * unit_conversion_tj_mj()
    )


@component.add(
    name="Fe_energy_use_recycling",
    units="TJ/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_energy_recycling": 1,
        "fe_sent_to_recycling": 1,
        "unit_conversion_kg_mt": 1,
        "unit_conversion_tj_mj": 1,
    },
)
def fe_energy_use_recycling():
    """
    The energy used on recycling This is the energy used associated with the recycling process expressed in TJ/Year. The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return (
        fe_energy_recycling()
        * fe_sent_to_recycling()
        * unit_conversion_kg_mt()
        * unit_conversion_tj_mj()
    )


@component.add(
    name="Fe_EOL_RECYCLING_RATE_SP",
    units="1/Year",
    comp_type="Constant",
    comp_subtype="Normal",
)
def fe_eol_recycling_rate_sp():
    """
    Share of scrap that is moving out from the Scrap stock per year.
    """
    return 0.3


@component.add(
    name="Fe_extraction_cost",
    units="M$/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_mining": 4, "fe_grade_cost": 4},
)
def fe_extraction_cost():
    """
    Total extraction costs of Fe mining.
    """
    return (
        float(fe_mining().loc["RICH_GRADE"]) * float(fe_grade_cost().loc["RICH_GRADE"])
        + float(fe_mining().loc["HIGH_GRADE"])
        * float(fe_grade_cost().loc["HIGH_GRADE"])
        + float(fe_mining().loc["LOW_GRADE"]) * float(fe_grade_cost().loc["LOW_GRADE"])
        + float(fe_mining().loc["ULTRALOW_GRADE"])
        * float(fe_grade_cost().loc["ULTRALOW_GRADE"])
    )


@component.add(
    name="Fe_final_prospecting",
    units="1/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_prospecting": 1, "fe_prospecting_shut_down": 1},
)
def fe_final_prospecting():
    """
    Fe prospecting decision. Rate of prospecting.
    """
    return fe_prospecting() * fe_prospecting_shut_down()


@component.add(
    name="Fe_GRADE_COST",
    units="M$/Mt",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_fe_grade_cost"},
)
def fe_grade_cost():
    """
    Cost of extraction by grade. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _ext_constant_fe_grade_cost()


_ext_constant_fe_grade_cost = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "Fe_GRADE_COST*",
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    _root,
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    "_ext_constant_fe_grade_cost",
)


@component.add(
    name="Fe_hidden_resources",
    units="Mt",
    subscripts=["ORE_GRADES_I"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_fe_hidden_resources": 1},
    other_deps={
        "_integ_fe_hidden_resources": {
            "initial": {"initial_fe_hidden_resources": 1},
            "step": {"finding_fe": 1},
        }
    },
)
def fe_hidden_resources():
    """
    Hidden resources Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _integ_fe_hidden_resources()


_integ_fe_hidden_resources = Integ(
    lambda: -finding_fe(),
    lambda: initial_fe_hidden_resources(),
    "_integ_fe_hidden_resources",
)


@component.add(
    name="Fe_Historical_Data",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def fe_historical_data():
    return np.interp(
        time(),
        [
            1950.18,
            1950.98,
            1951.77,
            1952.57,
            1953.36,
            1954.12,
            1954.5,
            1954.95,
            1955.67,
            1956.47,
            1957.23,
            1957.99,
            1958.6,
            1959.04,
            1959.47,
            1960.09,
            1960.88,
            1961.68,
            1962.4,
            1963.01,
            1963.41,
            1963.74,
            1964.35,
            1965.15,
            1965.94,
            1966.74,
            1967.42,
            1967.99,
            1968.34,
            1968.72,
            1969.27,
            1969.99,
            1970.79,
            1971.47,
            1971.81,
            1972.12,
            1972.41,
            1972.7,
            1973.32,
            1974.0,
            1974.33,
            1974.62,
            1975.07,
            1975.74,
            1976.42,
            1977.11,
            1977.62,
            1978.09,
            1978.74,
            1979.43,
            1980.11,
            1980.87,
            1981.27,
            1981.53,
            1981.97,
            1982.68,
            1983.27,
            1983.62,
            1984.23,
            1985.03,
            1985.82,
            1986.58,
            1987.16,
            1987.6,
            1988.21,
            1989.01,
            1989.8,
            1990.45,
            1991.07,
            1991.82,
            1992.62,
            1993.42,
            1994.17,
            1994.93,
            1995.73,
            1996.36,
            1996.61,
            1997.17,
            1997.97,
            1998.77,
            1999.3,
            1999.63,
            2000.07,
            2000.86,
            2001.51,
            2001.87,
            2002.24,
            2002.56,
            2002.85,
            2003.13,
            2003.36,
            2003.57,
            2003.75,
            2004.0,
            2004.22,
            2004.44,
            2004.66,
            2004.91,
            2005.13,
            2005.34,
            2005.56,
            2005.78,
            2006.04,
            2006.26,
            2006.46,
            2006.68,
            2006.9,
            2007.51,
            2008.08,
            2008.26,
            2008.4,
            2008.53,
            2008.92,
            2008.98,
            2009.36,
            2009.43,
            2009.59,
            2009.61,
            2009.78,
            2009.9,
            2010.09,
            2010.24,
            2010.36,
            2010.58,
            2010.84,
            2011.2,
            2011.9,
            2012.29,
            2012.5,
            2012.75,
            2012.97,
            2013.44,
            2014.13,
            2014.53,
            2014.95,
            2015.78,
            2016.28,
            2016.53,
            2016.74,
            2016.91,
            2017.13,
            2017.38,
            2017.6,
            2017.82,
            2018.13,
            2018.4,
            2019.01,
            2019.8,
            2020.39,
            2020.74,
            2021.0,
        ],
        [
            195.714,
            209.495,
            211.087,
            226.951,
            227.926,
            229.843,
            247.481,
            268.964,
            280.459,
            289.38,
            284.215,
            274.205,
            292.313,
            310.967,
            329.763,
            346.572,
            349.09,
            350.527,
            363.651,
            383.808,
            402.294,
            423.385,
            443.318,
            459.028,
            473.812,
            488.134,
            505.535,
            524.503,
            540.614,
            560.402,
            580.278,
            591.705,
            583.268,
            598.21,
            618.188,
            638.602,
            659.808,
            681.013,
            702.68,
            698.046,
            677.137,
            656.335,
            645.945,
            665.948,
            673.562,
            679.902,
            700.675,
            720.42,
            740.907,
            733.814,
            715.091,
            705.906,
            684.21,
            665.016,
            646.209,
            652.973,
            672.64,
            691.764,
            712.63,
            716.768,
            713.191,
            723.185,
            742.485,
            762.413,
            781.768,
            784.054,
            772.608,
            751.865,
            731.004,
            719.304,
            722.516,
            723.954,
            728.347,
            748.124,
            748.945,
            761.197,
            780.197,
            794.411,
            779.184,
            783.013,
            800.893,
            823.228,
            846.306,
            851.215,
            869.383,
            891.18,
            913.316,
            934.117,
            954.474,
            976.665,
            997.771,
            1017.99,
            1036.82,
            1056.77,
            1076.66,
            1094.9,
            1114.69,
            1135.48,
            1156.54,
            1178.6,
            1200.8,
            1223.28,
            1246.71,
            1270.31,
            1293.58,
            1318.78,
            1339.86,
            1352.9,
            1338.47,
            1317.87,
            1297.02,
            1276.13,
            1257.61,
            1242.12,
            1266.86,
            1292.66,
            1327.9,
            1351.45,
            1378.34,
            1408.77,
            1436.13,
            1457.7,
            1476.29,
            1499.03,
            1521.5,
            1543.49,
            1558.11,
            1580.6,
            1602.37,
            1624.67,
            1644.43,
            1665.89,
            1668.51,
            1646.75,
            1626.47,
            1624.39,
            1645.52,
            1669.37,
            1694.54,
            1719.19,
            1741.24,
            1764.29,
            1786.2,
            1806.34,
            1826.97,
            1846.21,
            1871.0,
            1877.46,
            1894.45,
            1921.73,
            1943.08,
        ],
    )


@component.add(
    name="Fe_income",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_total_mining": 1, "fe_price_economy": 1},
)
def fe_income():
    """
    Income from extraction, estimated as supplied times the market price.
    """
    return fe_total_mining() * fe_price_economy()


@component.add(
    name="Fe_known_reserves",
    units="Mt",
    subscripts=["ORE_GRADES_I"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_fe_known_reserves": 1},
    other_deps={
        "_integ_fe_known_reserves": {
            "initial": {"initial_fe_known_reserves": 1},
            "step": {"finding_fe": 1, "fe_mining": 1},
        }
    },
)
def fe_known_reserves():
    """
    Known extracteable resources Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _integ_fe_known_reserves()


_integ_fe_known_reserves = Integ(
    lambda: finding_fe() - fe_mining(),
    lambda: initial_fe_known_reserves(),
    "_integ_fe_known_reserves",
)


@component.add(
    name="Fe_market",
    units="Mt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_fe_market": 1},
    other_deps={
        "_integ_fe_market": {
            "initial": {"initial_fe_trade_market": 1},
            "step": {"fe_market_supply": 1, "fe_market_sales": 1},
        }
    },
)
def fe_market():
    """
    Available Fe for transactions. Stock available in the market Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return _integ_fe_market()


_integ_fe_market = Integ(
    lambda: fe_market_supply() - fe_market_sales(),
    lambda: initial_fe_trade_market(),
    "_integ_fe_market",
)


@component.add(
    name="Fe_market_feedback_price",
    units="M$/(Mt*Years)",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"delayed_ts_fe_price": 1, "price_averaging_time": 1},
)
def fe_market_feedback_price():
    """
    Take out averaged signal, averaged over 1 year.
    """
    return delayed_ts_fe_price() / price_averaging_time()


@component.add(
    name="Fe_market_price_index",
    units="M$/Mt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_market": 6,
        "split_equation_fe": 3,
        "coefficients_fe_price_index": 6,
    },
)
def fe_market_price_index():
    """
    if fe trade market < 250 then (y = -2,5829x + 1109,5) else if fe trade market <1750 and > 250 then (y = 727,7*exp(-0,001*x)) else if fe trade market is > 1750 (y = 231,39e-4E-04x) Market price estimation based on. Curve devided into to equation to get a better fit with the original graphical variable from world 7. Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7. and with explanations in: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return if_then_else(
        fe_market() < float(split_equation_fe().loc["EQUATION_ONE"]),
        lambda: float(
            coefficients_fe_price_index().loc["A_LINEAR_LOG_FIT", "EQUATION_ONE"]
        )
        * fe_market()
        + float(coefficients_fe_price_index().loc["B_LINEAR_LOG_FIT", "EQUATION_ONE"]),
        lambda: if_then_else(
            np.logical_and(
                float(split_equation_fe().loc["EQUATION_ONE"]) < fe_market(),
                fe_market() < float(split_equation_fe().loc["EQUATION_TWO"]),
            ),
            lambda: float(
                coefficients_fe_price_index().loc["A_LINEAR_LOG_FIT", "EQUATION_TWO"]
            )
            * np.exp(
                float(
                    coefficients_fe_price_index().loc[
                        "B_LINEAR_LOG_FIT", "EQUATION_TWO"
                    ]
                )
                * fe_market()
            ),
            lambda: float(
                coefficients_fe_price_index().loc["A_LINEAR_LOG_FIT", "EQUATION_THREE"]
            )
            * np.exp(
                float(
                    coefficients_fe_price_index().loc[
                        "B_LINEAR_LOG_FIT", "EQUATION_THREE"
                    ]
                )
                * fe_market()
            ),
        ),
    )


@component.add(
    name="Fe_market_sales",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_market": 1, "fe_demand": 2},
)
def fe_market_sales():
    """
    Everything coming out of the market, driven by demand, limited by what is available. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return if_then_else(
        fe_market() <= 0.1, lambda: np.maximum(fe_demand(), 0), lambda: fe_demand()
    )


@component.add(
    name="Fe_market_supply",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_sent_to_recycling": 1,
        "smelting_loss_yield": 1,
        "fe_total_mining": 1,
        "imv_stainless_steel_lost_to_iron_scrap": 1,
    },
)
def fe_market_supply():
    """
    Everything that goes into the market, primary produced and recycled Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return (
        fe_sent_to_recycling()
        + fe_total_mining() * (1 - smelting_loss_yield())
        + imv_stainless_steel_lost_to_iron_scrap()
    )


@component.add(
    name="Fe_mining",
    units="Mt/Year",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "mining_rate_drive": 4,
        "fe_known_reserves": 4,
        "fe_change_grade": 3,
        "fe_technology": 2,
    },
)
def fe_mining():
    """
    Extraction of iron from all reasource qualities. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    value = xr.DataArray(
        np.nan, {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]}, ["ORE_GRADES_I"]
    )
    value.loc[["RICH_GRADE"]] = mining_rate_drive() * float(
        fe_known_reserves().loc["RICH_GRADE"]
    )
    value.loc[["HIGH_GRADE"]] = (
        float(fe_change_grade().loc["HIGH_GRADE"])
        * mining_rate_drive()
        * float(fe_known_reserves().loc["HIGH_GRADE"])
    )
    value.loc[["LOW_GRADE"]] = (
        float(fe_change_grade().loc["LOW_GRADE"])
        * mining_rate_drive()
        * fe_technology()
        * float(fe_known_reserves().loc["LOW_GRADE"])
    )
    value.loc[["ULTRALOW_GRADE"]] = (
        fe_technology()
        * float(fe_change_grade().loc["ULTRALOW_GRADE"])
        * mining_rate_drive()
        * float(fe_known_reserves().loc["ULTRALOW_GRADE"])
    )
    value.loc[["TRACE_GRADE"]] = 0
    value.loc[["OCEANS_GRADE"]] = 0
    return value


@component.add(
    name="Fe_mining_technology",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_fe_mining_technology": 3, "time": 1},
)
def fe_mining_technology():
    """
    Technology learning curve. Describes the technology improvement overtime. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return float(coefficients_fe_mining_technology().loc["A_S_CURVE"]) / (
        1
        + np.exp(
            -float(coefficients_fe_mining_technology().loc["B_S_CURVE"])
            * (time() - float(coefficients_fe_mining_technology().loc["C_S_CURVE"]))
        )
    )


@component.add(
    name="Fe_modified_demand_WORLD7",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"demand_brakes": 1, "fe_demand_world7": 1},
)
def fe_modified_demand_world7():
    """
    The primary demand is modified with the price response function here
    """
    return demand_brakes() * fe_demand_world7()


@component.add(
    name="Fe_ORE_PRICE_HISTORICAL",
    units="$/ton",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def fe_ore_price_historical():
    """
    Fe ore price historical. USGS Mineral Commodities Summaries DS-140 series, downloaded from their website. Annual updates available Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return np.interp(
        time(),
        [
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
        ],
        [
            47.45,
            33.53,
            34.07,
            34.36,
            25.57,
            32.18,
            38.36,
            43.97,
            41.27,
            39.09,
            43.33,
            37.02,
            31.86,
            35.9,
            29.67,
            29.52,
            34.93,
            39.87,
            36.45,
            33.02,
            33.41,
            30.64,
            30.29,
            32.86,
            27.71,
            23.33,
            23.03,
            23.3,
            23.43,
            24.86,
            27.84,
            29.14,
            28.81,
            32.78,
            31.46,
            29.52,
            30.12,
            29.09,
            33.37,
            34.0,
            29.19,
            26.67,
            23.5,
            25.47,
            25.0,
            25.18,
            25.58,
            25.11,
            26.42,
            30.82,
            33.72,
            34.34,
            37.36,
            41.22,
            41.88,
            43.35,
            44.73,
            48.31,
            48.64,
            48.55,
            48.23,
            49.13,
            47.53,
            49.04,
            50.11,
            49.38,
            47.69,
            48.39,
            47.93,
            45.96,
            45.38,
            46.57,
            47.66,
            47.03,
            53.93,
            64.88,
            69.57,
            70.75,
            72.15,
            73.35,
            72.4,
            72.38,
            70.47,
            71.37,
            69.23,
            63.68,
            52.94,
            45.74,
            41.4,
            43.78,
            38.08,
            35.32,
            36.21,
            27.65,
            26.84,
            30.27,
            29.63,
            30.56,
            31.14,
            25.9,
            24.21,
            21.98,
            23.61,
            23.79,
            32.72,
            37.15,
            43.59,
            46.89,
            53.32,
            70.49,
            73.83,
            72.07,
            69.67,
            73.41,
        ],
    )


@component.add(
    name="Fe_price_economy",
    units="$/t",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_demand": 2, "fe_available_delayed": 2},
)
def fe_price_economy():
    """
    Function that is used to describe the relation between demand, supply and price. If the supply is low and the demand is high the price will be high. If demand is low and the supply is low the price will be low. The if than else is used for the case that the demand exceeds the supply- price artificcialy increased to a very high max. 6.34626 +0.454773
    """
    return if_then_else(
        fe_demand() > fe_available_delayed(),
        lambda: 100000,
        lambda: np.exp(
            5.23846 + 0.527678 * np.log(1 / (1 - fe_demand() / fe_available_delayed()))
        ),
    )


@component.add(
    name="Fe_price_economy_adjusted",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"time": 1, "fe_price_index_economy": 1},
)
def fe_price_economy_adjusted():
    """
    Fe price for the first years is set to 100 as a starting value-nominal price in the economy module. After 2015- Cu price index economy.
    """
    return if_then_else(time() <= 2015, lambda: 100, lambda: fe_price_index_economy())


@component.add(
    name="Fe_PRICE_HISTORICAL",
    units="$/t",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def fe_price_historical():
    """
    Iron and Steel Scrap Price in dollars per ton. Iron and Steel Scrap - Historical Statistics (Data Series 140) USGS https://www.usgs.gov/media/files/iron-and-steel-scrap-historical-statistics-data-seri es-140 ds140-iron-steel-scrap-2019.xlsx
    """
    return np.interp(
        time(),
        [
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
        ],
        [
            192.0,
            219.0,
            250.0,
            351.0,
            204.0,
            326.0,
            411.0,
            367.0,
            365.0,
            351.0,
            213.0,
            196.0,
            266.0,
            323.0,
            249.22,
        ],
    )


@component.add(
    name="Fe_Price_in",
    units="M$/Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_price_economy": 1, "amplification_averaging": 1},
)
def fe_price_in():
    """
    Price signal averager, used to filter noise from short term changes in price. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return fe_price_economy() * amplification_averaging()


@component.add(
    name="Fe_price_index_economy",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "switch_mat2eco_fe_price": 1,
        "price_transformation": 1,
        "fe_base_price_2015": 1,
        "estimated_price_with_tax_metals": 1,
    },
)
def fe_price_index_economy():
    """
    Calculation of the Fe price index economy based on the price of Fe price economy test divided by the base price for the starting year which should be in the first year = 1 and then multiplied with hundered. This is the nominal price signal used in the economy module. With changes of the Fe price economy test variable which will be depending on the supply and demand situation changes in the nominal price will occour. (Cu price economy test/Cu base price 2006)*PERCENT PRICE TRANSFORMATION Fe price for the first years is set to 100 as a starting value-nominal price in the economy module. After 2015- Cu price index economy.
    """
    return if_then_else(
        switch_mat2eco_fe_price() == 0,
        lambda: 100,
        lambda: (
            float(estimated_price_with_tax_metals().loc["Fe_W"]) / fe_base_price_2015()
        )
        * price_transformation(),
    )


@component.add(
    name="Fe_price_$_per_ton",
    units="M$/Mt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_market_price_index": 1},
)
def fe_price_per_ton():
    """
    Market price estimation based on Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7. and with explanations in: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return fe_market_price_index()


@component.add(
    name="Fe_production_price",
    units="M$/Mt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "coefficients_fe_production_price": 3,
        "fe_extraction_cost": 1,
        "imv_energy_price": 1,
    },
)
def fe_production_price():
    """
    Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return float(coefficients_fe_production_price().loc["A_S_CURVE"]) * (
        fe_extraction_cost()
        * float(coefficients_fe_production_price().loc["B_S_CURVE"])
        + float(coefficients_fe_production_price().loc["C_S_CURVE"])
        * imv_energy_price()
    )


@component.add(
    name="Fe_profit",
    units="M$/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_income": 1, "fe_extraction_cost": 1},
)
def fe_profit():
    """
    Profit, defined as income minus cost for mining and production.
    """
    return fe_income() - fe_extraction_cost()


@component.add(
    name="Fe_profit_averager",
    units="M$",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_fe_profit_averager": 1},
    other_deps={
        "_integ_fe_profit_averager": {
            "initial": {"initial_fe_profit_avereger": 1},
            "step": {"fe_profit_signal_in": 1, "mining_signal_out": 1},
        }
    },
)
def fe_profit_averager():
    """
    Profit averager, used to prevent circular connection error and to introduce a delay signal.
    """
    return _integ_fe_profit_averager()


_integ_fe_profit_averager = Integ(
    lambda: fe_profit_signal_in() - mining_signal_out(),
    lambda: initial_fe_profit_avereger(),
    "_integ_fe_profit_averager",
)


@component.add(
    name="Fe_profit_responce",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"mining_signal_out": 2, "coefficients_fe_profit_response": 3},
)
def fe_profit_responce():
    """
    Response function stopping extraction when the mining runs a negative profit.
    """
    return if_then_else(
        mining_signal_out() < 0,
        lambda: 0,
        lambda: float(coefficients_fe_profit_response().loc["A_S_CURVE"])
        / (
            1
            + np.exp(
                -float(coefficients_fe_profit_response().loc["B_S_CURVE"])
                * (
                    mining_signal_out()
                    - float(coefficients_fe_profit_response().loc["C_S_CURVE"])
                )
            )
        ),
    )


@component.add(
    name="Fe_profit_signal_in",
    units="M$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_profit": 1},
)
def fe_profit_signal_in():
    """
    Fe profit- coming from mining and producing Fe. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return np.maximum(0, fe_profit())


@component.add(
    name="Fe_prospecting",
    units="1/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "coefficient_fe_prospecting": 1,
        "prospecting_activity": 1,
        "fe_mining_technology": 1,
        "fe_prospecting_drive": 1,
        "fe_prospecting_decision_out": 1,
    },
)
def fe_prospecting():
    """
    Fe prospecting, rate in which prospecting activity is carried out based on the development of mining technology, the decision for prospecting, the propecting drive, the proecting activity and ...
    """
    return (
        coefficient_fe_prospecting()
        * prospecting_activity()
        * fe_mining_technology()
        * fe_prospecting_drive()
        * fe_prospecting_decision_out()
    )


@component.add(
    name="Fe_prospecting_decision",
    units="DMNL",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_fe_prospecting_decision": 1},
    other_deps={
        "_integ_fe_prospecting_decision": {
            "initial": {"initial_fe_prospecting_decision": 1},
            "step": {"fe_prospecting_decision_in": 1, "fe_prospecting_decision_out": 1},
        }
    },
)
def fe_prospecting_decision():
    """
    Signal averager
    """
    return _integ_fe_prospecting_decision()


_integ_fe_prospecting_decision = Integ(
    lambda: fe_prospecting_decision_in() - fe_prospecting_decision_out(),
    lambda: initial_fe_prospecting_decision(),
    "_integ_fe_prospecting_decision",
)


@component.add(
    name="Fe_prospecting_decision_in",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_prospecting_shut_down": 1},
)
def fe_prospecting_decision_in():
    """
    Sending prospecting signal in for averaging to avoid fluctuations, noise in the signal and to delay the effect of need for prospecting to the event of actually prospecting.
    """
    return np.maximum(0, fe_prospecting_shut_down())


@component.add(
    name="Fe_prospecting_decision_out",
    units="1/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_prospecting_decision": 1,
        "prospecting_decision_share_out": 1,
        "prospecting_average_time": 1,
    },
)
def fe_prospecting_decision_out():
    """
    Prospecting signal averaged over a year. Used to prevent circular connection error and to delay the signal of need for prospecting to decision for prospecting. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return (
        fe_prospecting_decision()
        * prospecting_decision_share_out()
        / prospecting_average_time()
    )


@component.add(
    name="Fe_prospecting_drive",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_sum_of_known_rich_and_high_grade": 3,
        "coefficients_prospecting_drive": 4,
    },
)
def fe_prospecting_drive():
    """
    if FE sum < 6000 then (y = -0,0003*FE sum + 2,753) else (y = 2,877*FE sum-0,109) Prospecting drive equation. With high amounts of know rich and high grade lower drive for prospecting. With lower amounst of High and Rich grade higher prospecting drive.
    """
    return if_then_else(
        fe_sum_of_known_rich_and_high_grade() < 6000,
        lambda: float(
            coefficients_prospecting_drive().loc["A_LINEAR_LOG_FIT", "EQUATION_ONE"]
        )
        * fe_sum_of_known_rich_and_high_grade()
        + float(
            coefficients_prospecting_drive().loc["B_LINEAR_LOG_FIT", "EQUATION_ONE"]
        ),
        lambda: float(
            coefficients_prospecting_drive().loc["A_LINEAR_LOG_FIT", "EQUATION_TWO"]
        )
        * fe_sum_of_known_rich_and_high_grade()
        ** float(
            coefficients_prospecting_drive().loc["B_LINEAR_LOG_FIT", "EQUATION_TWO"]
        ),
    )


@component.add(
    name="Fe_prospecting_shut_down",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_fe_prospecting_shut_down": 3, "fe_discovery": 1},
)
def fe_prospecting_shut_down():
    """
    Prospecting and finding hidden resources depend on effort and how much is left to find. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return float(coefficients_fe_prospecting_shut_down().loc["A_S_CURVE"]) / (
        1
        + np.exp(
            -float(coefficients_fe_prospecting_shut_down().loc["B_S_CURVE"])
            * (
                fe_discovery()
                - float(coefficients_fe_prospecting_shut_down().loc["C_S_CURVE"])
            )
        )
    )


@component.add(
    name="Fe_RECYCLING_RATE_SCALING", comp_type="Constant", comp_subtype="Normal"
)
def fe_recycling_rate_scaling():
    return 1.5


@component.add(
    name="Fe_RESIDENCE_TIME",
    units="Years",
    subscripts=["Fe_SOCIETY_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_fe_residence_time"},
)
def fe_residence_time():
    """
    Lifetime of different stocks in use in society, set at 1 year, 7 years, 70 years Source: Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return _ext_constant_fe_residence_time()


_ext_constant_fe_residence_time = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "Fe_RESIDENCE_TIME*",
    {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]},
    _root,
    {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]},
    "_ext_constant_fe_residence_time",
)


@component.add(
    name="Fe_scrap",
    units="Mt",
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={"_integ_fe_scrap": 1},
    other_deps={
        "_integ_fe_scrap": {
            "initial": {"initial_fe_scrap": 1},
            "step": {
                "fe_scrapping": 1,
                "fe_scrap_losses_aux": 1,
                "fe_sent_to_recycling": 1,
            },
        }
    },
)
def fe_scrap():
    """
    Scrap sitting somewhere in society, being available for recycling Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return _integ_fe_scrap()


_integ_fe_scrap = Integ(
    lambda: fe_scrapping() - fe_scrap_losses_aux() - fe_sent_to_recycling(),
    lambda: initial_fe_scrap(),
    "_integ_fe_scrap",
)


@component.add(
    name="Fe_scrap_curve",
    units="1/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "coefficients_scrap_curve": 3,
        "fe_price_economy": 1,
        "fe_recycling_rate_scaling": 1,
    },
)
def fe_scrap_curve():
    """
    Scrapping is partly dependent on Fe prices. Higher scrapping rate with higher price. Lower scrapping rate with lower prices. Curve-graphical variable originates from world7 model-paramter are derived from curve fitting. a=0,6 b=0,009481761 c=300 Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return (
        float(coefficients_scrap_curve().loc["A_S_CURVE"])
        / (
            1
            + np.exp(
                -float(coefficients_scrap_curve().loc["B_S_CURVE"])
                * (
                    fe_price_economy()
                    - float(coefficients_scrap_curve().loc["C_S_CURVE"])
                )
            )
        )
        * fe_recycling_rate_scaling()
    )


@component.add(
    name="Fe_SCRAP_LOSS_RATE",
    units="1/Years",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_fe_scrap_loss_rate"},
)
def fe_scrap_loss_rate():
    """
    Scrap is both lost physically and to corrosion, and scrap is very exposed to that. This is the aproximate assumed rate of corrosion and loss. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _ext_constant_fe_scrap_loss_rate()


_ext_constant_fe_scrap_loss_rate = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "Fe_SCRAP_LOSS_RATE",
    {},
    _root,
    {},
    "_ext_constant_fe_scrap_loss_rate",
)


@component.add(
    name="Fe_scrap_losses_aux",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_scrap": 1, "fe_scrap_loss_rate": 1},
)
def fe_scrap_losses_aux():
    """
    Lost from the scrap as being rusted away or physically lost out of sight.
    """
    return fe_scrap() * fe_scrap_loss_rate()


@component.add(
    name="Fe_scrapping",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_society_out": 3,
        "imv_mncrni_recycled_1": 1,
        "imv_ss_mncrni_fraction_recycled_to_stainless_steel": 1,
    },
)
def fe_scrapping():
    """
    Scrapped metal that arrives to the stock of scrap from Fe stockd in use in society and as material leakage of stainless steel into the scrap iron. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return (
        float(fe_society_out().loc["LONG_TERM"])
        + float(fe_society_out().loc["INTERMEDIATE_TERM"])
        + float(fe_society_out().loc["SHORT_TERM"])
        + imv_mncrni_recycled_1()
        * (1 - imv_ss_mncrni_fraction_recycled_to_stainless_steel())
    )


@component.add(
    name="Fe_sent_to_recycling",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "switch_fe_recycling_rate": 1,
        "fe_eol_recycling_rate_sp": 1,
        "fe_scrap_curve": 1,
        "fe_scrap": 1,
    },
)
def fe_sent_to_recycling():
    """
    Amount Fe sent to recycling. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return if_then_else(
        switch_fe_recycling_rate() == 1,
        lambda: fe_eol_recycling_rate_sp(),
        lambda: fe_scrap() * fe_scrap_curve(),
    )


@component.add(
    name="Fe_share_of_secondary_material",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "imv_stainless_steel_lost_to_iron_scrap": 1,
        "fe_sent_to_recycling": 1,
        "fe_market_supply": 1,
    },
)
def fe_share_of_secondary_material():
    """
    Share of secondary material used to produce new copper to be sold on the market.
    """
    return zidz(
        imv_stainless_steel_lost_to_iron_scrap() + fe_sent_to_recycling(),
        fe_market_supply(),
    )


@component.add(
    name="Fe_society",
    units="Mt",
    subscripts=["Fe_SOCIETY_I"],
    comp_type="Stateful",
    comp_subtype="Integ",
    depends_on={
        "_integ_fe_society": 1,
        "_integ_fe_society_1": 1,
        "_integ_fe_society_2": 1,
    },
    other_deps={
        "_integ_fe_society": {
            "initial": {"initial_fe_short": 1},
            "step": {"fe_society_in": 1, "fe_society_out": 1, "fe_corrosion_lost": 1},
        },
        "_integ_fe_society_1": {
            "initial": {"initial_fe_society_intermediate_term": 1},
            "step": {"fe_society_in": 1, "fe_society_out": 1, "fe_corrosion_lost": 1},
        },
        "_integ_fe_society_2": {
            "initial": {"initial_fe_society_long_term": 1},
            "step": {"fe_society_in": 1, "fe_society_out": 1, "fe_corrosion_lost": 1},
        },
    },
)
def fe_society():
    """
    Fe in use in society in different kinds of uses with different lifetimes. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    value = xr.DataArray(
        np.nan, {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]}, ["Fe_SOCIETY_I"]
    )
    value.loc[["SHORT_TERM"]] = _integ_fe_society().values
    value.loc[["INTERMEDIATE_TERM"]] = _integ_fe_society_1().values
    value.loc[["LONG_TERM"]] = _integ_fe_society_2().values
    return value


_integ_fe_society = Integ(
    lambda: xr.DataArray(
        float(fe_society_in().loc["SHORT_TERM"])
        - float(fe_society_out().loc["SHORT_TERM"])
        - float(fe_corrosion_lost().loc["SHORT_TERM"]),
        {"Fe_SOCIETY_I": ["SHORT_TERM"]},
        ["Fe_SOCIETY_I"],
    ),
    lambda: xr.DataArray(
        initial_fe_short(), {"Fe_SOCIETY_I": ["SHORT_TERM"]}, ["Fe_SOCIETY_I"]
    ),
    "_integ_fe_society",
)

_integ_fe_society_1 = Integ(
    lambda: xr.DataArray(
        float(fe_society_in().loc["INTERMEDIATE_TERM"])
        - float(fe_society_out().loc["INTERMEDIATE_TERM"])
        - float(fe_corrosion_lost().loc["INTERMEDIATE_TERM"]),
        {"Fe_SOCIETY_I": ["INTERMEDIATE_TERM"]},
        ["Fe_SOCIETY_I"],
    ),
    lambda: xr.DataArray(
        initial_fe_society_intermediate_term(),
        {"Fe_SOCIETY_I": ["INTERMEDIATE_TERM"]},
        ["Fe_SOCIETY_I"],
    ),
    "_integ_fe_society_1",
)

_integ_fe_society_2 = Integ(
    lambda: xr.DataArray(
        float(fe_society_in().loc["LONG_TERM"])
        - float(fe_society_out().loc["LONG_TERM"])
        - float(fe_corrosion_lost().loc["LONG_TERM"]),
        {"Fe_SOCIETY_I": ["LONG_TERM"]},
        ["Fe_SOCIETY_I"],
    ),
    lambda: xr.DataArray(
        initial_fe_society_long_term(),
        {"Fe_SOCIETY_I": ["LONG_TERM"]},
        ["Fe_SOCIETY_I"],
    ),
    "_integ_fe_society_2",
)


@component.add(
    name="Fe_society_in",
    units="Mt/Year",
    subscripts=["Fe_SOCIETY_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_market_sales": 3,
        "imv_fe_fraction_to_long_term": 3,
        "coefficients_fe_society_in": 2,
    },
)
def fe_society_in():
    """
    Supply to society, which is divided into sectors with different use times. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    value = xr.DataArray(
        np.nan, {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]}, ["Fe_SOCIETY_I"]
    )
    value.loc[["SHORT_TERM"]] = (
        fe_market_sales()
        * (1 - imv_fe_fraction_to_long_term())
        * float(coefficients_fe_society_in().loc["SHORT_TERM"])
    )
    value.loc[["INTERMEDIATE_TERM"]] = (
        fe_market_sales()
        * (1 - imv_fe_fraction_to_long_term())
        * float(coefficients_fe_society_in().loc["INTERMEDIATE_TERM"])
    )
    value.loc[["LONG_TERM"]] = fe_market_sales() * imv_fe_fraction_to_long_term()
    return value


@component.add(
    name="Fe_society_out",
    units="Mt/Year",
    subscripts=["Fe_SOCIETY_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_society": 3, "fe_residence_time": 3, "imv_scrapping_rate": 1},
)
def fe_society_out():
    """
    What leaves active stocks-in-use and goes to iron scrap. See Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    value = xr.DataArray(
        np.nan, {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]}, ["Fe_SOCIETY_I"]
    )
    value.loc[["SHORT_TERM"]] = float(fe_society().loc["SHORT_TERM"]) / float(
        fe_residence_time().loc["SHORT_TERM"]
    )
    value.loc[["INTERMEDIATE_TERM"]] = float(
        fe_society().loc["INTERMEDIATE_TERM"]
    ) / float(fe_residence_time().loc["INTERMEDIATE_TERM"])
    value.loc[["LONG_TERM"]] = (
        float(fe_society().loc["LONG_TERM"])
        * imv_scrapping_rate()
        / float(fe_residence_time().loc["LONG_TERM"])
    )
    return value


@component.add(
    name="Fe_society_output",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_market_sales": 1, "imv_fe_fraction_to_long_term": 1},
)
def fe_society_output():
    return fe_market_sales() * imv_fe_fraction_to_long_term()


@component.add(
    name="Fe_society_total",
    subscripts=["Fe_SOCIETY_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_society": 3},
)
def fe_society_total():
    return xr.DataArray(
        float(fe_society().loc["SHORT_TERM"])
        + float(fe_society().loc["INTERMEDIATE_TERM"])
        + float(fe_society().loc["LONG_TERM"]),
        {"Fe_SOCIETY_I": _subscript_dict["Fe_SOCIETY_I"]},
        ["Fe_SOCIETY_I"],
    )


@component.add(
    name="fe_sum_of_known_rich_and_high_grade",
    units="Mt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_known_reserves": 2},
)
def fe_sum_of_known_rich_and_high_grade():
    """
    Total known Fe rich and high grade.
    """
    return float(fe_known_reserves().loc["HIGH_GRADE"]) + float(
        fe_known_reserves().loc["RICH_GRADE"]
    )


@component.add(
    name="Fe_technology",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_fe_technology": 3, "time": 1},
)
def fe_technology():
    """
    Technology learning curve, implied from generic literature and assisted by data from copper, gold and uranium mining. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return float(coefficients_fe_technology().loc["A_S_CURVE"]) / (
        1
        + np.exp(
            -float(coefficients_fe_technology().loc["B_S_CURVE"])
            * (time() - float(coefficients_fe_technology().loc["C_S_CURVE"]))
        )
    )


@component.add(
    name="Fe_total_known",
    units="Mt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_known_reserves": 4},
)
def fe_total_known():
    """
    Total known extractable reserves Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return (
        float(fe_known_reserves().loc["RICH_GRADE"])
        + float(fe_known_reserves().loc["HIGH_GRADE"])
        + float(fe_known_reserves().loc["LOW_GRADE"])
        + float(fe_known_reserves().loc["ULTRALOW_GRADE"])
    )


@component.add(
    name="Fe_total_mining",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_mining": 1},
)
def fe_total_mining():
    """
    Summing up all Fe grades.
    """
    return sum(
        fe_mining().rename({"ORE_GRADES_I": "ORE_GRADES_I!"}), dim=["ORE_GRADES_I!"]
    )


@component.add(
    name="finding_Fe",
    units="Mt/Year",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_hidden_resources": 4,
        "fe_prospecting": 4,
        "grade_number": 4,
        "fe_technology": 1,
    },
)
def finding_fe():
    """
    Finding anticipated resources by exploration to make them known and extractable. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    value = xr.DataArray(
        np.nan, {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]}, ["ORE_GRADES_I"]
    )
    value.loc[["RICH_GRADE"]] = (
        float(fe_hidden_resources().loc["RICH_GRADE"])
        * fe_prospecting()
        * float(grade_number().loc["RICH_GRADE"])
    )
    value.loc[["HIGH_GRADE"]] = (
        float(fe_hidden_resources().loc["HIGH_GRADE"])
        * fe_prospecting()
        * float(grade_number().loc["HIGH_GRADE"])
    )
    value.loc[["LOW_GRADE"]] = (
        float(fe_hidden_resources().loc["LOW_GRADE"])
        * fe_prospecting()
        * float(grade_number().loc["LOW_GRADE"])
    )
    value.loc[["ULTRALOW_GRADE"]] = (
        float(grade_number().loc["ULTRALOW_GRADE"])
        * fe_technology()
        * fe_prospecting()
        * float(fe_hidden_resources().loc["ULTRALOW_GRADE"])
    )
    value.loc[["TRACE_GRADE"]] = 0
    value.loc[["OCEANS_GRADE"]] = 0
    return value


@component.add(
    name="global_steel_demand",
    units="Bt/Billion_persons",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"imv_gdp_per_person": 3, "coefficients_global_steel_demand": 5},
)
def global_steel_demand():
    """
    The demand for steel depending on the GDP-Orginates from the World 7 model. In William model demand comes from the economy module. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access If GDP per person <33600 then S curve with a=0,595, b=0,0003, c=9300, else y = -1E-05x + 0,9394 S curve: a=0,595 , b=0,0003, c=9300
    """
    return if_then_else(
        imv_gdp_per_person() < 33600,
        lambda: float(
            coefficients_global_steel_demand().loc["EQUATION_ONE", "A_S_CURVE"]
        )
        / (
            1
            + np.exp(
                -float(
                    coefficients_global_steel_demand().loc["EQUATION_ONE", "B_S_CURVE"]
                )
                * (
                    imv_gdp_per_person()
                    - float(
                        coefficients_global_steel_demand().loc[
                            "EQUATION_ONE", "C_S_CURVE"
                        ]
                    )
                )
            )
        ),
        lambda: float(
            coefficients_global_steel_demand().loc["EQUATION_TWO", "A_S_CURVE"]
        )
        * imv_gdp_per_person()
        + float(coefficients_global_steel_demand().loc["EQUATION_TWO", "B_S_CURVE"]),
    )


@component.add(
    name="GRADE_NUMBER",
    units="DMNL",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_grade_number"},
)
def grade_number():
    return _ext_constant_grade_number()


_ext_constant_grade_number = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "GRADE_NUMBER*",
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    _root,
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    "_ext_constant_grade_number",
)


@component.add(
    name="IMPLICIT_PRICE_FE",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "time": 1,
        "imv_fe_mining_historical": 1,
        "initial_output_real_materials": 2,
        "demand_fe_base_year": 1,
    },
)
def implicit_price_fe():
    return if_then_else(
        time() < 2015,
        lambda: sum(
            initial_output_real_materials()
            .loc[:, "MINING_AND_MANUFACTURING_IRON"]
            .reset_coords(drop=True)
            .rename({"REGIONS_35_I": "REGIONS_35_I!"}),
            dim=["REGIONS_35_I!"],
        )
        / imv_fe_mining_historical(),
        lambda: sum(
            initial_output_real_materials()
            .loc[:, "MINING_AND_MANUFACTURING_IRON"]
            .reset_coords(drop=True)
            .rename({"REGIONS_35_I": "REGIONS_35_I!"}),
            dim=["REGIONS_35_I!"],
        )
        / demand_fe_base_year(),
    )


@component.add(
    name="IMV_ENERGY_PRICE",
    units="M$/Mt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_energy_price():
    """
    Originates from World7. Energy price over time.
    """
    return np.interp(
        time(),
        [
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
            2101.0,
            2102.0,
            2103.0,
            2104.0,
            2105.0,
            2106.0,
            2107.0,
            2108.0,
            2109.0,
            2110.0,
            2111.0,
            2112.0,
            2113.0,
            2114.0,
            2115.0,
            2116.0,
            2117.0,
            2118.0,
            2119.0,
            2120.0,
            2121.0,
            2122.0,
            2123.0,
            2124.0,
            2125.0,
            2126.0,
            2127.0,
            2128.0,
            2129.0,
            2130.0,
            2131.0,
            2132.0,
            2133.0,
            2134.0,
            2135.0,
            2136.0,
            2137.0,
            2138.0,
            2139.0,
            2140.0,
            2141.0,
            2142.0,
            2143.0,
            2144.0,
            2145.0,
            2146.0,
            2147.0,
            2148.0,
            2149.0,
            2150.0,
            2151.0,
            2152.0,
            2153.0,
            2154.0,
            2155.0,
            2156.0,
            2157.0,
            2158.0,
            2159.0,
            2160.0,
            2161.0,
            2162.0,
            2163.0,
            2164.0,
            2165.0,
            2166.0,
            2167.0,
            2168.0,
            2169.0,
            2170.0,
            2171.0,
            2172.0,
            2173.0,
            2174.0,
            2175.0,
            2176.0,
            2177.0,
            2178.0,
            2179.0,
            2180.0,
            2181.0,
            2182.0,
            2183.0,
            2184.0,
            2185.0,
            2186.0,
            2187.0,
            2188.0,
            2189.0,
            2190.0,
            2191.0,
            2192.0,
            2193.0,
            2194.0,
            2195.0,
            2196.0,
            2197.0,
            2198.0,
            2199.0,
            2200.0,
            2201.0,
            2202.0,
            2203.0,
            2204.0,
            2205.0,
            2206.0,
            2207.0,
            2208.0,
            2209.0,
            2210.0,
            2211.0,
            2212.0,
            2213.0,
            2214.0,
            2215.0,
            2216.0,
            2217.0,
            2218.0,
            2219.0,
            2220.0,
            2221.0,
            2222.0,
            2223.0,
            2224.0,
            2225.0,
            2226.0,
            2227.0,
            2228.0,
            2229.0,
            2230.0,
            2231.0,
            2232.0,
            2233.0,
            2234.0,
            2235.0,
            2236.0,
            2237.0,
            2238.0,
            2239.0,
            2240.0,
            2241.0,
            2242.0,
            2243.0,
            2244.0,
            2245.0,
            2246.0,
            2247.0,
            2248.0,
            2249.0,
            2250.0,
            2251.0,
            2252.0,
            2253.0,
            2254.0,
            2255.0,
            2256.0,
            2257.0,
            2258.0,
            2259.0,
            2260.0,
            2261.0,
            2262.0,
            2263.0,
            2264.0,
            2265.0,
            2266.0,
            2267.0,
            2268.0,
            2269.0,
            2270.0,
            2271.0,
            2272.0,
            2273.0,
            2274.0,
            2275.0,
            2276.0,
            2277.0,
            2278.0,
            2279.0,
            2280.0,
            2281.0,
            2282.0,
            2283.0,
            2284.0,
            2285.0,
            2286.0,
            2287.0,
            2288.0,
            2289.0,
            2290.0,
            2291.0,
            2292.0,
            2293.0,
            2294.0,
            2295.0,
            2296.0,
            2297.0,
            2298.0,
            2299.0,
            2300.0,
        ],
        [
            18.2926,
            17.3633,
            16.7203,
            15.4341,
            15.4341,
            15.1125,
            14.791,
            14.1479,
            14.1479,
            14.1479,
            12.2186,
            14.1479,
            10.6109,
            10.6109,
            10.6109,
            10.6109,
            10.2894,
            9.96785,
            9.96785,
            9.96785,
            9.96785,
            9.32476,
            9.32476,
            9.00321,
            9.00321,
            9.00321,
            8.68167,
            8.68167,
            8.68167,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            8.36013,
            9.00321,
            9.16399,
            9.32476,
            9.48553,
            9.6463,
            9.96785,
            10.2894,
            10.2894,
            10.2894,
            10.9325,
            11.5756,
            12.2186,
            12.6474,
            13.0761,
            15.4341,
            16.0772,
            17.3633,
            19.9357,
            19.9357,
            21.865,
            23.7942,
            25.0804,
            25.0804,
            27.0096,
            76.5273,
            124.116,
            77.1704,
            79.0997,
            23.1511,
            23.1511,
            23.1511,
            23.1511,
            23.1511,
            28.2958,
            29.582,
            29.9035,
            30.2251,
            30.8682,
            30.8682,
            32.7974,
            33.4405,
            33.7621,
            35.3698,
            36.0129,
            39.2283,
            41.8006,
            41.8006,
            41.8006,
            44.373,
            50.8039,
            53.3762,
            57.8778,
            58.1994,
            84.8875,
            87.4598,
            173.633,
            153.055,
            155.949,
            156.27,
            123.473,
            118.328,
            118.328,
            118.328,
            118.328,
            118.328,
            120.257,
            120.257,
            120.257,
            120.257,
            120.257,
            120.257,
            120.257,
            120.9,
            121.543,
            121.543,
            121.543,
            121.543,
            122.186,
            122.83,
            123.473,
            123.473,
            123.473,
            124.116,
            124.759,
            126.045,
            126.367,
            126.688,
            127.331,
            128.617,
            129.26,
            131.19,
            131.511,
            131.833,
            132.476,
            133.762,
            133.976,
            134.191,
            135.691,
            136.334,
            136.977,
            137.621,
            138.264,
            138.585,
            138.907,
            140.193,
            140.836,
            141.05,
            141.265,
            141.479,
            142.765,
            143.408,
            143.408,
            144.695,
            144.695,
            145.338,
            150.482,
            151.768,
            152.412,
            153.376,
            159.486,
            169.775,
            170.418,
            174.92,
            200.0,
            180.386,
            195.498,
            193.569,
            160.772,
            161.093,
            161.415,
            161.844,
            162.272,
            162.701,
            163.023,
            163.344,
            163.558,
            163.773,
            163.987,
            164.309,
            164.63,
            165.916,
            165.916,
            165.916,
            165.916,
            165.916,
            165.916,
            165.916,
            165.916,
            165.916,
            166.238,
            166.559,
            166.988,
            167.417,
            167.846,
            168.489,
            169.132,
            169.775,
            170.096,
            170.418,
            171.061,
            171.704,
            171.704,
            172.99,
            173.312,
            173.633,
            173.955,
            174.277,
            174.92,
            174.92,
            174.92,
            175.563,
            175.563,
            175.563,
            176.206,
            176.42,
            176.635,
            177.492,
            177.814,
            178.135,
            178.778,
            178.778,
            178.778,
            179.421,
            180.064,
            180.707,
            180.707,
            180.707,
            181.994,
            182.637,
            182.637,
            183.28,
            183.28,
            183.923,
            183.923,
            185.209,
            185.852,
            185.852,
            186.495,
            187.781,
            188.103,
            188.424,
            189.068,
            189.068,
            189.711,
            190.354,
            190.997,
            190.997,
            191.318,
            192.283,
            192.283,
            192.283,
            192.926,
            193.569,
            193.569,
            194.212,
            194.855,
            194.855,
            195.07,
            195.284,
            195.498,
            195.498,
            196.141,
            196.141,
            196.141,
            196.463,
            196.785,
            197.106,
            197.428,
            197.749,
            198.071,
            198.071,
            198.714,
            198.714,
            198.714,
            198.714,
            198.928,
            199.143,
            199.357,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
            200.0,
        ],
    )


@component.add(
    name="IMV_Fe_DEMAND_FOR_REINFORCMENT_BARS",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_fe_demand_for_reinforcment_bars():
    """
    Intermodel varialble, will come from the economy module. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return np.interp(
        time(),
        [
            1850.0,
            1852.69,
            1855.38,
            1858.08,
            1860.77,
            1863.46,
            1866.15,
            1868.85,
            1871.54,
            1874.23,
            1876.92,
            1879.62,
            1882.31,
            1885.0,
            1887.69,
            1890.38,
            1893.08,
            1895.77,
            1898.46,
            1901.15,
            1903.85,
            1906.54,
            1909.23,
            1911.92,
            1914.62,
            1917.31,
            1920.0,
            1922.69,
            1925.38,
            1928.08,
            1930.77,
            1933.46,
            1936.15,
            1938.85,
            1941.54,
            1944.23,
            1946.92,
            1949.62,
            1952.31,
            1955.0,
            1957.69,
            1960.38,
            1963.08,
            1965.77,
            1968.46,
            1971.15,
            1973.85,
            1976.54,
            1979.23,
            1981.92,
            1984.62,
            1987.31,
            1990.0,
            1992.69,
            1995.38,
            1998.08,
            2000.77,
            2003.46,
            2006.15,
            2008.85,
            2011.54,
            2014.23,
            2016.92,
            2019.62,
            2022.31,
            2025.0,
            2027.69,
            2030.38,
            2033.08,
            2035.77,
            2038.46,
            2041.15,
            2043.85,
            2046.54,
            2049.23,
            2051.92,
            2054.62,
            2057.31,
            2060.0,
            2062.69,
            2065.38,
            2068.08,
            2070.77,
            2073.46,
            2076.15,
            2078.85,
            2081.54,
            2084.23,
            2086.92,
            2089.62,
            2092.31,
            2095.0,
            2097.69,
            2100.38,
            2103.08,
            2105.77,
            2108.46,
            2111.15,
            2113.85,
            2116.54,
            2119.23,
            2121.92,
            2124.62,
            2127.31,
            2130.0,
            2132.69,
            2135.38,
            2138.08,
            2140.77,
            2143.46,
            2146.15,
            2148.85,
            2151.54,
            2154.23,
            2156.92,
            2159.62,
            2162.31,
            2165.0,
            2167.69,
            2170.38,
            2173.08,
            2175.77,
            2178.46,
            2181.15,
            2183.85,
            2186.54,
            2189.23,
            2191.92,
            2194.62,
            2197.31,
            2200.0,
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.006,
            0.0,
            0.0,
            0.0,
            0.003,
            0.006,
            0.006,
            0.009,
            0.009,
            0.009,
            0.012,
            0.012,
            0.014,
            0.017,
            0.017,
            0.02,
            0.023,
            0.035,
            0.038,
            0.043,
            0.046,
            0.055,
            0.061,
            0.078,
            0.09,
            0.099,
            0.11,
            0.122,
            0.13,
            0.145,
            0.162,
            0.171,
            0.191,
            0.203,
            0.217,
            0.241,
            0.255,
            0.267,
            0.281,
            0.287,
            0.31,
            0.339,
            0.351,
            0.371,
            0.388,
            0.417,
            0.449,
            0.467,
            0.487,
            0.51,
            0.528,
            0.551,
            0.597,
            0.617,
            0.652,
            0.652,
            0.699,
            0.736,
            0.765,
            0.777,
            0.791,
            0.803,
            0.809,
            0.82,
            0.826,
            0.835,
            0.835,
            0.835,
            0.835,
            0.835,
            0.835,
            0.835,
            0.835,
            0.832,
            0.826,
            0.823,
            0.82,
            0.817,
            0.814,
            0.809,
            0.806,
            0.803,
            0.797,
            0.791,
            0.788,
            0.786,
            0.78,
            0.777,
            0.774,
            0.768,
            0.765,
            0.759,
            0.757,
            0.751,
            0.748,
            0.745,
            0.739,
            0.733,
            0.728,
            0.725,
            0.722,
            0.71,
            0.701,
            0.687,
            0.667,
            0.661,
            0.635,
            0.614,
            0.597,
            0.591,
            0.577,
            0.565,
            0.551,
            0.536,
            0.525,
            0.519,
            0.513,
            0.507,
            0.504,
            0.499,
            0.496,
            0.493,
            0.49,
            0.49,
            0.49,
            0.49,
            0.49,
        ],
    )


@component.add(
    name="IMV_Fe_FRACTION_TO_LONG_TERM",
    units="1/Years",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_fe_fraction_to_long_term():
    """
    Fe fraction that is send into longterm use.
    """
    return np.interp(
        time(),
        [
            1900.0,
            1900.6,
            1901.2,
            1901.8,
            1902.4,
            1903.0,
            1903.6,
            1904.2,
            1904.8,
            1905.4,
            1906.0,
            1906.6,
            1907.2,
            1907.8,
            1908.4,
            1909.0,
            1909.6,
            1910.2,
            1910.8,
            1911.4,
            1912.0,
            1912.6,
            1913.2,
            1913.8,
            1914.4,
            1915.0,
            1915.6,
            1916.2,
            1916.8,
            1917.4,
            1918.0,
            1918.6,
            1919.2,
            1919.8,
            1920.4,
            1921.0,
            1921.6,
            1922.2,
            1922.8,
            1923.4,
            1924.0,
            1924.6,
            1925.2,
            1925.8,
            1926.4,
            1927.0,
            1927.6,
            1928.2,
            1928.8,
            1929.4,
            1930.0,
            1930.6,
            1931.2,
            1931.8,
            1932.4,
            1933.0,
            1933.6,
            1934.2,
            1934.8,
            1935.4,
            1936.0,
            1936.6,
            1937.2,
            1937.8,
            1938.4,
            1939.0,
            1939.6,
            1940.2,
            1940.8,
            1941.4,
            1942.0,
            1942.6,
            1943.2,
            1943.8,
            1944.4,
            1945.0,
            1945.6,
            1946.2,
            1946.8,
            1947.4,
            1948.0,
            1948.6,
            1949.2,
            1949.8,
            1950.4,
            1951.0,
            1951.6,
            1952.2,
            1952.8,
            1953.4,
            1954.0,
            1954.6,
            1955.2,
            1955.8,
            1956.4,
            1957.0,
            1957.6,
            1958.2,
            1958.8,
            1959.4,
            1960.0,
            1960.6,
            1961.2,
            1961.8,
            1962.4,
            1963.0,
            1963.6,
            1964.2,
            1964.8,
            1965.4,
            1966.0,
            1966.6,
            1967.2,
            1967.8,
            1968.4,
            1969.0,
            1969.6,
            1970.2,
            1970.8,
            1971.4,
            1972.0,
            1972.6,
            1973.2,
            1973.8,
            1974.4,
            1975.0,
            1975.6,
            1976.2,
            1976.8,
            1977.4,
            1978.0,
            1978.6,
            1979.2,
            1979.8,
            1980.4,
            1981.0,
            1981.6,
            1982.2,
            1982.8,
            1983.4,
            1984.0,
            1984.6,
            1985.2,
            1985.8,
            1986.4,
            1987.0,
            1987.6,
            1988.2,
            1988.8,
            1989.4,
            1990.0,
            1990.6,
            1991.2,
            1991.8,
            1992.4,
            1993.0,
            1993.6,
            1994.2,
            1994.8,
            1995.4,
            1996.0,
            1996.6,
            1997.2,
            1997.8,
            1998.4,
            1999.0,
            1999.6,
            2000.2,
            2000.8,
            2001.4,
            2002.0,
            2002.6,
            2003.2,
            2003.8,
            2004.4,
            2005.0,
            2005.6,
            2006.2,
            2006.8,
            2007.4,
            2008.0,
            2008.6,
            2009.2,
            2009.8,
            2010.4,
            2011.0,
            2011.6,
            2012.2,
            2012.8,
            2013.4,
            2014.0,
            2014.6,
            2015.2,
            2015.8,
            2016.4,
            2017.0,
            2017.6,
            2018.2,
            2018.8,
            2019.4,
            2020.0,
            2020.6,
            2021.2,
            2021.8,
            2022.4,
            2023.0,
            2023.6,
            2024.2,
            2024.8,
            2025.4,
            2026.0,
            2026.6,
            2027.2,
            2027.8,
            2028.4,
            2029.0,
            2029.6,
            2030.2,
            2030.8,
            2031.4,
            2032.0,
            2032.6,
            2033.2,
            2033.8,
            2034.4,
            2035.0,
            2035.6,
            2036.2,
            2036.8,
            2037.4,
            2038.0,
            2038.6,
            2039.2,
            2039.8,
            2040.4,
            2041.0,
            2041.6,
            2042.2,
            2042.8,
            2043.4,
            2044.0,
            2044.6,
            2045.2,
            2045.8,
            2046.4,
            2047.0,
            2047.6,
            2048.2,
            2048.8,
            2049.4,
            2050.0,
            2050.6,
            2051.2,
            2051.8,
            2052.4,
            2053.0,
            2053.6,
            2054.2,
            2054.8,
            2055.4,
            2056.0,
            2056.6,
            2057.2,
            2057.8,
            2058.4,
            2059.0,
            2059.6,
            2060.2,
            2060.8,
            2061.4,
            2062.0,
            2062.6,
            2063.2,
            2063.8,
            2064.4,
            2065.0,
            2065.6,
            2066.2,
            2066.8,
            2067.4,
            2068.0,
            2068.6,
            2069.2,
            2069.8,
            2070.4,
            2071.0,
            2071.6,
            2072.2,
            2072.8,
            2073.4,
            2074.0,
            2074.6,
            2075.2,
            2075.8,
            2076.4,
            2077.0,
            2077.6,
            2078.2,
            2078.8,
            2079.4,
            2080.0,
            2080.6,
            2081.2,
            2081.8,
            2082.4,
            2083.0,
            2083.6,
            2084.2,
            2084.8,
            2085.4,
            2086.0,
            2086.6,
            2087.2,
            2087.8,
            2088.4,
            2089.0,
            2089.6,
            2090.2,
            2090.8,
            2091.4,
            2092.0,
            2092.6,
            2093.2,
            2093.8,
            2094.4,
            2095.0,
            2095.6,
            2096.2,
            2096.8,
            2097.4,
            2098.0,
            2098.6,
            2099.2,
            2099.8,
            2100.4,
            2101.0,
            2101.6,
            2102.2,
            2102.8,
            2103.4,
            2104.0,
            2104.6,
            2105.2,
            2105.8,
            2106.4,
            2107.0,
            2107.6,
            2108.2,
            2108.8,
            2109.4,
            2110.0,
            2110.6,
            2111.2,
            2111.8,
            2112.4,
            2113.0,
            2113.6,
            2114.2,
            2114.8,
            2115.4,
            2116.0,
            2116.6,
            2117.2,
            2117.8,
            2118.4,
            2119.0,
            2119.6,
            2120.2,
            2120.8,
            2121.4,
            2122.0,
            2122.6,
            2123.2,
            2123.8,
            2124.4,
            2125.0,
            2125.6,
            2126.2,
            2126.8,
            2127.4,
            2128.0,
            2128.6,
            2129.2,
            2129.8,
            2130.4,
            2131.0,
            2131.6,
            2132.2,
            2132.8,
            2133.4,
            2134.0,
            2134.6,
            2135.2,
            2135.8,
            2136.4,
            2137.0,
            2137.6,
            2138.2,
            2138.8,
            2139.4,
            2140.0,
            2140.6,
            2141.2,
            2141.8,
            2142.4,
            2143.0,
            2143.6,
            2144.2,
            2144.8,
            2145.4,
            2146.0,
            2146.6,
            2147.2,
            2147.8,
            2148.4,
            2149.0,
            2149.6,
            2150.2,
            2150.8,
            2151.4,
            2152.0,
            2152.6,
            2153.2,
            2153.8,
            2154.4,
            2155.0,
            2155.6,
            2156.2,
            2156.8,
            2157.4,
            2158.0,
            2158.6,
            2159.2,
            2159.8,
            2160.4,
            2161.0,
            2161.6,
            2162.2,
            2162.8,
            2163.4,
            2164.0,
            2164.6,
            2165.2,
            2165.8,
            2166.4,
            2167.0,
            2167.6,
            2168.2,
            2168.8,
            2169.4,
            2170.0,
            2170.6,
            2171.2,
            2171.8,
            2172.4,
            2173.0,
            2173.6,
            2174.2,
            2174.8,
            2175.4,
            2176.0,
            2176.6,
            2177.2,
            2177.8,
            2178.4,
            2179.0,
            2179.6,
            2180.2,
            2180.8,
            2181.4,
            2182.0,
            2182.6,
            2183.2,
            2183.8,
            2184.4,
            2185.0,
            2185.6,
            2186.2,
            2186.8,
            2187.4,
            2188.0,
            2188.6,
            2189.2,
            2189.8,
            2190.4,
            2191.0,
            2191.6,
            2192.2,
            2192.8,
            2193.4,
            2194.0,
            2194.6,
            2195.2,
            2195.8,
            2196.4,
            2197.0,
            2197.6,
            2198.2,
            2198.8,
            2199.4,
            2200.0,
        ],
        [
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.32,
            0.312,
            0.313,
            0.314,
            0.316,
            0.318,
            0.32,
            0.322,
            0.324,
            0.326,
            0.326417,
            0.326833,
            0.32725,
            0.327667,
            0.328083,
            0.3285,
            0.328917,
            0.329333,
            0.32975,
            0.330167,
            0.330583,
            0.331,
            0.332091,
            0.333182,
            0.334273,
            0.335364,
            0.336455,
            0.337545,
            0.338636,
            0.339727,
            0.340818,
            0.341909,
            0.343,
            0.344,
            0.345,
            0.346,
            0.347,
            0.348,
            0.349,
            0.349556,
            0.350111,
            0.350667,
            0.351222,
            0.351778,
            0.352333,
            0.352889,
            0.353444,
            0.354,
            0.356,
            0.358,
            0.36,
            0.361375,
            0.36275,
            0.364125,
            0.3655,
            0.366875,
            0.36825,
            0.369625,
            0.371,
            0.372333,
            0.373667,
            0.375,
            0.376333,
            0.377667,
            0.379,
            0.380333,
            0.381667,
            0.383,
            0.385,
            0.387,
            0.389,
            0.390375,
            0.39175,
            0.393125,
            0.3945,
            0.395875,
            0.39725,
            0.398625,
            0.4,
            0.401933,
            0.403867,
            0.4058,
            0.407733,
            0.409667,
            0.4116,
            0.413533,
            0.415467,
            0.4174,
            0.419333,
            0.421267,
            0.4232,
            0.425133,
            0.427067,
            0.429,
            0.430889,
            0.432778,
            0.434667,
            0.436556,
            0.438444,
            0.440333,
            0.442222,
            0.444111,
            0.446,
            0.4485,
            0.457,
            0.459,
            0.461,
            0.463,
            0.465,
            0.467,
            0.469,
            0.470667,
            0.472333,
            0.474,
            0.474,
            0.474,
            0.48,
            0.482,
            0.484,
            0.486,
            0.489667,
            0.493333,
            0.497,
            0.497,
            0.497,
            0.509,
            0.509,
            0.509,
            0.514,
            0.518,
            0.522,
            0.526,
            0.527,
            0.528,
            0.529,
            0.53,
            0.531,
            0.533,
            0.535,
            0.537,
            0.539,
            0.541,
            0.543,
            0.546667,
            0.550333,
            0.554,
            0.556,
            0.558,
            0.56,
            0.563667,
            0.567333,
            0.571,
            0.573,
            0.575,
            0.577,
            0.577,
            0.577,
            0.583,
            0.586,
            0.589,
            0.590667,
            0.592333,
            0.594,
            0.596,
            0.598,
            0.611,
            0.613,
            0.615,
            0.617,
            0.621,
            0.625,
            0.629,
            0.632667,
            0.636333,
            0.64,
            0.642,
            0.644,
            0.646,
            0.647667,
            0.649333,
            0.651,
            0.653,
            0.655,
            0.663,
            0.663,
            0.669,
            0.670667,
            0.672333,
            0.674,
            0.674,
            0.674,
            0.68,
            0.68,
            0.68,
            0.686,
            0.686,
            0.686,
            0.686,
            0.686,
            0.686,
            0.691,
            0.691,
            0.691,
            0.691,
            0.691,
            0.691,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.697,
            0.691,
            0.691,
            0.691,
            0.691,
            0.691,
            0.691,
            0.686,
            0.686,
            0.686,
            0.686,
            0.686,
            0.686,
            0.68,
            0.68,
            0.68,
            0.68,
            0.68,
            0.68,
            0.674,
            0.674,
            0.674,
            0.674,
            0.6715,
            0.669,
            0.667,
            0.665,
            0.663,
            0.663,
            0.663,
            0.657,
            0.655,
            0.653,
            0.646,
            0.646,
            0.646,
            0.64,
            0.64,
            0.64,
            0.634,
            0.634,
            0.634,
            0.629,
            0.629,
            0.629,
            0.623,
            0.623,
            0.623,
            0.617,
            0.617,
            0.611,
            0.611,
            0.611,
            0.606,
            0.606,
            0.606,
            0.606,
            0.604,
            0.602,
            0.594,
            0.594,
            0.594,
            0.594,
            0.592333,
            0.590667,
            0.583,
            0.581,
            0.579,
            0.571,
            0.569333,
            0.567667,
            0.566,
            0.562,
            0.558,
            0.549,
            0.546,
            0.543,
            0.541,
            0.539,
            0.537,
            0.537,
            0.537,
            0.537,
            0.535,
            0.533,
            0.531,
            0.529333,
            0.527667,
            0.52,
            0.52,
            0.52,
            0.52,
            0.516333,
            0.512667,
            0.509,
            0.509,
            0.509,
            0.509,
            0.507,
            0.505,
            0.497,
            0.4958,
            0.4946,
            0.4934,
            0.4922,
            0.491,
            0.491,
            0.491,
            0.486,
            0.486,
            0.486,
            0.486,
            0.484,
            0.482,
            0.48,
            0.48,
            0.48,
            0.474,
            0.472333,
            0.470667,
            0.463,
            0.463,
            0.463,
            0.457,
            0.457,
            0.457,
            0.451,
            0.451,
            0.451,
            0.451,
            0.451,
            0.446,
            0.445,
            0.444,
            0.443,
            0.442,
            0.441,
            0.44,
            0.44,
            0.44,
            0.434,
            0.434,
            0.434,
            0.429,
            0.429,
            0.429,
            0.411,
            0.411,
            0.411,
            0.411,
            0.411,
            0.411,
            0.406,
            0.404,
            0.402,
            0.4,
            0.397,
            0.394,
            0.394,
            0.394,
            0.394,
            0.394,
            0.394,
            0.394,
            0.393444,
            0.392889,
            0.392333,
            0.391778,
            0.391222,
            0.390667,
            0.390111,
            0.389556,
            0.389,
            0.387,
            0.385,
            0.383,
            0.382,
            0.381,
            0.38,
            0.379,
            0.378,
            0.377,
            0.377,
            0.377,
            0.375,
            0.373,
            0.371,
            0.371,
            0.371,
            0.371,
            0.369333,
            0.367667,
            0.366,
            0.365,
            0.364,
            0.363,
            0.362,
            0.361,
            0.36,
            0.36,
            0.36,
            0.36,
            0.36,
            0.36,
            0.36,
            0.358,
            0.356,
            0.354,
            0.354,
            0.354,
            0.352333,
            0.350667,
            0.349,
            0.349,
            0.349,
            0.349,
            0.349,
            0.349,
            0.349,
            0.347,
            0.345,
            0.343,
            0.343,
            0.343,
            0.343,
            0.343,
            0.343,
            0.343,
            0.341,
            0.339,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.337,
            0.331,
        ],
    )


@component.add(
    name="IMV_Fe_MINING_HISTORICAL",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_fe_mining_historical():
    """
    Fe mining historical. USGS Mineral Commodities Summaries DS-140 series, downloaded from their website. Annual updates available Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return np.interp(
        time(),
        [
            2000,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2007,
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014,
            2015,
            2016,
            2017,
            2018,
            2019,
            2020,
            2021,
        ],
        [
            850,
            852,
            905,
            971,
            1063,
            1148,
            1250,
            1350,
            1345,
            1241,
            1435,
            1540,
            1562,
            1652,
            1674,
            1623,
            1632,
            1735,
            1827,
            1875,
            1879,
            1951,
        ],
    )


@component.add(
    name="IMV_Fe_RECYCLED_FROM_BUILDINGS_HISTORICAL",
    units="Bt",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_fe_recycled_from_buildings_historical():
    """
    Assumption based, historical recycling of Fe from metal. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return np.interp(
        time(),
        [
            1850.0,
            1852.69,
            1855.38,
            1858.08,
            1860.77,
            1863.46,
            1866.15,
            1868.85,
            1871.54,
            1874.23,
            1876.92,
            1879.62,
            1882.31,
            1885.0,
            1887.69,
            1890.38,
            1893.08,
            1895.77,
            1898.46,
            1901.15,
            1903.85,
            1906.54,
            1909.23,
            1911.92,
            1914.62,
            1917.31,
            1920.0,
            1922.69,
            1925.38,
            1928.08,
            1930.77,
            1933.46,
            1936.15,
            1938.85,
            1941.54,
            1944.23,
            1946.92,
            1949.62,
            1952.31,
            1955.0,
            1957.69,
            1960.38,
            1963.08,
            1965.77,
            1968.46,
            1971.15,
            1973.85,
            1976.54,
            1979.23,
            1981.92,
            1984.62,
            1987.31,
            1990.0,
            1992.69,
            1995.38,
            1998.08,
            2000.77,
            2003.46,
            2006.15,
            2008.85,
            2011.54,
            2014.23,
            2016.92,
            2019.62,
            2022.31,
            2025.0,
            2027.69,
            2030.38,
            2033.08,
            2035.77,
            2038.46,
            2041.15,
            2043.85,
            2046.54,
            2049.23,
            2051.92,
            2054.62,
            2057.31,
            2060.0,
            2062.69,
            2065.38,
            2068.08,
            2070.77,
            2073.46,
            2076.15,
            2078.85,
            2081.54,
            2084.23,
            2086.92,
            2089.62,
            2092.31,
            2095.0,
            2097.69,
            2100.38,
            2103.08,
            2105.77,
            2108.46,
            2111.15,
            2113.85,
            2116.54,
            2119.23,
            2121.92,
            2124.62,
            2127.31,
            2130.0,
            2132.69,
            2135.38,
            2138.08,
            2140.77,
            2143.46,
            2146.15,
            2148.85,
            2151.54,
            2154.23,
            2156.92,
            2159.62,
            2162.31,
            2165.0,
            2167.69,
            2170.38,
            2173.08,
            2175.77,
            2178.46,
            2181.15,
            2183.85,
            2186.54,
            2189.23,
            2191.92,
            2194.62,
            2197.31,
            2200.0,
        ],
        [
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.003,
            0.003,
            0.003,
            0.006,
            0.009,
            0.009,
            0.012,
            0.014,
            0.014,
            0.02,
            0.02,
            0.023,
            0.026,
            0.029,
            0.029,
            0.032,
            0.035,
            0.041,
            0.049,
            0.058,
            0.064,
            0.072,
            0.078,
            0.09,
            0.101,
            0.107,
            0.122,
            0.133,
            0.148,
            0.162,
            0.174,
            0.188,
            0.206,
            0.214,
            0.232,
            0.252,
            0.272,
            0.296,
            0.313,
            0.342,
            0.357,
            0.388,
            0.42,
            0.443,
            0.461,
            0.49,
            0.504,
            0.525,
            0.542,
            0.577,
            0.606,
            0.646,
            0.693,
            0.722,
            0.771,
            0.806,
            0.814,
            0.852,
            0.878,
            0.896,
            0.925,
            0.962,
            0.974,
            0.986,
            0.997,
            1.009,
            1.02,
            1.026,
            1.038,
            1.043,
            1.049,
            1.055,
            1.061,
            1.067,
            1.067,
            1.072,
            1.072,
            1.072,
            1.072,
            1.072,
            1.072,
            1.072,
            1.072,
            1.067,
            1.067,
            1.067,
            1.061,
            1.061,
            1.049,
            1.043,
            1.026,
            1.014,
            1.003,
            0.98,
            0.968,
            0.957,
            0.9525,
            0.948,
            0.942,
            0.928,
            0.91,
            0.901,
            0.878,
            0.865,
            0.852,
            0.838,
            0.838,
            0.817,
            0.81,
            0.794,
            0.786,
            0.759,
            0.739,
            0.73,
            0.722,
            0.716,
            0.71,
            0.704,
            0.701,
            0.7,
            0.69,
        ],
    )


@component.add(
    name="IMV_Fe_STEEL_PRICE_HISTORICAL",
    units="$/t",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_fe_steel_price_historical():
    """
    Fe-steel price historical USGS Mineral Commodities Summaries DS-140 series, downloaded from their website. Annual updates available Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return np.interp(
        time(),
        [
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
        ],
        [
            115.0,
            111.0,
            100.0,
            94.3,
            92.6,
            92.7,
            92.5,
            94.9,
            101.0,
            110.0,
            115.0,
            114.0,
            115.0,
            123.0,
            128.0,
            135.0,
            144.0,
            153.0,
            154.0,
            154.0,
            152.0,
            150.0,
            148.0,
            147.0,
            146.0,
            145.0,
            142.0,
            140.0,
            137.0,
            136.0,
            137.0,
            141.0,
            146.0,
            141.0,
            160.0,
            171.0,
            172.0,
            177.0,
            182.0,
            180.0,
            171.0,
            173.0,
            169.0,
            165.0,
            164.0,
            159.0,
            149.0,
            147.0,
            152.0,
            150.0,
            140.0,
            131.0,
            124.0,
            122.0,
            125.0,
            128.0,
            120.0,
            118.0,
            114.0,
            103.0,
            103.0,
            93.0,
            94.9,
            97.0,
            127.0,
            133.0,
            141.0,
            144.0,
            167.0,
            125.0,
            143.0,
            157.0,
            148.0,
            136.0,
        ],
    )


@component.add(
    name="IMV_GDP_PER_PERSON",
    units="$/persons",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_gdp_per_person():
    """
    This variable is an IMV = inter module variable. It comes from another module that has yet to be connected to this module. Could be connected to the population module from William. Since the population model from World 7 is excluded from this work. Currently the variable is represented as a graph variable but this will be changed laiter that matches the output from the WORLD7. The variable shows GDP per person Inaki has M$/person
    """
    return np.interp(
        time(),
        [
            1850.0,
            1851.0,
            1852.0,
            1853.0,
            1854.0,
            1855.0,
            1856.0,
            1857.0,
            1858.0,
            1859.0,
            1860.0,
            1861.0,
            1862.0,
            1863.0,
            1864.0,
            1865.0,
            1866.0,
            1867.0,
            1868.0,
            1869.0,
            1870.0,
            1871.0,
            1872.0,
            1873.0,
            1874.0,
            1875.0,
            1876.0,
            1877.0,
            1878.0,
            1879.0,
            1880.0,
            1881.0,
            1882.0,
            1883.0,
            1884.0,
            1885.0,
            1886.0,
            1887.0,
            1888.0,
            1889.0,
            1890.0,
            1891.0,
            1892.0,
            1893.0,
            1894.0,
            1895.0,
            1896.0,
            1897.0,
            1898.0,
            1899.0,
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            500.0,
            520.0,
            612.727,
            700.0,
            700.0,
            700.0,
            700.0,
            700.0,
            734.545,
            780.909,
            800.0,
            800.0,
            820.0,
            866.364,
            900.0,
            900.0,
            900.0,
            900.0,
            900.0,
            900.0,
            900.0,
            974.545,
            1067.27,
            1130.0,
            1176.36,
            1200.0,
            1200.0,
            1200.0,
            1200.0,
            1208.18,
            1254.55,
            1301.82,
            1394.55,
            1487.27,
            1500.0,
            1500.0,
            1500.0,
            1500.0,
            1525.45,
            1571.82,
            1618.18,
            1664.55,
            1700.0,
            1700.0,
            1707.27,
            1800.0,
            1892.73,
            1942.73,
            1989.09,
            2035.45,
            2081.82,
            2100.0,
            2100.0,
            2141.82,
            2234.55,
            2313.64,
            2360.0,
            2400.0,
            2400.0,
            2400.0,
            2536.36,
            2675.45,
            2738.18,
            2784.55,
            2830.91,
            2877.27,
            2900.0,
            2900.0,
            2949.09,
            3088.18,
            3209.09,
            3255.45,
            3305.45,
            3444.55,
            3583.64,
            3600.0,
            3600.0,
            3633.64,
            3680.0,
            3779.09,
            3918.18,
            4019.09,
            4065.45,
            4100.0,
            4100.0,
            4113.64,
            4252.73,
            4391.82,
            4487.27,
            4580.0,
            4636.36,
            4682.73,
            4758.18,
            4850.91,
            4965.45,
            5104.55,
            5243.64,
            5382.73,
            5500.0,
            5500.0,
            5500.0,
            5592.73,
            5685.45,
            5817.27,
            5956.36,
            6063.64,
            6156.36,
            6224.55,
            6270.91,
            6317.27,
            6363.64,
            6420.0,
            6512.73,
            6600.0,
            6600.0,
            6600.0,
            6725.45,
            6864.55,
            7003.64,
            7142.73,
            7227.27,
            7273.64,
            7300.0,
            7300.0,
            7338.18,
            7477.27,
            7610.91,
            7703.64,
            7796.36,
            7889.09,
            7981.82,
            8000.0,
            8000.0,
            8030.0,
            8076.36,
            8168.18,
            8307.27,
            8400.0,
            8400.0,
            8416.36,
            8509.09,
            8601.82,
            8694.55,
            8787.27,
            8880.0,
            8972.73,
            9000.0,
            9000.0,
            9076.36,
            9215.45,
            9318.18,
            9364.55,
            9443.64,
            9629.09,
            9800.0,
            9800.0,
            9800.0,
            9928.18,
            10067.3,
            10135.5,
            10181.8,
            10200.0,
            10200.0,
            10262.7,
            10401.8,
            10513.6,
            10560.0,
            10600.0,
            10600.0,
            10600.0,
            10781.8,
            10967.3,
            11114.5,
            11253.6,
            11300.0,
            11300.0,
            11323.6,
            11370.0,
            11400.0,
            11400.0,
            11427.3,
            11566.4,
            11700.0,
            11700.0,
            11700.0,
            11822.7,
            11961.8,
            12000.0,
            12000.0,
            12026.4,
            12072.7,
            12100.0,
            12100.0,
            12100.0,
            12100.0,
            12113.6,
            12252.7,
            12391.8,
            12443.6,
            12490.0,
            12500.0,
            12500.0,
            12500.0,
            12500.0,
            12521.8,
            12568.2,
            12600.0,
            12600.0,
            12600.0,
            12600.0,
            12600.0,
            12600.0,
            12600.0,
            12678.2,
            12770.9,
            12800.0,
            12800.0,
            12800.0,
            12800.0,
            12800.0,
            12800.0,
            12810.0,
            12856.4,
            12900.0,
            12900.0,
            12900.0,
            12900.0,
            12900.0,
            12934.5,
            12980.9,
            13000.0,
            13000.0,
            13040.0,
            13132.7,
            13200.0,
            13200.0,
            13200.0,
            13200.0,
            13200.0,
            13200.0,
            13200.0,
        ],
    )


@component.add(
    name="IMV_IRON_DEMAND_PER_PERSON",
    units="Mt/Million_persons",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_iron_demand_per_person():
    """
    Iron demand per person. Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return np.interp(
        time(),
        [
            0.0,
            7.33333,
            14.6667,
            22.0,
            29.3333,
            36.6667,
            44.0,
            51.3333,
            58.6667,
            66.0,
            73.3333,
            80.6667,
            88.0,
            95.3333,
            102.667,
            110.0,
            117.333,
            124.667,
            132.0,
            139.333,
            146.667,
            154.0,
            161.333,
            168.667,
            176.0,
            183.333,
            190.667,
            198.0,
            205.333,
            212.667,
            220.0,
            227.333,
            234.667,
            242.0,
            249.333,
            256.667,
            264.0,
            271.333,
            278.667,
            286.0,
            293.333,
            300.667,
            308.0,
            315.333,
            322.667,
            330.0,
            337.333,
            344.667,
            352.0,
            359.333,
            366.667,
            374.0,
            381.333,
            388.667,
            396.0,
            403.333,
            410.667,
            418.0,
            425.333,
            432.667,
            440.0,
            447.333,
            454.667,
            462.0,
            469.333,
            476.667,
            484.0,
            491.333,
            498.667,
            506.0,
            513.333,
            520.667,
            528.0,
            535.333,
            542.667,
            550.0,
            557.333,
            564.667,
            572.0,
            579.333,
            586.667,
            594.0,
            601.333,
            608.667,
            616.0,
            623.333,
            630.667,
            638.0,
            645.333,
            652.667,
            660.0,
            667.333,
            674.667,
            682.0,
            689.333,
            696.667,
            704.0,
            711.333,
            718.667,
            726.0,
            733.333,
            740.667,
            748.0,
            755.333,
            762.667,
            770.0,
            777.333,
            784.667,
            792.0,
            799.333,
            806.667,
            814.0,
            821.333,
            828.667,
            836.0,
            843.333,
            850.667,
            858.0,
            865.333,
            872.667,
            880.0,
            887.333,
            894.667,
            902.0,
            909.333,
            916.667,
            924.0,
            931.333,
            938.667,
            946.0,
            953.333,
            960.667,
            968.0,
            975.333,
            982.667,
            990.0,
            997.333,
            1004.67,
            1012.0,
            1019.33,
            1026.67,
            1034.0,
            1041.33,
            1048.67,
            1056.0,
            1063.33,
            1070.67,
            1078.0,
            1085.33,
            1092.67,
            1100.0,
            1107.33,
            1114.67,
            1122.0,
            1129.33,
            1136.67,
            1144.0,
            1151.33,
            1158.67,
            1166.0,
            1173.33,
            1180.67,
            1188.0,
            1195.33,
            1202.67,
            1210.0,
            1217.33,
            1224.67,
            1232.0,
            1239.33,
            1246.67,
            1254.0,
            1261.33,
            1268.67,
            1276.0,
            1283.33,
            1290.67,
            1298.0,
            1305.33,
            1312.67,
            1320.0,
            1327.33,
            1334.67,
            1342.0,
            1349.33,
            1356.67,
            1364.0,
            1371.33,
            1378.67,
            1386.0,
            1393.33,
            1400.67,
            1408.0,
            1415.33,
            1422.67,
            1430.0,
            1437.33,
            1444.67,
            1452.0,
            1459.33,
            1466.67,
            1474.0,
            1481.33,
            1488.67,
            1496.0,
            1503.33,
            1510.67,
            1518.0,
            1525.33,
            1532.67,
            1540.0,
            1547.33,
            1554.67,
            1562.0,
            1569.33,
            1576.67,
            1584.0,
            1591.33,
            1598.67,
            1606.0,
            1613.33,
            1620.67,
            1628.0,
            1635.33,
            1642.67,
            1650.0,
            1657.33,
            1664.67,
            1672.0,
            1679.33,
            1686.67,
            1694.0,
            1701.33,
            1708.67,
            1716.0,
            1723.33,
            1730.67,
            1738.0,
            1745.33,
            1752.67,
            1760.0,
            1767.33,
            1774.67,
            1782.0,
            1789.33,
            1796.67,
            1804.0,
            1811.33,
            1818.67,
            1826.0,
            1833.33,
            1840.67,
            1848.0,
            1855.33,
            1862.67,
            1870.0,
            1877.33,
            1884.67,
            1892.0,
            1899.33,
            1906.67,
            1914.0,
            1921.33,
            1928.67,
            1936.0,
            1943.33,
            1950.67,
            1958.0,
            1965.33,
            1972.67,
            1980.0,
            1987.33,
            1994.67,
            2002.0,
            2009.33,
            2016.67,
            2024.0,
            2031.33,
            2038.67,
            2046.0,
            2053.33,
            2060.67,
            2068.0,
            2075.33,
            2082.67,
            2090.0,
            2097.33,
            2104.67,
            2112.0,
            2119.33,
            2126.67,
            2134.0,
            2141.33,
            2148.67,
            2156.0,
            2163.33,
            2170.67,
            2178.0,
            2185.33,
            2192.67,
            2200.0,
        ],
        [
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.067524,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.07717,
            0.096463,
            0.106109,
            0.106109,
            0.115756,
            0.115756,
            0.125402,
            0.125402,
            0.125402,
            0.135048,
            0.144695,
            0.144695,
            0.154341,
            0.163987,
            0.163987,
            0.173633,
            0.173633,
            0.18328,
            0.192926,
            0.202572,
            0.202572,
            0.212219,
            0.212219,
            0.241158,
            0.241158,
            0.241158,
            0.241158,
            0.241158,
            0.26045,
            0.26045,
            0.250804,
            0.250804,
            0.255627,
            0.26045,
            0.270096,
            0.279743,
            0.279743,
            0.289389,
            0.289389,
            0.289389,
            0.289389,
            0.289389,
            0.289389,
            0.299035,
            0.299035,
            0.299035,
            0.299035,
            0.299035,
            0.299035,
            0.308682,
            0.308682,
            0.308682,
            0.308682,
            0.308682,
            0.318328,
            0.318328,
            0.318328,
            0.323151,
            0.327974,
            0.327974,
            0.327974,
            0.337621,
            0.337621,
            0.347267,
            0.347267,
            0.335,
            0.351,
            0.351,
            0.351,
            0.351,
            0.351,
            0.351,
            0.367,
            0.367,
            0.383,
            0.407,
            0.415,
            0.549839,
            0.549839,
            0.617363,
            0.636656,
            0.651125,
            0.684887,
            0.70418,
            0.713826,
            0.71865,
            0.733119,
            0.742765,
            0.752412,
            0.752412,
            0.762058,
            0.771704,
            0.78135,
            0.78135,
            0.790997,
            0.810289,
            0.829582,
            0.858521,
            0.868167,
            0.88746,
            0.88746,
            0.88746,
            0.892283,
            0.897106,
            0.897106,
            0.916399,
            0.921222,
            0.926045,
            0.954984,
            0.96463,
            0.96,
            0.96,
            0.977,
            0.977,
            0.977,
            0.977,
            0.994,
            0.994,
            0.994,
            0.994,
            0.994,
            1.011,
            1.011,
            1.011,
            1.029,
            1.029,
            1.029,
            1.029,
            1.029,
            1.046,
            1.046,
            1.046,
            1.046,
            1.046,
            1.046,
            1.046,
            1.063,
            1.063,
            1.063,
            1.063,
            1.063,
            1.063,
            1.063,
            1.063,
            1.063,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.08,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.097,
            1.114,
            1.114,
            1.114,
            1.114,
        ],
    )


@component.add(
    name="IMV_MnCrNi_recycled_1",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_mncrni_recycled_1():
    return np.interp(
        time(),
        [
            1850.0,
            1851.0,
            1852.0,
            1853.0,
            1854.0,
            1855.0,
            1856.0,
            1857.0,
            1858.0,
            1859.0,
            1860.0,
            1861.0,
            1862.0,
            1863.0,
            1864.0,
            1865.0,
            1866.0,
            1867.0,
            1868.0,
            1869.0,
            1870.0,
            1871.0,
            1872.0,
            1873.0,
            1874.0,
            1875.0,
            1876.0,
            1877.0,
            1878.0,
            1879.0,
            1880.0,
            1881.0,
            1882.0,
            1883.0,
            1884.0,
            1885.0,
            1886.0,
            1887.0,
            1888.0,
            1889.0,
            1890.0,
            1891.0,
            1892.0,
            1893.0,
            1894.0,
            1895.0,
            1896.0,
            1897.0,
            1898.0,
            1899.0,
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
            2101.0,
            2102.0,
            2103.0,
            2104.0,
            2105.0,
            2106.0,
            2107.0,
            2108.0,
            2109.0,
            2110.0,
            2111.0,
            2112.0,
            2113.0,
            2114.0,
            2115.0,
            2116.0,
            2117.0,
            2118.0,
            2119.0,
            2120.0,
            2121.0,
            2122.0,
            2123.0,
            2124.0,
            2125.0,
            2126.0,
            2127.0,
            2128.0,
            2129.0,
            2130.0,
            2131.0,
            2132.0,
            2133.0,
            2134.0,
            2135.0,
            2136.0,
            2137.0,
            2138.0,
            2139.0,
            2140.0,
            2141.0,
            2142.0,
            2143.0,
            2144.0,
            2145.0,
            2146.0,
            2147.0,
            2148.0,
            2149.0,
            2150.0,
            2151.0,
            2152.0,
            2153.0,
            2154.0,
            2155.0,
            2156.0,
            2157.0,
            2158.0,
            2159.0,
            2160.0,
            2161.0,
            2162.0,
            2163.0,
            2164.0,
            2165.0,
            2166.0,
            2167.0,
            2168.0,
            2169.0,
            2170.0,
            2171.0,
            2172.0,
            2173.0,
            2174.0,
            2175.0,
            2176.0,
            2177.0,
            2178.0,
            2179.0,
            2180.0,
            2181.0,
            2182.0,
            2183.0,
            2184.0,
            2185.0,
            2186.0,
            2187.0,
            2188.0,
            2189.0,
            2190.0,
            2191.0,
            2192.0,
            2193.0,
            2194.0,
            2195.0,
            2196.0,
            2197.0,
            2198.0,
            2199.0,
            2200.0,
            2201.0,
            2202.0,
            2203.0,
            2204.0,
            2205.0,
            2206.0,
            2207.0,
            2208.0,
            2209.0,
            2210.0,
            2211.0,
            2212.0,
            2213.0,
            2214.0,
            2215.0,
            2216.0,
            2217.0,
            2218.0,
            2219.0,
            2220.0,
            2221.0,
            2222.0,
            2223.0,
            2224.0,
            2225.0,
            2226.0,
            2227.0,
            2228.0,
            2229.0,
            2230.0,
            2231.0,
            2232.0,
            2233.0,
            2234.0,
            2235.0,
            2236.0,
            2237.0,
            2238.0,
            2239.0,
            2240.0,
            2241.0,
            2242.0,
            2243.0,
            2244.0,
            2245.0,
            2246.0,
            2247.0,
            2248.0,
            2249.0,
            2250.0,
        ],
        [
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            1.80958e-04,
            1.57728e-03,
            3.54416e-03,
            5.50539e-03,
            7.20596e-03,
            8.94499e-03,
            1.15414e-02,
            1.42329e-02,
            1.66411e-02,
            1.86764e-02,
            2.15427e-02,
            2.56579e-02,
            3.05147e-02,
            3.61632e-02,
            4.32848e-02,
            5.27709e-02,
            6.45741e-02,
            7.90145e-02,
            9.24796e-02,
            9.13789e-02,
            8.24778e-02,
            7.85877e-02,
            8.63588e-02,
            9.64546e-02,
            1.12713e-01,
            1.32842e-01,
            1.54660e-01,
            1.76964e-01,
            1.95936e-01,
            2.14401e-01,
            2.37175e-01,
            2.62212e-01,
            2.87586e-01,
            3.11882e-01,
            3.37113e-01,
            3.75542e-01,
            3.95334e-01,
            4.04544e-01,
            4.40657e-01,
            4.71116e-01,
            4.91000e-01,
            5.22685e-01,
            5.14766e-01,
            5.83038e-01,
            6.51721e-01,
            7.29273e-01,
            8.04528e-01,
            9.43032e-01,
            1.08088e00,
            1.25936e00,
            1.37472e00,
            1.47351e00,
            1.54777e00,
            1.62870e00,
            1.75552e00,
            1.85090e00,
            1.94533e00,
            2.04516e00,
            2.14839e00,
            2.26919e00,
            2.40167e00,
            2.57005e00,
            2.69310e00,
            2.82328e00,
            2.95243e00,
            3.08683e00,
            3.22634e00,
            3.36835e00,
            3.50782e00,
            3.64518e00,
            3.77863e00,
            3.91049e00,
            4.03800e00,
            4.16925e00,
            4.30512e00,
            4.44853e00,
            4.59841e00,
            4.76155e00,
            4.93726e00,
            5.12160e00,
            5.31864e00,
            5.51989e00,
            5.72650e00,
            5.93543e00,
            6.14222e00,
            6.35049e00,
            6.56525e00,
            6.78496e00,
            7.01053e00,
            7.23150e00,
            7.46411e00,
            7.71337e00,
            7.95541e00,
            8.20566e00,
            8.46012e00,
            8.70208e00,
            8.94369e00,
            9.19746e00,
            9.45351e00,
            9.70408e00,
            1.00230e01,
            1.03994e01,
            1.07774e01,
            1.11306e01,
            1.15936e01,
            1.21095e01,
            1.26079e01,
            1.31381e01,
            1.36930e01,
            1.42892e01,
            1.48790e01,
            1.54424e01,
            1.61674e01,
            1.67783e01,
            1.84511e01,
            1.93395e01,
            1.96199e01,
            1.95845e01,
            1.96539e01,
            2.00775e01,
            2.03985e01,
            2.03689e01,
            2.02419e01,
            2.00248e01,
            2.03681e01,
            2.09421e01,
            2.16490e01,
            2.23859e01,
            2.31433e01,
            2.48776e01,
            2.65890e01,
            2.83991e01,
            2.93582e01,
            3.00320e01,
            3.06888e01,
            3.13349e01,
            3.19357e01,
            3.24738e01,
            3.29031e01,
            3.32744e01,
            3.35880e01,
            3.38817e01,
            3.41384e01,
            3.43703e01,
            3.45835e01,
            3.47584e01,
            3.49031e01,
            3.50205e01,
            3.51216e01,
            3.52089e01,
            3.52861e01,
            3.53593e01,
            3.54212e01,
            3.54751e01,
            3.55373e01,
            3.55977e01,
            3.56651e01,
            3.57159e01,
            3.57280e01,
            3.56848e01,
            3.56291e01,
            3.55969e01,
            3.55649e01,
            3.54820e01,
            3.53890e01,
            3.52999e01,
            3.52218e01,
            3.51625e01,
            3.51040e01,
            3.50180e01,
            3.49344e01,
            3.48577e01,
            3.47710e01,
            3.46990e01,
            3.46331e01,
            3.46524e01,
            3.47037e01,
            3.47574e01,
            3.47792e01,
            3.47861e01,
            3.48364e01,
            3.48838e01,
            3.49413e01,
            3.50115e01,
            3.50916e01,
            3.51703e01,
            3.51975e01,
            3.52471e01,
            3.52664e01,
            3.53999e01,
            3.55869e01,
            3.57592e01,
            3.59228e01,
            3.60333e01,
            3.61260e01,
            3.61354e01,
            3.61314e01,
            3.61368e01,
            3.61439e01,
            3.61151e01,
            3.60879e01,
            3.60755e01,
            3.60854e01,
            3.61141e01,
            3.61587e01,
            3.62168e01,
            3.62794e01,
            3.63430e01,
            3.64081e01,
            3.64763e01,
            3.65435e01,
            3.65815e01,
            3.66655e01,
            3.68088e01,
            3.69049e01,
            3.70763e01,
            3.72598e01,
            3.74005e01,
            3.75115e01,
            3.76066e01,
            3.76007e01,
            3.77299e01,
            3.78811e01,
            3.80250e01,
            3.81138e01,
            3.82915e01,
            3.86695e01,
            3.91504e01,
            3.95230e01,
            3.98117e01,
            4.00579e01,
            4.02605e01,
            4.05260e01,
            4.07463e01,
            4.07909e01,
            4.08169e01,
            4.07319e01,
            4.06241e01,
            4.05348e01,
            4.04635e01,
            4.04029e01,
            4.03881e01,
            4.03142e01,
            4.02114e01,
            4.01080e01,
            3.99911e01,
            3.98695e01,
            3.97813e01,
            3.96675e01,
            3.96073e01,
            3.94814e01,
            3.92647e01,
            3.91075e01,
            3.90745e01,
            3.91372e01,
            3.92220e01,
            3.92588e01,
            3.93483e01,
            3.94538e01,
            3.95485e01,
            3.96224e01,
            3.96855e01,
            3.98270e01,
            4.00132e01,
            4.02384e01,
            4.03708e01,
            4.04836e01,
            4.05403e01,
            4.05654e01,
            4.06063e01,
            4.06492e01,
            4.07045e01,
            4.05793e01,
            4.03635e01,
            4.01728e01,
            3.98065e01,
            3.94356e01,
            3.93313e01,
            3.91249e01,
            3.91024e01,
            3.90825e01,
            3.89524e01,
            3.89386e01,
            3.87803e01,
            3.85565e01,
            3.85495e01,
            3.85250e01,
            3.83293e01,
            3.80615e01,
            3.79944e01,
            3.80035e01,
            3.78650e01,
            3.76344e01,
            3.74137e01,
            3.70591e01,
            3.69657e01,
            3.70305e01,
            3.70053e01,
            3.73562e01,
            3.74123e01,
            3.74872e01,
            3.75393e01,
            3.75246e01,
            3.76824e01,
            3.82967e01,
            3.84847e01,
            3.84482e01,
            3.81604e01,
            3.80032e01,
            3.78358e01,
            3.76866e01,
            3.75582e01,
            3.75926e01,
            3.76457e01,
            3.77459e01,
            3.76667e01,
            3.75185e01,
            3.75222e01,
            3.78020e01,
            3.79476e01,
            3.78590e01,
            3.77602e01,
            3.78783e01,
            3.77420e01,
            3.77137e01,
            3.77804e01,
            3.79612e01,
            3.81461e01,
            3.83680e01,
            3.85071e01,
            3.86122e01,
            3.86928e01,
            3.87799e01,
            3.88442e01,
            3.88832e01,
            3.88985e01,
            3.88900e01,
            3.88643e01,
            3.87700e01,
            3.85574e01,
            3.79626e01,
            3.83643e01,
            3.85079e01,
            3.78748e01,
            3.72832e01,
            3.68273e01,
            3.64624e01,
            3.61504e01,
            3.58908e01,
            3.57622e01,
            3.56802e01,
            3.55848e01,
            3.55541e01,
            3.56224e01,
            3.56520e01,
            3.56281e01,
            3.55974e01,
            3.55686e01,
            3.55516e01,
            3.55567e01,
            3.55376e01,
            3.55845e01,
            3.55236e01,
            3.54687e01,
            3.54331e01,
            3.54855e01,
            3.55110e01,
            3.55654e01,
        ],
    )


@component.add(
    name="IMV_SCRAPPING_RATE",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_scrapping_rate():
    return np.interp(
        time(),
        [
            1850.0,
            1851.0,
            1852.0,
            1853.0,
            1854.0,
            1855.0,
            1856.0,
            1857.0,
            1858.0,
            1859.0,
            1860.0,
            1861.0,
            1862.0,
            1863.0,
            1864.0,
            1865.0,
            1866.0,
            1867.0,
            1868.0,
            1869.0,
            1870.0,
            1871.0,
            1872.0,
            1873.0,
            1874.0,
            1875.0,
            1876.0,
            1877.0,
            1878.0,
            1879.0,
            1880.0,
            1881.0,
            1882.0,
            1883.0,
            1884.0,
            1885.0,
            1886.0,
            1887.0,
            1888.0,
            1889.0,
            1890.0,
            1891.0,
            1892.0,
            1893.0,
            1894.0,
            1895.0,
            1896.0,
            1897.0,
            1898.0,
            1899.0,
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
            2101.0,
            2102.0,
            2103.0,
            2104.0,
            2105.0,
            2106.0,
            2107.0,
            2108.0,
            2109.0,
            2110.0,
            2111.0,
            2112.0,
            2113.0,
            2114.0,
            2115.0,
            2116.0,
            2117.0,
            2118.0,
            2119.0,
            2120.0,
            2121.0,
            2122.0,
            2123.0,
            2124.0,
            2125.0,
            2126.0,
            2127.0,
            2128.0,
            2129.0,
            2130.0,
            2131.0,
            2132.0,
            2133.0,
            2134.0,
            2135.0,
            2136.0,
            2137.0,
            2138.0,
            2139.0,
            2140.0,
            2141.0,
            2142.0,
            2143.0,
            2144.0,
            2145.0,
            2146.0,
            2147.0,
            2148.0,
            2149.0,
            2150.0,
            2151.0,
            2152.0,
            2153.0,
            2154.0,
            2155.0,
            2156.0,
            2157.0,
            2158.0,
            2159.0,
            2160.0,
            2161.0,
            2162.0,
            2163.0,
            2164.0,
            2165.0,
            2166.0,
            2167.0,
            2168.0,
            2169.0,
            2170.0,
            2171.0,
            2172.0,
            2173.0,
            2174.0,
            2175.0,
            2176.0,
            2177.0,
            2178.0,
            2179.0,
            2180.0,
            2181.0,
            2182.0,
            2183.0,
            2184.0,
            2185.0,
            2186.0,
            2187.0,
            2188.0,
            2189.0,
            2190.0,
            2191.0,
            2192.0,
            2193.0,
            2194.0,
            2195.0,
            2196.0,
            2197.0,
            2198.0,
            2199.0,
            2200.0,
            2201.0,
            2202.0,
            2203.0,
            2204.0,
            2205.0,
            2206.0,
            2207.0,
            2208.0,
            2209.0,
            2210.0,
            2211.0,
            2212.0,
            2213.0,
            2214.0,
            2215.0,
            2216.0,
            2217.0,
            2218.0,
            2219.0,
            2220.0,
            2221.0,
            2222.0,
            2223.0,
            2224.0,
            2225.0,
            2226.0,
            2227.0,
            2228.0,
            2229.0,
            2230.0,
            2231.0,
            2232.0,
            2233.0,
            2234.0,
            2235.0,
            2236.0,
            2237.0,
            2238.0,
            2239.0,
            2240.0,
            2241.0,
            2242.0,
            2243.0,
            2244.0,
            2245.0,
            2246.0,
            2247.0,
            2248.0,
            2249.0,
            2250.0,
        ],
        [
            0.045338,
            0.045177,
            0.045016,
            0.045016,
            0.044695,
            0.044373,
            0.044051,
            0.044051,
            0.043891,
            0.043087,
            0.042765,
            0.042444,
            0.042444,
            0.041479,
            0.041479,
            0.041158,
            0.040836,
            0.040514,
            0.040193,
            0.040193,
            0.03955,
            0.03955,
            0.03955,
            0.039228,
            0.038585,
            0.038585,
            0.038264,
            0.037942,
            0.037942,
            0.037942,
            0.037621,
            0.03746,
            0.037299,
            0.037299,
            0.037299,
            0.036977,
            0.036977,
            0.036977,
            0.036656,
            0.036656,
            0.036334,
            0.036334,
            0.036334,
            0.036334,
            0.036334,
            0.036013,
            0.036013,
            0.036013,
            0.036013,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.03537,
            0.035691,
            0.035691,
            0.035691,
            0.065595,
            0.065595,
            0.065595,
            0.065595,
            0.065595,
            0.046945,
            0.038264,
            0.035691,
            0.035691,
            0.034084,
            0.034084,
            0.034405,
            0.034727,
            0.034727,
            0.035048,
            0.035048,
            0.035691,
            0.035852,
            0.036334,
            0.036334,
            0.036334,
            0.037942,
            0.038585,
            0.039228,
            0.039228,
            0.040514,
            0.042765,
            0.044373,
            0.044373,
            0.096141,
            0.096141,
            0.096141,
            0.042444,
            0.042765,
            0.042122,
            0.041801,
            0.041801,
            0.041479,
            0.041158,
            0.039871,
            0.039228,
            0.038585,
            0.038585,
            0.037621,
            0.036977,
            0.036656,
            0.036013,
            0.036013,
            0.035691,
            0.034405,
            0.034405,
            0.034084,
            0.033762,
            0.033762,
            0.033441,
            0.033441,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.033119,
            0.032154,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.031833,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032154,
            0.032219,
            0.032283,
            0.032347,
            0.032412,
            0.032476,
            0.032476,
            0.032476,
            0.032476,
            0.032583,
            0.03269,
            0.032797,
            0.032797,
            0.032797,
            0.032797,
            0.032905,
            0.033012,
            0.033119,
            0.033119,
            0.033199,
            0.03328,
            0.03336,
            0.033441,
            0.033441,
            0.033441,
            0.033548,
            0.033655,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033762,
            0.033869,
            0.033976,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034084,
            0.034244,
            0.034405,
            0.034405,
            0.034405,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.034727,
            0.035048,
            0.035048,
            0.035048,
            0.035048,
            0.035048,
            0.03537,
            0.03537,
            0.035691,
            0.035691,
            0.035691,
            0.035691,
            0.035691,
            0.036013,
            0.036334,
            0.036495,
            0.036656,
            0.036656,
            0.036656,
            0.036656,
            0.036736,
            0.036817,
            0.036897,
            0.036977,
            0.036977,
            0.036977,
            0.037138,
            0.037299,
            0.037299,
            0.037299,
            0.037621,
            0.037621,
            0.037781,
            0.037942,
            0.037942,
            0.037942,
            0.037942,
            0.038049,
            0.038156,
            0.038264,
            0.038264,
            0.038264,
            0.038585,
            0.038585,
            0.038907,
            0.039228,
            0.039228,
            0.039228,
            0.039228,
            0.039228,
            0.03955,
            0.03955,
            0.03955,
            0.03955,
            0.03955,
            0.03955,
            0.03955,
            0.039711,
            0.039871,
            0.039871,
            0.039871,
            0.040193,
            0.040193,
            0.040193,
            0.040193,
            0.040354,
            0.040514,
            0.040514,
            0.040514,
            0.040836,
            0.040514,
            0.040675,
            0.040836,
            0.041158,
            0.041158,
            0.041158,
            0.041158,
            0.041158,
            0.041158,
            0.041158,
            0.041479,
            0.041479,
            0.041479,
            0.041479,
            0.041801,
            0.041801,
            0.041801,
            0.041961,
            0.042122,
            0.042444,
            0.042444,
            0.042765,
            0.042765,
            0.042765,
            0.042765,
            0.042926,
            0.043087,
            0.043408,
            0.043408,
            0.04373,
            0.04373,
            0.04373,
            0.04373,
            0.044051,
            0.044051,
            0.044051,
            0.044051,
            0.044051,
            0.044373,
            0.044373,
            0.044373,
            0.044695,
            0.044695,
            0.044695,
            0.045016,
            0.045016,
            0.045016,
            0.045016,
            0.045016,
            0.045338,
            0.045338,
            0.045498,
            0.045659,
            0.045659,
            0.045659,
            0.045659,
            0.04582,
            0.045981,
            0.045981,
            0.046302,
            0.046302,
            0.046302,
            0.046463,
            0.046624,
            0.046624,
            0.046624,
            0.046624,
            0.046624,
            0.046624,
            0.046624,
            0.1,
        ],
    )


@component.add(
    name="IMV_SS_MnCrNi_FRACTION_RECYCLED_TO_STAINLESS_STEEL",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_ss_mncrni_fraction_recycled_to_stainless_steel():
    """
    From the stainless steel module.
    """
    return np.interp(
        time(),
        [
            1850.0,
            1851.0,
            1852.0,
            1853.0,
            1854.0,
            1855.0,
            1856.0,
            1857.0,
            1858.0,
            1859.0,
            1860.0,
            1861.0,
            1862.0,
            1863.0,
            1864.0,
            1865.0,
            1866.0,
            1867.0,
            1868.0,
            1869.0,
            1870.0,
            1871.0,
            1872.0,
            1873.0,
            1874.0,
            1875.0,
            1876.0,
            1877.0,
            1878.0,
            1879.0,
            1880.0,
            1881.0,
            1882.0,
            1883.0,
            1884.0,
            1885.0,
            1886.0,
            1887.0,
            1888.0,
            1889.0,
            1890.0,
            1891.0,
            1892.0,
            1893.0,
            1894.0,
            1895.0,
            1896.0,
            1897.0,
            1898.0,
            1899.0,
            1900.0,
            1901.0,
            1902.0,
            1903.0,
            1904.0,
            1905.0,
            1906.0,
            1907.0,
            1908.0,
            1909.0,
            1910.0,
            1911.0,
            1912.0,
            1913.0,
            1914.0,
            1915.0,
            1916.0,
            1917.0,
            1918.0,
            1919.0,
            1920.0,
            1921.0,
            1922.0,
            1923.0,
            1924.0,
            1925.0,
            1926.0,
            1927.0,
            1928.0,
            1929.0,
            1930.0,
            1931.0,
            1932.0,
            1933.0,
            1934.0,
            1935.0,
            1936.0,
            1937.0,
            1938.0,
            1939.0,
            1940.0,
            1941.0,
            1942.0,
            1943.0,
            1944.0,
            1945.0,
            1946.0,
            1947.0,
            1948.0,
            1949.0,
            1950.0,
            1951.0,
            1952.0,
            1953.0,
            1954.0,
            1955.0,
            1956.0,
            1957.0,
            1958.0,
            1959.0,
            1960.0,
            1961.0,
            1962.0,
            1963.0,
            1964.0,
            1965.0,
            1966.0,
            1967.0,
            1968.0,
            1969.0,
            1970.0,
            1971.0,
            1972.0,
            1973.0,
            1974.0,
            1975.0,
            1976.0,
            1977.0,
            1978.0,
            1979.0,
            1980.0,
            1981.0,
            1982.0,
            1983.0,
            1984.0,
            1985.0,
            1986.0,
            1987.0,
            1988.0,
            1989.0,
            1990.0,
            1991.0,
            1992.0,
            1993.0,
            1994.0,
            1995.0,
            1996.0,
            1997.0,
            1998.0,
            1999.0,
            2000.0,
            2001.0,
            2002.0,
            2003.0,
            2004.0,
            2005.0,
            2006.0,
            2007.0,
            2008.0,
            2009.0,
            2010.0,
            2011.0,
            2012.0,
            2013.0,
            2014.0,
            2015.0,
            2016.0,
            2017.0,
            2018.0,
            2019.0,
            2020.0,
            2021.0,
            2022.0,
            2023.0,
            2024.0,
            2025.0,
            2026.0,
            2027.0,
            2028.0,
            2029.0,
            2030.0,
            2031.0,
            2032.0,
            2033.0,
            2034.0,
            2035.0,
            2036.0,
            2037.0,
            2038.0,
            2039.0,
            2040.0,
            2041.0,
            2042.0,
            2043.0,
            2044.0,
            2045.0,
            2046.0,
            2047.0,
            2048.0,
            2049.0,
            2050.0,
            2051.0,
            2052.0,
            2053.0,
            2054.0,
            2055.0,
            2056.0,
            2057.0,
            2058.0,
            2059.0,
            2060.0,
            2061.0,
            2062.0,
            2063.0,
            2064.0,
            2065.0,
            2066.0,
            2067.0,
            2068.0,
            2069.0,
            2070.0,
            2071.0,
            2072.0,
            2073.0,
            2074.0,
            2075.0,
            2076.0,
            2077.0,
            2078.0,
            2079.0,
            2080.0,
            2081.0,
            2082.0,
            2083.0,
            2084.0,
            2085.0,
            2086.0,
            2087.0,
            2088.0,
            2089.0,
            2090.0,
            2091.0,
            2092.0,
            2093.0,
            2094.0,
            2095.0,
            2096.0,
            2097.0,
            2098.0,
            2099.0,
            2100.0,
        ],
        [
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649,
            0.649457,
            0.650452,
            0.651072,
            0.651191,
            0.650825,
            0.650681,
            0.650285,
            0.649203,
            0.646659,
            0.643479,
            0.641059,
            0.637789,
            0.632012,
            0.631,
            0.631,
            0.631774,
            0.68952,
            0.757625,
            0.851395,
            0.800391,
            0.748843,
            0.701459,
            0.676,
            0.631,
            0.581,
            0.548333,
            0.481725,
            0.461648,
            0.383,
            0.383,
            0.427196,
            0.461276,
            0.47213,
            0.483,
            0.50183,
            0.494826,
            0.483366,
            0.477,
            0.457584,
            0.404566,
            0.393857,
            0.383,
            0.351825,
            0.311099,
            0.327115,
            0.307667,
            0.296411,
            0.300105,
            0.297911,
            0.29967,
            0.307667,
            0.322776,
            0.360068,
            0.35393,
            0.310286,
            0.307667,
            0.296263,
            0.302784,
            0.300283,
            0.302373,
            0.303614,
            0.305203,
            0.307667,
            0.342333,
            0.342333,
            0.373023,
            0.39963,
            0.420993,
            0.404544,
            0.389784,
            0.391014,
            0.405017,
            0.442667,
            0.473011,
            0.474744,
            0.495705,
            0.489693,
            0.478157,
            0.470693,
            0.477,
            0.498938,
            0.512976,
            0.524789,
            0.526906,
            0.536385,
            0.535526,
            0.525673,
            0.517222,
            0.515682,
            0.529186,
            0.548333,
            0.529332,
            0.520348,
            0.526659,
            0.528869,
            0.536151,
            0.54518,
            0.603243,
            0.6086,
            0.59864,
            0.59,
            0.59,
            0.581,
            0.59,
            0.581,
            0.589373,
            0.602178,
            0.601392,
            0.59,
            0.584494,
            0.585081,
            0.614981,
            0.613835,
            0.617545,
            0.59839,
            0.465,
            0.475897,
            0.478239,
            0.480917,
            0.48976,
            0.484651,
            0.47247,
            0.46877,
            0.465,
            0.453527,
            0.461234,
            0.466181,
            0.451914,
            0.434672,
            0.400292,
            0.377763,
            0.393742,
            0.395287,
            0.361914,
            0.361633,
            0.361206,
            0.367213,
            0.375965,
            0.380004,
            0.373086,
            0.382703,
            0.373277,
            0.376173,
            0.379177,
            0.385519,
            0.372106,
            0.359619,
            0.366164,
            0.37623,
            0.383,
            0.395702,
            0.402667,
            0.408259,
            0.408031,
            0.409304,
            0.408747,
            0.404709,
            0.408122,
            0.417709,
            0.420975,
            0.430876,
            0.437605,
            0.452164,
            0.463061,
            0.467606,
            0.47302,
            0.476445,
            0.48313,
            0.488557,
            0.491223,
            0.492243,
            0.492816,
            0.49392,
            0.496728,
            0.50036,
            0.505427,
            0.521144,
            0.529731,
            0.542524,
            0.538622,
            0.544063,
            0.555734,
            0.57284,
            0.587097,
            0.59,
            0.595403,
            0.601054,
            0.601942,
            0.602312,
            0.607179,
            0.612591,
            0.619235,
            0.618829,
            0.621116,
            0.625023,
            0.627928,
            0.631,
            0.635865,
            0.640483,
            0.649033,
            0.656871,
            0.652265,
            0.652139,
            0.652531,
            0.653288,
            0.661717,
            0.660507,
            0.66701,
            0.669167,
            0.672046,
            0.677871,
            0.676,
            0.679,
            0.68166,
            0.681661,
            0.690399,
            0.68805,
            0.692105,
        ],
    )


@component.add(
    name="IMV_STAINLESS_STEEL_LOST_TO_IRON_SCRAP",
    units="Mt/Years",
    comp_type="Auxiliary",
    comp_subtype="with Lookup",
    depends_on={"time": 1},
)
def imv_stainless_steel_lost_to_iron_scrap():
    """
    Estimated stainless steel scrap lost into the waste iron stream. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return np.interp(
        time(),
        [
            0.0,
            8.4,
            16.8,
            25.2,
            33.6,
            42.0,
            50.4,
            58.8,
            67.2,
            75.6,
            84.0,
            92.4,
            100.8,
            109.2,
            117.6,
            126.0,
            134.4,
            142.8,
            151.2,
            159.6,
            168.0,
            176.4,
            184.8,
            193.2,
            201.6,
            210.0,
            218.4,
            226.8,
            235.2,
            243.6,
            252.0,
            260.4,
            268.8,
            277.2,
            285.6,
            294.0,
            302.4,
            310.8,
            319.2,
            327.6,
            336.0,
            344.4,
            352.8,
            361.2,
            369.6,
            378.0,
            386.4,
            394.8,
            403.2,
            411.6,
            420.0,
            428.4,
            436.8,
            445.2,
            453.6,
            462.0,
            470.4,
            478.8,
            487.2,
            495.6,
            504.0,
            512.4,
            520.8,
            529.2,
            537.6,
            546.0,
            554.4,
            562.8,
            571.2,
            579.6,
            588.0,
            596.4,
            604.8,
            613.2,
            621.6,
            630.0,
            638.4,
            646.8,
            655.2,
            663.6,
            672.0,
            680.4,
            688.8,
            697.2,
            705.6,
            714.0,
            722.4,
            730.8,
            739.2,
            747.6,
            756.0,
            764.4,
            772.8,
            781.2,
            789.6,
            798.0,
            806.4,
            814.8,
            823.2,
            831.6,
            840.0,
            848.4,
            856.8,
            865.2,
            873.6,
            882.0,
            890.4,
            898.8,
            907.2,
            915.6,
            924.0,
            932.4,
            940.8,
            949.2,
            957.6,
            966.0,
            974.4,
            982.8,
            991.2,
            999.6,
            1008.0,
            1016.4,
            1024.8,
            1033.2,
            1041.6,
            1050.0,
            1058.4,
            1066.8,
            1075.2,
            1083.6,
            1092.0,
            1100.4,
            1108.8,
            1117.2,
            1125.6,
            1134.0,
            1142.4,
            1150.8,
            1159.2,
            1167.6,
            1176.0,
            1184.4,
            1192.8,
            1201.2,
            1209.6,
            1218.0,
            1226.4,
            1234.8,
            1243.2,
            1251.6,
            1260.0,
            1268.4,
            1276.8,
            1285.2,
            1293.6,
            1302.0,
            1310.4,
            1318.8,
            1327.2,
            1335.6,
            1344.0,
            1352.4,
            1360.8,
            1369.2,
            1377.6,
            1386.0,
            1394.4,
            1402.8,
            1411.2,
            1419.6,
            1428.0,
            1436.4,
            1444.8,
            1453.2,
            1461.6,
            1470.0,
            1478.4,
            1486.8,
            1495.2,
            1503.6,
            1512.0,
            1520.4,
            1528.8,
            1537.2,
            1545.6,
            1554.0,
            1562.4,
            1570.8,
            1579.2,
            1587.6,
            1596.0,
            1604.4,
            1612.8,
            1621.2,
            1629.6,
            1638.0,
            1646.4,
            1654.8,
            1663.2,
            1671.6,
            1680.0,
            1688.4,
            1696.8,
            1705.2,
            1713.6,
            1722.0,
            1730.4,
            1738.8,
            1747.2,
            1755.6,
            1764.0,
            1772.4,
            1780.8,
            1789.2,
            1797.6,
            1806.0,
            1814.4,
            1822.8,
            1831.2,
            1839.6,
            1848.0,
            1856.4,
            1864.8,
            1873.2,
            1881.6,
            1890.0,
            1898.4,
            1906.8,
            1915.2,
            1923.6,
            1932.0,
            1940.4,
            1948.8,
            1957.2,
            1965.6,
            1974.0,
            1982.4,
            1990.8,
            1999.2,
            2007.6,
            2016.0,
            2024.4,
            2032.8,
            2041.2,
            2049.6,
            2058.0,
            2066.4,
            2074.8,
            2083.2,
            2091.6,
            2100.0,
        ],
        [
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            0.00000e00,
            4.00000e-05,
            3.51000e-04,
            8.06000e-04,
            1.28100e-03,
            1.71200e-03,
            2.16400e-03,
            2.83300e-03,
            3.54800e-03,
            4.26000e-03,
            4.93800e-03,
            5.94100e-03,
            7.47700e-03,
            9.34600e-03,
            1.13650e-02,
            1.38650e-02,
            1.64220e-02,
            1.66300e-02,
            1.57590e-02,
            1.21180e-02,
            1.80730e-02,
            2.32350e-02,
            2.97440e-02,
            3.46000e-02,
            4.59990e-02,
            6.39240e-02,
            8.59560e-02,
            1.16077e-01,
            1.39454e-01,
            1.79332e-01,
            1.96544e-01,
            2.09129e-01,
            2.28039e-01,
            2.55545e-01,
            2.80912e-01,
            3.03427e-01,
            3.37369e-01,
            3.73911e-01,
            4.05520e-01,
            4.44260e-01,
            5.11800e-01,
            5.41248e-01,
            5.99241e-01,
            6.73200e-01,
            7.28167e-01,
            7.54783e-01,
            8.03743e-01,
            8.68140e-01,
            8.97059e-01,
            9.65032e-01,
            1.04658e00,
            1.14223e00,
            1.26289e00,
            1.37067e00,
            1.47731e00,
            1.58072e00,
            1.61212e00,
            1.69041e00,
            1.75032e00,
            1.88286e00,
            2.02244e00,
            2.20016e00,
            2.36898e00,
            2.56009e00,
            2.63741e00,
            2.90145e00,
            3.11598e00,
            3.18264e00,
            3.27754e00,
            3.50729e00,
            3.72699e00,
            3.87341e00,
            3.97427e00,
            3.94381e00,
            4.12628e00,
            4.34869e00,
            4.41896e00,
            4.71487e00,
            4.99129e00,
            5.21531e00,
            5.34558e00,
            5.42197e00,
            5.53385e00,
            5.71066e00,
            5.94762e00,
            6.05104e00,
            6.28883e00,
            6.62135e00,
            6.92310e00,
            7.09442e00,
            7.14493e00,
            7.09916e00,
            7.62858e00,
            7.96092e00,
            8.04556e00,
            8.23095e00,
            8.33487e00,
            8.43820e00,
            7.72102e00,
            7.92806e00,
            8.27805e00,
            8.56482e00,
            8.67385e00,
            9.01735e00,
            8.89398e00,
            9.30967e00,
            9.22778e00,
            9.15829e00,
            9.37045e00,
            9.75213e00,
            9.98177e00,
            1.00330e01,
            9.52271e00,
            9.72284e00,
            9.74304e00,
            1.03635e01,
            1.35199e01,
            1.30153e01,
            1.32228e01,
            1.34603e01,
            1.36274e01,
            1.41185e01,
            1.45134e01,
            1.47177e01,
            1.48733e01,
            1.52243e01,
            1.50481e01,
            1.51363e01,
            1.56371e01,
            1.62245e01,
            1.70760e01,
            1.78530e01,
            1.80362e01,
            1.87434e01,
            2.01772e01,
            2.04331e01,
            2.13988e01,
            2.22306e01,
            2.30499e01,
            2.39965e01,
            2.51282e01,
            2.55948e01,
            2.67256e01,
            2.74134e01,
            2.82331e01,
            2.88938e01,
            3.02550e01,
            3.11893e01,
            3.15064e01,
            3.20665e01,
            3.27838e01,
            3.32065e01,
            3.37077e01,
            3.39251e01,
            3.44156e01,
            3.47939e01,
            3.52618e01,
            3.58545e01,
            3.60192e01,
            3.58668e01,
            3.63491e01,
            3.63842e01,
            3.65948e01,
            3.62526e01,
            3.61038e01,
            3.62143e01,
            3.62902e01,
            3.64279e01,
            3.63918e01,
            3.65069e01,
            3.67375e01,
            3.69609e01,
            3.71564e01,
            3.72964e01,
            3.73274e01,
            3.73029e01,
            3.72114e01,
            3.67334e01,
            3.65878e01,
            3.57114e01,
            3.61054e01,
            3.57265e01,
            3.49420e01,
            3.37784e01,
            3.28339e01,
            3.29983e01,
            3.23950e01,
            3.19302e01,
            3.18996e01,
            3.18126e01,
            3.14199e01,
            3.10257e01,
            3.04489e01,
            3.04945e01,
            3.02510e01,
            2.99134e01,
            2.96873e01,
            2.94508e01,
            2.90929e01,
            2.87314e01,
            2.80948e01,
            2.77118e01,
            2.81161e01,
            2.79698e01,
            2.78867e01,
            2.78120e01,
            2.71779e01,
            2.72667e01,
            2.67492e01,
            2.65242e01,
            2.62660e01,
            2.59822e01,
            2.61319e01,
            2.58682e01,
            2.56615e01,
            2.55769e01,
            2.48675e01,
            2.49996e01,
            2.45966e01,
        ],
    )


@component.add(
    name="increase_Fe_cumulative",
    units="Mt/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_total_mining": 1},
)
def increase_fe_cumulative():
    """
    Flow to track the total amount of Fe mining.
    """
    return fe_total_mining()


@component.add(
    name="INITIAL_DELAYED_TS_Fe_PRICE",
    units="Mt",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_delayed_ts_fe_price"},
)
def initial_delayed_ts_fe_price():
    """
    The initial values for the INITIAL DELAYED TS Fe PRICE based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on numbers for in 1900 that were stratified with respect to ore metal content and relative extraction cost based on yield of extraction and energy requirements. 2005 delayed Fe price: 99,1708270334 Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return _ext_constant_initial_delayed_ts_fe_price()


_ext_constant_initial_delayed_ts_fe_price = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_TS_DELAYED_Fe_PRICE",
    {},
    _root,
    {},
    "_ext_constant_initial_delayed_ts_fe_price",
)


@component.add(
    name="INITIAL_Fe_CUMULATIVE_MINING",
    units="Mt",
    comp_type="Constant",
    comp_subtype="Normal",
)
def initial_fe_cumulative_mining():
    """
    INITIAL Fe Cumulatively mined-and produced until 2005 from ore based on Source: https://www.usgs.gov/media/files/iron-and-steel-historical-statistics-data- series-140- based on Pig iron production data
    """
    return 42511.2


@component.add(
    name="INITIAL_Fe_HIDDEN_RESOURCES",
    units="Mt",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_fe_hidden_resources"},
)
def initial_fe_hidden_resources():
    """
    The initial values for the Fe hidden stocks are based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on numbers for in 1900 that were stratified with respect to ore metal content and relative extraction cost based on yield of extraction and energy requirements. The WILLIAM, 2005 initial values are therefore the following for the hidden resources: 2005: Fe Hidden rich grade: 39077,1107881 Fe Hidden high grade: 119069,920683 Fe_Hidden_low_grade: 128992,414073 Fe_hidden_ultralow grade: 176000
    """
    return _ext_constant_initial_fe_hidden_resources()


_ext_constant_initial_fe_hidden_resources = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_Fe_HIDDEN_RESOURCES*",
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    _root,
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    "_ext_constant_initial_fe_hidden_resources",
)


@component.add(
    name="INITIAL_Fe_KNOWN_RESERVES",
    units="Mt",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_fe_known_reserves"},
)
def initial_fe_known_reserves():
    """
    The initial values for the Fe known stocks are based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on initial values from 1900 that were stratified with respect to ore metal content and relative extraction cost based on yield of extraction and energy requirements. 2005: Fe known rich grade : 16290,7482582 Fe known high grade : 12412,6104717 Fe known Low grade : 9007,58592701 Fe known ultralow : 2000 16290,7482582 12412,6104717 9007,58592701 2000
    """
    return _ext_constant_initial_fe_known_reserves()


_ext_constant_initial_fe_known_reserves = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_Fe_KNOWN_RESERVES*",
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    _root,
    {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]},
    "_ext_constant_initial_fe_known_reserves",
)


@component.add(
    name="INITIAL_Fe_PROFIT_AVEREGER",
    units="M$",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_fe_profit_avereger"},
)
def initial_fe_profit_avereger():
    """
    The initial values are based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on numbers for in 1900 that were stratified with respect to ore metal content and relative extraction cost based on yield of extraction and energy requirements. 2005 Fe profit averager 751,762030968
    """
    return _ext_constant_initial_fe_profit_avereger()


_ext_constant_initial_fe_profit_avereger = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_Fe_PROFIT_AVEREGER",
    {},
    _root,
    {},
    "_ext_constant_initial_fe_profit_avereger",
)


@component.add(
    name="INITIAL_Fe_PROSPECTING_DECISION",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_fe_prospecting_decision"},
)
def initial_fe_prospecting_decision():
    """
    The initial values are based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on initial values from 1900. 2005 Fe prospecting decision 3,2853494814 Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _ext_constant_initial_fe_prospecting_decision()


_ext_constant_initial_fe_prospecting_decision = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_Fe_PROSPECTING_DECISION",
    {},
    _root,
    {},
    "_ext_constant_initial_fe_prospecting_decision",
)


@component.add(
    name="INITIAL_Fe_SCRAP",
    units="Mt",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_fe_scrap"},
)
def initial_fe_scrap():
    """
    The initial values are based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on initial values from 1900. 2005 Fe Scrapped 1598,72975687 Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return _ext_constant_initial_fe_scrap()


_ext_constant_initial_fe_scrap = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_Fe_SCRAP",
    {},
    _root,
    {},
    "_ext_constant_initial_fe_scrap",
)


@component.add(
    name="INITIAL_Fe_SHORT",
    units="Mt",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_fe_short"},
)
def initial_fe_short():
    """
    The initial values for the Fe in society short term are based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on initial values from 1900 that were stratified with respect to ore metal content and relative extraction cost based on yield of extraction and energy requirements. 2005: Fe short: 46,1561732363 Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return _ext_constant_initial_fe_short()


_ext_constant_initial_fe_short = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_Fe_SHORT",
    {},
    _root,
    {},
    "_ext_constant_initial_fe_short",
)


@component.add(
    name="INITIAL_Fe_SOCIETY_INTERMEDIATE_TERM",
    units="Mt",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_fe_society_intermediate_term"},
)
def initial_fe_society_intermediate_term():
    """
    The initial values for the Fe in society intermediate term are based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on numbers for in 1900 that were stratified with respect to ore metal content and relative extraction cost based on yield of extraction and energy requirements. 2005 Fe society intermediate term 1346,74378069 Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return _ext_constant_initial_fe_society_intermediate_term()


_ext_constant_initial_fe_society_intermediate_term = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_Fe_SOCIETY_INTERMEDIATE_TERM",
    {},
    _root,
    {},
    "_ext_constant_initial_fe_society_intermediate_term",
)


@component.add(
    name="INITIAL_Fe_SOCIETY_LONG_TERM",
    units="Mt",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_fe_society_long_term"},
)
def initial_fe_society_long_term():
    """
    The initial values for the Fe in society long term stocks are based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on numbers for in 1900 that were stratified with respect to ore metal content and relative extraction cost based on yield of extraction and energy requirements. 2005: Fe society long term 9631,70326704 Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return _ext_constant_initial_fe_society_long_term()


_ext_constant_initial_fe_society_long_term = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_Fe_SOCIETY_LONG_TERM",
    {},
    _root,
    {},
    "_ext_constant_initial_fe_society_long_term",
)


@component.add(
    name="INITIAL_Fe_TRADE_MARKET",
    units="Mt",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_initial_fe_trade_market"},
)
def initial_fe_trade_market():
    """
    The initial values for the oil hidden stocks are based on simulation outputs from the world7 for the year 2005. The world7 outputs are based on numbers for in 1900 that were stratified with respect to ore metal content and relative extraction cost based on yield of extraction and energy requirements. 2005: Fe trade market: 3656,83461445 Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _ext_constant_initial_fe_trade_market()


_ext_constant_initial_fe_trade_market = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "INITIAL_Fe_TRADE_MARKET",
    {},
    _root,
    {},
    "_ext_constant_initial_fe_trade_market",
)


@component.add(
    name="Mining_rate_drive",
    units="1/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "fe_profit_responce": 1,
        "fe_mining_technology": 1,
        "coefficients_fe_mining": 1,
    },
)
def mining_rate_drive():
    """
    The function that pushes for more extraction as profits rise. The drive from desire of more profits (Greed?)
    """
    return fe_profit_responce() * fe_mining_technology() * coefficients_fe_mining()


@component.add(
    name="mining_signal_out",
    units="M$/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_profit_averager": 1, "averaging_time": 1},
)
def mining_signal_out():
    """
    Response take out from averager. Averaged over 1 year. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication.
    """
    return fe_profit_averager() / averaging_time()


@component.add(
    name="PRICE_AVERAGING_TIME",
    units="Years",
    comp_type="Constant",
    comp_subtype="Normal",
)
def price_averaging_time():
    """
    Averaging over one year.
    """
    return 1


@component.add(
    name="prospecting_activity",
    units="DMNL",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_price_economy": 5, "coefficients_prospecting_activity": 4},
)
def prospecting_activity():
    """
    Activity regarding prospecting is effected by the Fe price. With a higher price the prospecting activity, the will to prospect is rising with lower price the will to prospect is lower since the profit incentive is lower. Curve originates from World7. In world7 variables were graphical variables. Coefficients are derived from curve fitting the graphical variables. if fe price per ton <60 then (y = 0,0085e0,0507x) else (y = 0,0405e0,0214x) IF Fe_price_$_per_ton<60 THEN COEFFICIENTS_PROSPECTING_ACTIVITY[A_LINEAR_LOG_FIT;EQUATION_ONE]*EXP(COEFFI CIENTS_PROSPECTING_ACTIVITY[B_LINEAR_LOG_FIT;EQUATION_ONE]*Fe_price_$_per_t on) ELSE (IF Fe_price_$_per_ton>60 AND Fe_price_$_per_ton<1 THEN COEFFICIENTS_PROSPECTING_ACTIVITY[A_LINEAR_LOG_FIT;EQUATION_TWO]*EXP(COEFFI CIENTS_PROSPECTING_ACTIVITY[B_LINEAR_LOG_FIT;EQUATION_TWO]*Fe_price_$_per_t on) ELSE 1) Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return if_then_else(
        fe_price_economy() < 60,
        lambda: float(
            coefficients_prospecting_activity().loc["A_LINEAR_LOG_FIT", "EQUATION_ONE"]
        )
        * np.exp(
            float(
                coefficients_prospecting_activity().loc[
                    "B_LINEAR_LOG_FIT", "EQUATION_ONE"
                ]
            )
            * fe_price_economy()
        ),
        lambda: if_then_else(
            np.logical_and(fe_price_economy() > 60, fe_price_economy() < 150),
            lambda: float(
                coefficients_prospecting_activity().loc[
                    "A_LINEAR_LOG_FIT", "EQUATION_TWO"
                ]
            )
            * np.exp(
                float(
                    coefficients_prospecting_activity().loc[
                        "B_LINEAR_LOG_FIT", "EQUATION_TWO"
                    ]
                )
                * fe_price_economy()
            ),
            lambda: 1,
        ),
    )


@component.add(
    name="PROSPECTING_AVERAGE_TIME",
    units="Years",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_prospecting_average_time"},
)
def prospecting_average_time():
    return _ext_constant_prospecting_average_time()


_ext_constant_prospecting_average_time = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "PROSPECTING_AVERAGE_TIME",
    {},
    _root,
    {},
    "_ext_constant_prospecting_average_time",
)


@component.add(
    name="PROSPECTING_DECISION_SHARE_OUT",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_prospecting_decision_share_out"},
)
def prospecting_decision_share_out():
    return _ext_constant_prospecting_decision_share_out()


_ext_constant_prospecting_decision_share_out = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "PROSPECTING_DECISION_SHARE_OUT",
    {},
    _root,
    {},
    "_ext_constant_prospecting_decision_share_out",
)


@component.add(
    name="SMELTING_LOSS_YIELD",
    units="DMNL",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_smelting_loss_yield"},
)
def smelting_loss_yield():
    """
    Iron smelting has a yield. This is the average yield in 2005. Thi implies that 5% is lost in the slag. Probably a low extimate and the range is 3-25% depending on accuracy or sloppyness in handling the process. Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access
    """
    return _ext_constant_smelting_loss_yield()


_ext_constant_smelting_loss_yield = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "SMELTING_LOSS_YIELD",
    {},
    _root,
    {},
    "_ext_constant_smelting_loss_yield",
)


@component.add(
    name="split_equation_Fe",
    units="DMNL",
    subscripts=["EQUATION_SPLIT_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_split_equation_fe"},
)
def split_equation_fe():
    """
    Coeffiecients from curve fitting the price curve graphical variable for Fe price from World 7. Source: Sverdrup, H., and Olafsdottir, A.H., 2019., Assessing the Longâ€Term Global Sustainability of the Production and Supply for Stainless Steel. Biophysical Economics and Resource Quality 1-26. https://doi.org/10.1007/s41247-019-0056-9 Open access publication. Sverdrup, H. and Ragnarsdottir, K.V., 2014. Natural Resources in a planetary perspective. Geochemical Perspectives Vol. 3, number 2, October issue 2014. 2:129-341. European Geochemical Society. Open access Sverdrup, H., and Olafsdottir, A.H., 2019. Conceptualization and parameterization of the market price mechanism in the WORLD6 model for metals, materials and fossil fuels. Mineral Economics 1-26. Springer Nature DOI: 10.1007/s13563-019-00182-7.
    """
    return _ext_constant_split_equation_fe()


_ext_constant_split_equation_fe = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "SPLIT_EQUATION*",
    {"EQUATION_SPLIT_I": _subscript_dict["EQUATION_SPLIT_I"]},
    _root,
    {"EQUATION_SPLIT_I": _subscript_dict["EQUATION_SPLIT_I"]},
    "_ext_constant_split_equation_fe",
)


@component.add(
    name="SWITCH_Fe_RECYCLING_RATE", comp_type="Constant", comp_subtype="Normal"
)
def switch_fe_recycling_rate():
    """
    This switch can take two values: 0: the (sub)module runs with BASE SCENARIIO for recycling 1: the (sub)module runs wit RECYCLING POLICY
    """
    return 0


@component.add(
    name="SWITCH_MAT2ECO_Fe_PRICE",
    units="1",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_switch_mat2eco_fe_price"},
)
def switch_mat2eco_fe_price():
    """
    Intermodule links SWITCH, it can take two values: 0: the link is broken, the intermodule variable is replaced by an exogenous parameter. 1: the link between modules is operational.
    """
    return _ext_constant_switch_mat2eco_fe_price()


_ext_constant_switch_mat2eco_fe_price = ExtConstant(
    "scenario_parameters/switches.xlsx",
    "SWITCHES",
    "SWITCH_MAT2ECO_Fe_PRICE",
    {},
    _root,
    {},
    "_ext_constant_switch_mat2eco_fe_price",
)


@component.add(
    name="total_Fe_known_reserves",
    units="Mt",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_known_reserves": 1},
)
def total_fe_known_reserves():
    """
    Sum of Fe in different Ore grades
    """
    return sum(
        fe_known_reserves().rename({"ORE_GRADES_I": "ORE_GRADES_I!"}),
        dim=["ORE_GRADES_I!"],
    )


@component.add(
    name="UNIT_CONVERSION_BILLION_TO_MILLION",
    units="Million_Million_persons/Biilion_persons",
    comp_type="Constant",
    comp_subtype="Normal",
)
def unit_conversion_billion_to_million():
    """
    Converting from billion people to billion people
    """
    return 1000


@component.add(
    name='"UNIT_CONVERSION_TO_TJ/YEARS"',
    units="TJ/MJ",
    comp_type="Constant",
    comp_subtype="Normal",
)
def unit_conversion_to_tjyears():
    """
    We have the following unit for the Cu total energy use=(MJ/kg*Mt/years) and we need to get it in the shape of TJ/years To do that we need to multiply with first multiply with *(kg/Mt) and then we have MJ/years left so we multiply MJ/years *TJ/MJ =TJ/years since, kg/Mt = 1.000.000.000 =10^9 and TJ/MJ =1/1.000.000 we get (kg/Mt*TJ/MJ) = 1000000000*1/1000000 = 1000 so in order to get (MJ/kg*Mt/years) we need to multiply with 1000
    """
    return 1000


@component.add(
    name="water_Fe_all",
    units="Mm3/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"water_use_fe_recycle": 1, "water_fe_extraction": 1},
)
def water_fe_all():
    """
    Total Fe water use for extraction and refining including secondary and from recycling This is the water used associated with the materials consumed to extract this specific resource grade, expressed in and m3/ton The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return water_use_fe_recycle() + water_fe_extraction()


@component.add(
    name="water_Fe_extraction",
    units="Mm3/Years",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"water_use_fe": 5},
)
def water_fe_extraction():
    """
    Sum of water used for the production and extraction of Fe from mining from different grades in m3/ton. The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return (
        float(water_use_fe().loc["TRACE_GRADE"])
        + float(water_use_fe().loc["ULTRALOW_GRADE"])
        + float(water_use_fe().loc["LOW_GRADE"])
        + float(water_use_fe().loc["HIGH_GRADE"])
        + float(water_use_fe().loc["RICH_GRADE"])
    )


@component.add(
    name="water_per_Fe",
    units="Mt/Years",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"coefficients_water_per_fe_grade": 5},
)
def water_per_fe():
    """
    Our own estimates of water use per grade for extraction, based on a large literature survey. See the separate report for documentation of setting the value and where the information came from. Water used associated with the materials consumed to extract this specific resource grade, expressed in and m3/ton product. The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations.
    """
    value = xr.DataArray(
        np.nan, {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]}, ["ORE_GRADES_I"]
    )
    value.loc[["RICH_GRADE"]] = float(
        coefficients_water_per_fe_grade().loc["RICH_GRADE"]
    )
    value.loc[["HIGH_GRADE"]] = float(
        coefficients_water_per_fe_grade().loc["HIGH_GRADE"]
    )
    value.loc[["LOW_GRADE"]] = float(coefficients_water_per_fe_grade().loc["LOW_GRADE"])
    value.loc[["ULTRALOW_GRADE"]] = float(
        coefficients_water_per_fe_grade().loc["ULTRALOW_GRADE"]
    )
    value.loc[["TRACE_GRADE"]] = float(
        coefficients_water_per_fe_grade().loc["TRACE_GRADE"]
    )
    value.loc[["OCEANS_GRADE"]] = 0
    return value


@component.add(
    name="WATER_PER_Fe_RECYCLED",
    units="MtW/Mt",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_water_per_fe_recycled"},
)
def water_per_fe_recycled():
    """
    Our own estimates of water use per grade extraction, based on a large literature survey. See the separate report for documentation of setting the value and where the information came from. This is the energy and water used associated with the materials consumed to extract this specific resource grade, expressed in MJ/kg product and m3/ton The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return _ext_constant_water_per_fe_recycled()


_ext_constant_water_per_fe_recycled = ExtConstant(
    "model_parameters/materials/materials.xlsx",
    "Iron",
    "WATER_PER_Fe_RECYCLED",
    {},
    _root,
    {},
    "_ext_constant_water_per_fe_recycled",
)


@component.add(
    name="water_use_Fe",
    units="Mt/Years",
    subscripts=["ORE_GRADES_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"fe_mining": 5, "water_per_fe": 5},
)
def water_use_fe():
    """
    Fe water use for extraction and refining from ore grades.
    """
    value = xr.DataArray(
        np.nan, {"ORE_GRADES_I": _subscript_dict["ORE_GRADES_I"]}, ["ORE_GRADES_I"]
    )
    value.loc[["RICH_GRADE"]] = float(fe_mining().loc["RICH_GRADE"]) * float(
        water_per_fe().loc["RICH_GRADE"]
    )
    value.loc[["HIGH_GRADE"]] = float(fe_mining().loc["HIGH_GRADE"]) * float(
        water_per_fe().loc["HIGH_GRADE"]
    )
    value.loc[["LOW_GRADE"]] = float(water_per_fe().loc["LOW_GRADE"]) * float(
        fe_mining().loc["LOW_GRADE"]
    )
    value.loc[["ULTRALOW_GRADE"]] = float(fe_mining().loc["ULTRALOW_GRADE"]) * float(
        water_per_fe().loc["ULTRALOW_GRADE"]
    )
    value.loc[["TRACE_GRADE"]] = float(water_per_fe().loc["TRACE_GRADE"]) * float(
        fe_mining().loc["TRACE_GRADE"]
    )
    value.loc[["OCEANS_GRADE"]] = 0
    return value


@component.add(
    name="water_use_Fe_recycle",
    units="MtW/Year",
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"water_per_fe_recycled": 1, "fe_sent_to_recycling": 1},
)
def water_use_fe_recycle():
    """
    water use for cu extraction from recycling This is the energy and water used associated with the materials consumed to extract this specific resource grade, expressed in MJ/kg product and m3/ton The actual values are taken from an internal LOCOMOTION report that have extracted the available values from literature and extrapolations. Source: Harald Sverdrup and Anna Hulda Olafsdottir 2021. Assessing with the WORLD7 model the global CO2 emissions and water use by metals, materials and fossil fuels extraction and production. LOCOMOTION working paper. 52 pages.
    """
    return water_per_fe_recycled() * fe_sent_to_recycling()
