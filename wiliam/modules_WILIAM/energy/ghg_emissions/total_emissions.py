"""
Module energy.ghg_emissions.total_emissions
Translated using PySD version 3.10.0
"""


@component.add(
    name="buildings_final_energy_consumption_by_FE",
    units="TJ/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "imv_final_energy_consumption_buildings_and_transport_top_down_coicop": 6,
        "share_energy_consumption_solid_bio_vs_solid_fossil": 2,
    },
)
def buildings_final_energy_consumption_by_fe():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
        },
        ["REGIONS_35_I", "NRG_FE_I"],
    )
    value.loc[:, ["FE_elec"]] = (
        imv_final_energy_consumption_buildings_and_transport_top_down_coicop()
        .loc[:, "HH_ELECTRICITY"]
        .reset_coords(drop=True)
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_elec"]}, 1)
        .values
    )
    value.loc[:, ["FE_gas"]] = (
        imv_final_energy_consumption_buildings_and_transport_top_down_coicop()
        .loc[:, "HH_GAS"]
        .reset_coords(drop=True)
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_gas"]}, 1)
        .values
    )
    value.loc[:, ["FE_heat"]] = (
        imv_final_energy_consumption_buildings_and_transport_top_down_coicop()
        .loc[:, "HH_HEAT"]
        .reset_coords(drop=True)
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_heat"]}, 1)
        .values
    )
    value.loc[:, ["FE_hydrogen"]] = 0
    value.loc[:, ["FE_liquid"]] = (
        imv_final_energy_consumption_buildings_and_transport_top_down_coicop()
        .loc[:, "HH_LIQUID_FUELS"]
        .reset_coords(drop=True)
        .expand_dims({"NRG_COMMODITIES_I": ["FE_liquid"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_bio"]] = (
        (
            imv_final_energy_consumption_buildings_and_transport_top_down_coicop()
            .loc[:, "HH_SOLID_FUELS"]
            .reset_coords(drop=True)
            * share_energy_consumption_solid_bio_vs_solid_fossil()
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_bio"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_fossil"]] = (
        (
            imv_final_energy_consumption_buildings_and_transport_top_down_coicop()
            .loc[:, "HH_SOLID_FUELS"]
            .reset_coords(drop=True)
            * (1 - share_energy_consumption_solid_bio_vs_solid_fossil())
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_fossil"]}, 1)
        .values
    )
    return value


@component.add(
    name="buildings_GHG_emissions_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "buildings_ghg_emissions_end_use_energy_by_fe_35r": 1,
        "unit_conversion_kg_mt": 1,
    },
)
def buildings_ghg_emissions_35r():
    return (
        sum(
            buildings_ghg_emissions_end_use_energy_by_fe_35r().rename(
                {"NRG_FE_I": "NRG_FE_I!"}
            ),
            dim=["NRG_FE_I!"],
        )
        / unit_conversion_kg_mt()
    )


@component.add(
    name="buildings_GHG_emissions_end_use_energy_by_FE_35R",
    units="kg/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_emission_factors_residential_stationary_combustion": 1,
        "buildings_final_energy_consumption_by_fe": 1,
    },
)
def buildings_ghg_emissions_end_use_energy_by_fe_35r():
    """
    Greenhouse gas emissions generated by energy end-use in buildings, by region, type of final enerhy and type of gas, in kg/year.
    """
    return np.maximum(
        0,
        ghg_emission_factors_residential_stationary_combustion()
        * buildings_final_energy_consumption_by_fe().transpose(
            "NRG_FE_I", "REGIONS_35_I"
        ),
    ).transpose("REGIONS_35_I", "NRG_FE_I", "GHG_I")


@component.add(
    name="CO2_emissions_by_passenger_transport_mode_and_power_train_35R",
    units="kg/Year",
    subscripts=[
        "REGIONS_35_I",
        "TRANSPORT_POWER_TRAIN_I",
        "PASSENGERS_TRANSPORT_MODE_I",
        "GHG_I",
    ],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "passenger_transport_emissions_end_use_energy": 7,
        "energy_passenger_transport_consumption": 4,
        "ghg_intensity_emissions_by_fe_35r": 4,
        "unit_conversion_kg_mt": 4,
        "unit_conversion_mj_ej": 4,
    },
)
def co2_emissions_by_passenger_transport_mode_and_power_train_35r():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
            "PASSENGERS_TRANSPORT_MODE_I": _subscript_dict[
                "PASSENGERS_TRANSPORT_MODE_I"
            ],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        [
            "REGIONS_35_I",
            "TRANSPORT_POWER_TRAIN_I",
            "PASSENGERS_TRANSPORT_MODE_I",
            "GHG_I",
        ],
    )
    value.loc[:, ["ICE_gasoline"], :, ["CO2"]] = (
        passenger_transport_emissions_end_use_energy()
        .loc[:, "ICE_gasoline", :, "CO2"]
        .reset_coords(drop=True)
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["ICE_gasoline"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[:, ["ICE_diesel"], :, ["CO2"]] = (
        passenger_transport_emissions_end_use_energy()
        .loc[:, "ICE_diesel", :, "CO2"]
        .reset_coords(drop=True)
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["ICE_diesel"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[:, ["ICE_gas"], :, ["CO2"]] = (
        passenger_transport_emissions_end_use_energy()
        .loc[:, "ICE_gas", :, "CO2"]
        .reset_coords(drop=True)
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["ICE_gas"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[:, ["ICE_LPG"], :, ["CO2"]] = (
        passenger_transport_emissions_end_use_energy()
        .loc[:, "ICE_LPG", :, "CO2"]
        .reset_coords(drop=True)
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["ICE_LPG"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[_subscript_dict["REGIONS_8_I"], ["BEV"], :, ["CO2"]] = (
        (
            sum(
                energy_passenger_transport_consumption()
                .loc[_subscript_dict["REGIONS_8_I"], "BEV", :, :]
                .reset_coords(drop=True)
                .rename(
                    {"REGIONS_35_I": "REGIONS_8_I", "HOUSEHOLDS_I": "HOUSEHOLDS_I!"}
                ),
                dim=["HOUSEHOLDS_I!"],
            )
            * ghg_intensity_emissions_by_fe_35r()
            .loc[_subscript_dict["REGIONS_8_I"], "FE_elec", "CO2"]
            .reset_coords(drop=True)
            .rename({"REGIONS_35_I": "REGIONS_8_I"})
            * unit_conversion_kg_mt()
            / unit_conversion_mj_ej()
        )
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["BEV"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[:, ["PHEV"], :, ["CO2"]] = (
        passenger_transport_emissions_end_use_energy()
        .loc[:, "PHEV", :, "CO2"]
        .reset_coords(drop=True)
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["PHEV"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[:, ["HEV"], :, ["CO2"]] = (
        passenger_transport_emissions_end_use_energy()
        .loc[:, "HEV", :, "CO2"]
        .reset_coords(drop=True)
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["HEV"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[:, ["FCEV"], :, ["CO2"]] = (
        passenger_transport_emissions_end_use_energy()
        .loc[:, "FCEV", :, "CO2"]
        .reset_coords(drop=True)
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["FCEV"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[_subscript_dict["REGIONS_EU27_I"], ["BEV"], :, ["CO2"]] = (
        (
            sum(
                energy_passenger_transport_consumption()
                .loc[_subscript_dict["REGIONS_EU27_I"], "BEV", :, :]
                .reset_coords(drop=True)
                .rename(
                    {"REGIONS_35_I": "REGIONS_EU27_I", "HOUSEHOLDS_I": "HOUSEHOLDS_I!"}
                ),
                dim=["HOUSEHOLDS_I!"],
            )
            * ghg_intensity_emissions_by_fe_35r()
            .loc[_subscript_dict["REGIONS_EU27_I"], "FE_elec", "CO2"]
            .reset_coords(drop=True)
            .rename({"REGIONS_35_I": "REGIONS_EU27_I"})
            * unit_conversion_kg_mt()
            / unit_conversion_mj_ej()
        )
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["BEV"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[_subscript_dict["REGIONS_EU27_I"], ["EV"], :, ["CO2"]] = (
        (
            sum(
                energy_passenger_transport_consumption()
                .loc[_subscript_dict["REGIONS_EU27_I"], "EV", :, :]
                .reset_coords(drop=True)
                .rename(
                    {"REGIONS_35_I": "REGIONS_EU27_I", "HOUSEHOLDS_I": "HOUSEHOLDS_I!"}
                ),
                dim=["HOUSEHOLDS_I!"],
            )
            * ghg_intensity_emissions_by_fe_35r()
            .loc[_subscript_dict["REGIONS_EU27_I"], "FE_elec", "CO2"]
            .reset_coords(drop=True)
            .rename({"REGIONS_35_I": "REGIONS_EU27_I"})
            * unit_conversion_kg_mt()
            / unit_conversion_mj_ej()
        )
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["EV"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    value.loc[:, ["HPV"], :, :] = 0
    value.loc[_subscript_dict["REGIONS_8_I"], ["EV"], :, ["CO2"]] = (
        (
            sum(
                energy_passenger_transport_consumption()
                .loc[_subscript_dict["REGIONS_8_I"], "EV", :, :]
                .reset_coords(drop=True)
                .rename(
                    {"REGIONS_35_I": "REGIONS_8_I", "HOUSEHOLDS_I": "HOUSEHOLDS_I!"}
                ),
                dim=["HOUSEHOLDS_I!"],
            )
            * ghg_intensity_emissions_by_fe_35r()
            .loc[_subscript_dict["REGIONS_8_I"], "FE_elec", "CO2"]
            .reset_coords(drop=True)
            .rename({"REGIONS_35_I": "REGIONS_8_I"})
            * unit_conversion_kg_mt()
            / unit_conversion_mj_ej()
        )
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["EV"]}, 1)
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 3)
        .values
    )
    return value


@component.add(
    name="CO2_emissions_private_transport_by_region",
    units="kg/Year",
    subscripts=["REGIONS_35_I", "PRIVATE_TRANSPORT_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"co2_emissions_by_passenger_transport_mode_and_power_train_35r": 1},
)
def co2_emissions_private_transport_by_region():
    return sum(
        co2_emissions_by_passenger_transport_mode_and_power_train_35r()
        .loc[:, :, _subscript_dict["PRIVATE_TRANSPORT_I"], "CO2"]
        .reset_coords(drop=True)
        .rename(
            {
                "TRANSPORT_POWER_TRAIN_I": "TRANSPORT_POWER_TRAIN_I!",
                "PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I",
            }
        ),
        dim=["TRANSPORT_POWER_TRAIN_I!"],
    )


@component.add(
    name="CO2_emissions_public_transport_by_region",
    units="kg/Year",
    subscripts=["REGIONS_35_I", "PUBLIC_TRANSPORT_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"co2_emissions_by_passenger_transport_mode_and_power_train_35r": 1},
)
def co2_emissions_public_transport_by_region():
    return sum(
        co2_emissions_by_passenger_transport_mode_and_power_train_35r()
        .loc[:, :, _subscript_dict["PUBLIC_TRANSPORT_I"], "CO2"]
        .reset_coords(drop=True)
        .rename(
            {
                "TRANSPORT_POWER_TRAIN_I": "TRANSPORT_POWER_TRAIN_I!",
                "PASSENGERS_TRANSPORT_MODE_I": "PUBLIC_TRANSPORT_I",
            }
        ),
        dim=["TRANSPORT_POWER_TRAIN_I!"],
    )


@component.add(
    name="CO2_intensity_of_passenger_transport_9R",
    units="g/(Year*km*person)",
    subscripts=["REGIONS_9_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "private_passenger_transport_ghg_emissions_all_energy_chain_35r": 2,
        "total_passenger_transport_demand": 2,
        "unit_conversion_g_mt": 2,
    },
)
def co2_intensity_of_passenger_transport_9r():
    """
    CO2_intensity_of_passenger_transport_9R
    """
    value = xr.DataArray(
        np.nan, {"REGIONS_9_I": _subscript_dict["REGIONS_9_I"]}, ["REGIONS_9_I"]
    )
    value.loc[_subscript_dict["REGIONS_8_I"]] = (
        zidz(
            sum(
                private_passenger_transport_ghg_emissions_all_energy_chain_35r()
                .loc[_subscript_dict["REGIONS_8_I"], :, "CO2"]
                .reset_coords(drop=True)
                .rename({"REGIONS_35_I": "REGIONS_8_I", "NRG_FE_I": "NRG_FE_I!"}),
                dim=["NRG_FE_I!"],
            ),
            total_passenger_transport_demand()
            .loc[_subscript_dict["REGIONS_8_I"]]
            .rename({"REGIONS_35_I": "REGIONS_8_I"}),
        )
        * unit_conversion_g_mt()
    ).values
    value.loc[["EU27"]] = (
        zidz(
            sum(
                private_passenger_transport_ghg_emissions_all_energy_chain_35r()
                .loc[_subscript_dict["REGIONS_EU27_I"], :, "CO2"]
                .reset_coords(drop=True)
                .rename({"REGIONS_35_I": "REGIONS_EU27_I!", "NRG_FE_I": "NRG_FE_I!"}),
                dim=["REGIONS_EU27_I!", "NRG_FE_I!"],
            ),
            sum(
                total_passenger_transport_demand()
                .loc[_subscript_dict["REGIONS_EU27_I"]]
                .rename({"REGIONS_35_I": "REGIONS_EU27_I!"}),
                dim=["REGIONS_EU27_I!"],
            ),
        )
        * unit_conversion_g_mt()
    )
    return value


@component.add(
    name="CO2eq_cost_by_region_and_sector",
    units="Mdollars/Year",
    subscripts=["REGIONS_35_I", "SECTORS_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "output_real": 1,
        "co2_price_sp": 1,
        "initial_co2eq_emissions_per_unit_of_sector_output": 1,
        "switch_economy": 1,
        "switch_eco_prices": 1,
        "co2eq_emissions_per_unit_of_sector_output_35r": 1,
        "unit_conversion_dollars_mdollars": 1,
    },
)
def co2eq_cost_by_region_and_sector():
    return (
        output_real()
        * co2_price_sp()
        .loc[_subscript_dict["REGIONS_35_I"]]
        .rename({"REGIONS_36_I": "REGIONS_35_I"})
        * if_then_else(
            np.logical_or(switch_economy() == 0, switch_eco_prices() == 0),
            lambda: initial_co2eq_emissions_per_unit_of_sector_output(),
            lambda: co2eq_emissions_per_unit_of_sector_output_35r(),
        )
        / unit_conversion_dollars_mdollars()
    )


@component.add(
    name="CO2eq_emissions_per_unit_of_sector_output_35R",
    units="tCO2eq/Mdollars_2015",
    subscripts=["REGIONS_35_I", "SECTORS_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "co2eq_energy_emissions_35r": 1,
        "output_real": 1,
        "unit_conversion_tco2eq_gtco2eq": 1,
    },
)
def co2eq_emissions_per_unit_of_sector_output_35r():
    return (
        zidz(co2eq_energy_emissions_35r(), output_real())
        * unit_conversion_tco2eq_gtco2eq()
    )


@component.add(
    name="CO2eq_energy_emissions_35R",
    units="GtCO2eq/Year",
    subscripts=["REGIONS_35_I", "SECTORS_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_energy_emissions_by_sector_35r": 3,
        "gwp_20_year": 3,
        "select_gwp_time_frame_sp": 3,
        "gwp_100_year": 3,
        "unit_conversion_tco2eq_gtco2eq": 3,
        "unit_conversion_mt_t": 3,
    },
)
def co2eq_energy_emissions_35r():
    return (
        ghg_energy_emissions_by_sector_35r().loc[:, :, "CO2"].reset_coords(drop=True)
        * if_then_else(
            select_gwp_time_frame_sp() == 1,
            lambda: float(gwp_20_year().loc["CO2"]),
            lambda: float(gwp_100_year().loc["CO2"]),
        )
        / unit_conversion_tco2eq_gtco2eq()
        / unit_conversion_mt_t()
        + ghg_energy_emissions_by_sector_35r().loc[:, :, "CH4"].reset_coords(drop=True)
        * if_then_else(
            select_gwp_time_frame_sp() == 1,
            lambda: float(gwp_20_year().loc["CH4"]),
            lambda: float(gwp_100_year().loc["CH4"]),
        )
        / unit_conversion_tco2eq_gtco2eq()
        / unit_conversion_mt_t()
        + ghg_energy_emissions_by_sector_35r().loc[:, :, "N2O"].reset_coords(drop=True)
        * if_then_else(
            select_gwp_time_frame_sp() == 1,
            lambda: float(gwp_20_year().loc["N2O"]),
            lambda: float(gwp_100_year().loc["N2O"]),
        )
        / unit_conversion_tco2eq_gtco2eq()
        / unit_conversion_mt_t()
    )


@component.add(
    name="EMISSION_FACTORS_CHARCOAL_BIOCHAR_PRODUCTION",
    units="gCO2/kg",
    subscripts=["NGR_EF_CHARCOAL_BIOCHAR_PRODUCTION_CO2"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_emission_factors_charcoal_biochar_production"
    },
)
def emission_factors_charcoal_biochar_production():
    return _ext_constant_emission_factors_charcoal_biochar_production()


_ext_constant_emission_factors_charcoal_biochar_production = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_FUGITIVES_GAS_OIL_FUEL_TRANS",
    "EF_CHARCOAL_BIOCHAR_PRODUCTION_CO2*",
    {
        "NGR_EF_CHARCOAL_BIOCHAR_PRODUCTION_CO2": _subscript_dict[
            "NGR_EF_CHARCOAL_BIOCHAR_PRODUCTION_CO2"
        ]
    },
    _root,
    {
        "NGR_EF_CHARCOAL_BIOCHAR_PRODUCTION_CO2": _subscript_dict[
            "NGR_EF_CHARCOAL_BIOCHAR_PRODUCTION_CO2"
        ]
    },
    "_ext_constant_emission_factors_charcoal_biochar_production",
)


@component.add(
    name="EMISSION_FACTORS_COAL_TO_GAS_PRODUCTION",
    units="kg/TJ",
    subscripts=["GHG_ENERGY_USE_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_emission_factors_coal_to_gas_production"
    },
)
def emission_factors_coal_to_gas_production():
    """
    GHG Emissions factor in the process of converting Coal to Liquids in Refinery
    """
    return _ext_constant_emission_factors_coal_to_gas_production()


_ext_constant_emission_factors_coal_to_gas_production = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_FUGITIVES_GAS_OIL_FUEL_TRANS",
    "EMISSION_FACTORS_COAL_TO_GAS_PRODUCTION*",
    {"GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"]},
    _root,
    {"GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"]},
    "_ext_constant_emission_factors_coal_to_gas_production",
)


@component.add(
    name="EMISSION_FACTORS_COKE_PRODUCTION",
    units="kg_CO2/tonne",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_emission_factors_coke_production"},
)
def emission_factors_coke_production():
    return _ext_constant_emission_factors_coke_production()


_ext_constant_emission_factors_coke_production = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_FUGITIVES_GAS_OIL_FUEL_TRANS",
    "EF_COKE_PRODUCTION_CO2*",
    {},
    _root,
    {},
    "_ext_constant_emission_factors_coke_production",
)


@component.add(
    name="EMISSION_FACTORS_FUGITIVES_EXTRACTION",
    units="g/m3",
    subscripts=["NRG_PE_I", "GHG_ENERGY_USE_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_emission_factors_fugitives_extraction"},
)
def emission_factors_fugitives_extraction():
    """
    Greenhouse gas emission factors due to fugitive emissions generated by the extraction of fossil energy resources, in g/m3.
    """
    return _ext_constant_emission_factors_fugitives_extraction()


_ext_constant_emission_factors_fugitives_extraction = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_FUGITIVES_GAS_OIL_FUEL_TRANS",
    "EF_FUGITIVES_EXTRACTION_GHG",
    {
        "NRG_PE_I": _subscript_dict["NRG_PE_I"],
        "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
    },
    _root,
    {
        "NRG_PE_I": _subscript_dict["NRG_PE_I"],
        "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
    },
    "_ext_constant_emission_factors_fugitives_extraction",
)


@component.add(
    name="EMISSION_FACTORS_FUGITIVES_REFINING",
    units="g/m3",
    subscripts=["NRG_PE_I", "GHG_ENERGY_USE_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_emission_factors_fugitives_refining"},
)
def emission_factors_fugitives_refining():
    """
    Greenhouse gas emission factors due to fugitive emissions generated by the refining process, in g/m3.
    """
    return _ext_constant_emission_factors_fugitives_refining()


_ext_constant_emission_factors_fugitives_refining = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_FUGITIVES_GAS_OIL_FUEL_TRANS",
    "EF_FUGITIVES_REFINING_GHG",
    {
        "NRG_PE_I": _subscript_dict["NRG_PE_I"],
        "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
    },
    _root,
    {
        "NRG_PE_I": _subscript_dict["NRG_PE_I"],
        "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
    },
    "_ext_constant_emission_factors_fugitives_refining",
)


@component.add(
    name="EMISSION_FACTORS_FUGITIVES_SUPPLY",
    units="g/m3",
    subscripts=["NRG_FE_I", "GHG_ENERGY_USE_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_emission_factors_fugitives_supply"},
)
def emission_factors_fugitives_supply():
    return _ext_constant_emission_factors_fugitives_supply()


_ext_constant_emission_factors_fugitives_supply = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_FUGITIVES_GAS_OIL_FUEL_TRANS",
    "EF_FUGITIVES_SUPPLY_GHG",
    {
        "NRG_FE_I": _subscript_dict["NRG_FE_I"],
        "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
    },
    _root,
    {
        "NRG_FE_I": _subscript_dict["NRG_FE_I"],
        "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
    },
    "_ext_constant_emission_factors_fugitives_supply",
)


@component.add(
    name="EMISSION_FACTORS_GAS_TO_LIQUID_PRODUCTION",
    units="kg/TJ",
    subscripts=["GHG_ENERGY_USE_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_emission_factors_gas_to_liquid_production"
    },
)
def emission_factors_gas_to_liquid_production():
    """
    GHG Emissions factor in the process of converting Coal to Liquids in Refinery
    """
    return _ext_constant_emission_factors_gas_to_liquid_production()


_ext_constant_emission_factors_gas_to_liquid_production = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_FUGITIVES_GAS_OIL_FUEL_TRANS",
    "EMISSION_FACTORS_GAS_TO_LIQUID_PRODUCTION",
    {"GHG_ENERGY_USE_I": ["CO2"]},
    _root,
    {"GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"]},
    "_ext_constant_emission_factors_gas_to_liquid_production",
)


@component.add(
    name="EMISSION_FACTORS_OFF_ROAD_TRANSPORTATION",
    units="kg/TJ",
    subscripts=["NRG_EF_OFF_ROAD_TRANSPORTATION"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_emission_factors_off_road_transportation"
    },
)
def emission_factors_off_road_transportation():
    return _ext_constant_emission_factors_off_road_transportation()


_ext_constant_emission_factors_off_road_transportation = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "EF_OFF_ROAD_TRANSPORTATION_CO2*",
    {
        "NRG_EF_OFF_ROAD_TRANSPORTATION": _subscript_dict[
            "NRG_EF_OFF_ROAD_TRANSPORTATION"
        ]
    },
    _root,
    {
        "NRG_EF_OFF_ROAD_TRANSPORTATION": _subscript_dict[
            "NRG_EF_OFF_ROAD_TRANSPORTATION"
        ]
    },
    "_ext_constant_emission_factors_off_road_transportation",
)


@component.add(
    name="EMISSION_FACTORS_PRIVATE_TRANSPORT",
    units="kg/TJ",
    subscripts=["TRANSPORT_POWER_TRAIN_I", "PRIVATE_TRANSPORT_I", "GHG_I"],
    comp_type="Constant",
    comp_subtype="External, Normal",
    depends_on={"__external__": "_ext_constant_emission_factors_private_transport"},
)
def emission_factors_private_transport():
    """
    Greenhouse gas mobility emission factors of private transport vehicles, by type of power train, type of trasnport and type of gas, in kg/TJ.
    """
    value = xr.DataArray(
        np.nan,
        {
            "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
            "PRIVATE_TRANSPORT_I": _subscript_dict["PRIVATE_TRANSPORT_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["TRANSPORT_POWER_TRAIN_I", "PRIVATE_TRANSPORT_I", "GHG_I"],
    )
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[:, :, ["CO2"]] = True
    def_subs.loc[:, :, ["CH4"]] = True
    def_subs.loc[:, :, ["N2O"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_emission_factors_private_transport().values[def_subs.values]
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, :, ["CO2"]] = False
    except_subs.loc[:, :, ["CH4"]] = False
    except_subs.loc[:, :, ["N2O"]] = False
    value.values[except_subs.values] = 0
    return value


_ext_constant_emission_factors_private_transport = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "CO2_EMISSION_FACTORS_PRIVATE_TRANSPORT",
    {
        "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
        "PRIVATE_TRANSPORT_I": _subscript_dict["PRIVATE_TRANSPORT_I"],
        "GHG_I": ["CO2"],
    },
    _root,
    {
        "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
        "PRIVATE_TRANSPORT_I": _subscript_dict["PRIVATE_TRANSPORT_I"],
        "GHG_I": _subscript_dict["GHG_I"],
    },
    "_ext_constant_emission_factors_private_transport",
)

_ext_constant_emission_factors_private_transport.add(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "CH4_EMISSION_FACTORS_PRIVATE_TRANSPORT",
    {
        "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
        "PRIVATE_TRANSPORT_I": _subscript_dict["PRIVATE_TRANSPORT_I"],
        "GHG_I": ["CH4"],
    },
)

_ext_constant_emission_factors_private_transport.add(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "N2O_EMISSION_FACTORS_PRIVATE_TRANSPORT",
    {
        "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
        "PRIVATE_TRANSPORT_I": _subscript_dict["PRIVATE_TRANSPORT_I"],
        "GHG_I": ["N2O"],
    },
)


@component.add(
    name="EMISSION_FACTORS_PUBLIC_TRANSPORT",
    units="kg/TJ",
    subscripts=["TRANSPORT_POWER_TRAIN_I", "PUBLIC_TRANSPORT_I", "GHG_I"],
    comp_type="Constant",
    comp_subtype="External, Normal",
    depends_on={"__external__": "_ext_constant_emission_factors_public_transport"},
)
def emission_factors_public_transport():
    """
    Greenhouse gas mobility emission factors of public transport vehicles, by type of power train, type of trasnport and type of gas, in kg/TJ.
    """
    value = xr.DataArray(
        np.nan,
        {
            "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
            "PUBLIC_TRANSPORT_I": _subscript_dict["PUBLIC_TRANSPORT_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["TRANSPORT_POWER_TRAIN_I", "PUBLIC_TRANSPORT_I", "GHG_I"],
    )
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[:, :, ["CO2"]] = True
    def_subs.loc[:, :, ["CH4"]] = True
    def_subs.loc[:, :, ["N2O"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_emission_factors_public_transport().values[def_subs.values]
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, :, ["CO2"]] = False
    except_subs.loc[:, :, ["CH4"]] = False
    except_subs.loc[:, :, ["N2O"]] = False
    value.values[except_subs.values] = 0
    return value


_ext_constant_emission_factors_public_transport = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "CO2_EMISSION_FACTORS_PUBLIC_TRANSPORT",
    {
        "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
        "PUBLIC_TRANSPORT_I": _subscript_dict["PUBLIC_TRANSPORT_I"],
        "GHG_I": ["CO2"],
    },
    _root,
    {
        "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
        "PUBLIC_TRANSPORT_I": _subscript_dict["PUBLIC_TRANSPORT_I"],
        "GHG_I": _subscript_dict["GHG_I"],
    },
    "_ext_constant_emission_factors_public_transport",
)

_ext_constant_emission_factors_public_transport.add(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "CH4_EMISSION_FACTORS_PUBLIC_TRANSPORT",
    {
        "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
        "PUBLIC_TRANSPORT_I": _subscript_dict["PUBLIC_TRANSPORT_I"],
        "GHG_I": ["CH4"],
    },
)

_ext_constant_emission_factors_public_transport.add(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "N2O_EMISSION_FACTORS_PUBLIC_TRANSPORT",
    {
        "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
        "PUBLIC_TRANSPORT_I": _subscript_dict["PUBLIC_TRANSPORT_I"],
        "GHG_I": ["N2O"],
    },
)


@component.add(
    name="EMISSION_FACTORS_RAIL_TRANSPORTATION",
    units="kg/TJ",
    subscripts=["NRG_EF_RAIL_TRANSPORT"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_emission_factors_rail_transportation"},
)
def emission_factors_rail_transportation():
    return _ext_constant_emission_factors_rail_transportation()


_ext_constant_emission_factors_rail_transportation = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "EF_RAIL_TRANSPORTATION_CO2*",
    {"NRG_EF_RAIL_TRANSPORT": _subscript_dict["NRG_EF_RAIL_TRANSPORT"]},
    _root,
    {"NRG_EF_RAIL_TRANSPORT": _subscript_dict["NRG_EF_RAIL_TRANSPORT"]},
    "_ext_constant_emission_factors_rail_transportation",
)


@component.add(
    name="EMISSION_FACTORS_ROAD_TRANSPORTATION",
    units="kg/TJ",
    subscripts=["NRG_EF_ROAD_TRANSPORTATION_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_emission_factors_road_transportation"},
)
def emission_factors_road_transportation():
    return _ext_constant_emission_factors_road_transportation()


_ext_constant_emission_factors_road_transportation = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "EF_ROAD_TRANSPORTATION_CO2*",
    {"NRG_EF_ROAD_TRANSPORTATION_I": _subscript_dict["NRG_EF_ROAD_TRANSPORTATION_I"]},
    _root,
    {"NRG_EF_ROAD_TRANSPORTATION_I": _subscript_dict["NRG_EF_ROAD_TRANSPORTATION_I"]},
    "_ext_constant_emission_factors_road_transportation",
)


@component.add(
    name="EMISSION_FACTORS_STATIONARY_COMBUSTION",
    units="kg/TJ",
    subscripts=["NRG_PROTRA_I", "NRG_TI_I", "GHG_I"],
    comp_type="Constant",
    comp_subtype="External, Normal",
    depends_on={"__external__": "_ext_constant_emission_factors_stationary_combustion"},
)
def emission_factors_stationary_combustion():
    value = xr.DataArray(
        np.nan,
        {
            "NRG_PROTRA_I": _subscript_dict["NRG_PROTRA_I"],
            "NRG_TI_I": _subscript_dict["NRG_TI_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["NRG_PROTRA_I", "NRG_TI_I", "GHG_I"],
    )
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[:, :, ["CO2"]] = True
    def_subs.loc[:, :, ["CH4"]] = True
    def_subs.loc[:, :, ["N2O"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_emission_factors_stationary_combustion().values[def_subs.values]
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, :, ["CO2"]] = False
    except_subs.loc[:, :, ["CH4"]] = False
    except_subs.loc[:, :, ["N2O"]] = False
    value.values[except_subs.values] = 0
    return value


_ext_constant_emission_factors_stationary_combustion = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_STATIONARY_COM",
    "EF_TRANSFORMATION_CO2_BY_NRG_PROTRA_I",
    {
        "NRG_PROTRA_I": _subscript_dict["NRG_PROTRA_I"],
        "NRG_TI_I": _subscript_dict["NRG_TI_I"],
        "GHG_I": ["CO2"],
    },
    _root,
    {
        "NRG_PROTRA_I": _subscript_dict["NRG_PROTRA_I"],
        "NRG_TI_I": _subscript_dict["NRG_TI_I"],
        "GHG_I": _subscript_dict["GHG_I"],
    },
    "_ext_constant_emission_factors_stationary_combustion",
)

_ext_constant_emission_factors_stationary_combustion.add(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_STATIONARY_COM",
    "EF_TRANSFORMATION_CH4_BY_NRG_PROTRA_I",
    {
        "NRG_PROTRA_I": _subscript_dict["NRG_PROTRA_I"],
        "NRG_TI_I": _subscript_dict["NRG_TI_I"],
        "GHG_I": ["CH4"],
    },
)

_ext_constant_emission_factors_stationary_combustion.add(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_STATIONARY_COM",
    "EF_TRANSFORMATION_N2O_BY_NRG_PROTRA_I",
    {
        "NRG_PROTRA_I": _subscript_dict["NRG_PROTRA_I"],
        "NRG_TI_I": _subscript_dict["NRG_TI_I"],
        "GHG_I": ["N2O"],
    },
)


@component.add(
    name="EMISSION_FACTORS_WATER_BORNE_NAVIGATION",
    units="kg/TJ",
    subscripts=["NRG_EF_WATER_BORNE_NAVIGATION"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_emission_factors_water_borne_navigation"
    },
)
def emission_factors_water_borne_navigation():
    return _ext_constant_emission_factors_water_borne_navigation()


_ext_constant_emission_factors_water_borne_navigation = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MOBILE_COM",
    "EF_WATER_BORNE_NAVIGATION_CO2*",
    {"NRG_EF_WATER_BORNE_NAVIGATION": _subscript_dict["NRG_EF_WATER_BORNE_NAVIGATION"]},
    _root,
    {"NRG_EF_WATER_BORNE_NAVIGATION": _subscript_dict["NRG_EF_WATER_BORNE_NAVIGATION"]},
    "_ext_constant_emission_factors_water_borne_navigation",
)


@component.add(
    name="energy_passenger_transport_consumption_by_FE_9R",
    units="MJ",
    subscripts=["REGIONS_9_I", "NRG_FE_I", "PASSENGERS_TRANSPORT_MODE_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"energy_passenger_transport_consumption_by_fe_35r": 2},
)
def energy_passenger_transport_consumption_by_fe_9r():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
            "PASSENGERS_TRANSPORT_MODE_I": _subscript_dict[
                "PASSENGERS_TRANSPORT_MODE_I"
            ],
        },
        ["REGIONS_9_I", "NRG_FE_I", "PASSENGERS_TRANSPORT_MODE_I"],
    )
    value.loc[_subscript_dict["REGIONS_8_I"], :, :] = sum(
        energy_passenger_transport_consumption_by_fe_35r()
        .loc[_subscript_dict["REGIONS_8_I"], :, :, :]
        .rename({"REGIONS_35_I": "REGIONS_8_I", "HOUSEHOLDS_I": "HOUSEHOLDS_I!"}),
        dim=["HOUSEHOLDS_I!"],
    ).values
    value.loc[["EU27"], :, :] = (
        sum(
            energy_passenger_transport_consumption_by_fe_35r()
            .loc[_subscript_dict["REGIONS_EU27_I"], :, :, :]
            .rename(
                {"REGIONS_35_I": "REGIONS_EU27_I!", "HOUSEHOLDS_I": "HOUSEHOLDS_I!"}
            ),
            dim=["REGIONS_EU27_I!", "HOUSEHOLDS_I!"],
        )
        .expand_dims({"REGIONS_36_I": ["EU27"]}, 0)
        .values
    )
    return value


@component.add(
    name="final_energy_demand_by_FE",
    units="TJ/Year",
    subscripts=["REGIONS_9_I", "NRG_FE_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_energy_demand_bysectors_and_fe_9r": 1},
)
def final_energy_demand_by_fe():
    """
    Final energy demand by region and type of final energy, in TJ/year.
    """
    return sum(
        final_energy_demand_bysectors_and_fe_9r().rename(
            {"SECTORS_NON_ENERGY_I": "SECTORS_NON_ENERGY_I!"}
        ),
        dim=["SECTORS_NON_ENERGY_I!"],
    )


@component.add(
    name="final_energy_demand_by_FE_EJ_9R",
    units="EJ/Year",
    subscripts=["REGIONS_9_I", "NRG_FE_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_energy_demand_bysectors_and_fe_9r": 1,
        "unit_conversion_tj_ej": 1,
    },
)
def final_energy_demand_by_fe_ej_9r():
    return (
        sum(
            final_energy_demand_bysectors_and_fe_9r().rename(
                {"SECTORS_NON_ENERGY_I": "SECTORS_NON_ENERGY_I!"}
            ),
            dim=["SECTORS_NON_ENERGY_I!"],
        )
        / unit_conversion_tj_ej()
    )


@component.add(
    name="final_energy_demand_bysectors_and_FE_9R",
    units="TJ/Year",
    subscripts=["REGIONS_9_I", "SECTORS_NON_ENERGY_I", "NRG_FE_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"final_energy_demand_by_sector_and_fe": 2},
)
def final_energy_demand_bysectors_and_fe_9r():
    """
    Final energy demand by 9 regions, by sector and type of final energy, in TJ/year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "SECTORS_NON_ENERGY_I": _subscript_dict["SECTORS_NON_ENERGY_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
        },
        ["REGIONS_9_I", "SECTORS_NON_ENERGY_I", "NRG_FE_I"],
    )
    value.loc[["EU27"], :, :] = (
        np.maximum(
            0,
            sum(
                final_energy_demand_by_sector_and_fe()
                .loc[_subscript_dict["REGIONS_EU27_I"], :, :]
                .rename({"REGIONS_35_I": "REGIONS_EU27_I!"}),
                dim=["REGIONS_EU27_I!"],
            ),
        )
        .expand_dims({"REGIONS_36_I": ["EU27"]}, 0)
        .values
    )
    value.loc[_subscript_dict["REGIONS_8_I"], :, :] = np.maximum(
        0,
        final_energy_demand_by_sector_and_fe()
        .loc[_subscript_dict["REGIONS_8_I"], :, :]
        .rename({"REGIONS_35_I": "REGIONS_8_I"}),
    ).values
    return value


@component.add(
    name="GHG_all_emissions_35R",
    units="Gt/Year",
    subscripts=["REGIONS_35_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_energy_emissions_by_sector_35r": 1,
        "unit_conversion_mt_gt": 3,
        "buildings_ghg_emissions_35r": 1,
        "private_transport_ghg_emissions_35r": 1,
    },
)
def ghg_all_emissions_35r():
    """
    + Buildings_GHG_emissions[REGIONS_35_I,GHG_I]/UNIT_CONVERSION_Mt_Gt+ SUM(passenger_transport_GHG_emissions_all_energy_chain[REGIONS_35_I,NRG_FE_ I!,GHG_I])/UNIT_CONVERSION_Mt_Gt
    """
    return (
        sum(
            ghg_energy_emissions_by_sector_35r().rename({"SECTORS_I": "SECTORS_I!"}),
            dim=["SECTORS_I!"],
        )
        / unit_conversion_mt_gt()
        + buildings_ghg_emissions_35r() / unit_conversion_mt_gt()
        + sum(
            private_transport_ghg_emissions_35r().rename({"NRG_FE_I": "NRG_FE_I!"}),
            dim=["NRG_FE_I!"],
        )
        / unit_conversion_mt_gt()
    )


@component.add(
    name="GHG_all_emissions_EU27",
    units="Gt/Year",
    subscripts=["REGIONS_36_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ghg_all_emissions_35r": 1},
)
def ghg_all_emissions_eu27():
    return sum(
        ghg_all_emissions_35r()
        .loc[_subscript_dict["REGIONS_EU27_I"], :]
        .rename({"REGIONS_35_I": "REGIONS_EU27_I!"}),
        dim=["REGIONS_EU27_I!"],
    ).expand_dims({"REGIONS_36_I": ["EU27"]}, 0)


@component.add(
    name="GHG_CO2eq_cost_by_region_and_sector",
    units="Mdollars*tCO2eq/(Year*t)",
    subscripts=["REGIONS_35_I", "SECTORS_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "output_real": 1,
        "co2_price_sp": 1,
        "initial_ghg_co2eq_emissions_per_unit_of_sector_output": 1,
        "switch_economy": 1,
        "switch_eco_prices": 1,
        "ghg_emissions_co2eq_per_unit_of_sector_output_35r": 1,
        "unit_conversion_dollars_mdollars": 1,
    },
)
def ghg_co2eq_cost_by_region_and_sector():
    return (
        output_real()
        * co2_price_sp()
        .loc[_subscript_dict["REGIONS_35_I"]]
        .rename({"REGIONS_36_I": "REGIONS_35_I"})
        * if_then_else(
            np.logical_or(switch_economy() == 0, switch_eco_prices() == 0),
            lambda: initial_ghg_co2eq_emissions_per_unit_of_sector_output()
            .loc[:, :, "CO2"]
            .reset_coords(drop=True),
            lambda: ghg_emissions_co2eq_per_unit_of_sector_output_35r()
            .loc[:, :, "CO2"]
            .reset_coords(drop=True),
        )
        / unit_conversion_dollars_mdollars()
    )


@component.add(
    name="GHG_coal_extraction_emissions",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "GHG_I", "SECTORS_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "extraction_of_coal": 2,
        "underground_coal_mining_emission_factors": 1,
        "ghg_volume_to_mass_conversion_factor": 2,
        "unit_conversion_t_mt": 2,
        "unit_conversion_mt_ej": 2,
        "surface_coal_mining_emission_factors": 1,
        "pe_by_commodity": 1,
        "world_pe_by_commodity": 1,
    },
)
def ghg_coal_extraction_emissions():
    """
    Greenhouse gas emissions emitted during the mining process in coal mines. Surface mines and underground mines have different emission factors and in this variable the assumption that all hard coal is mined in underground mines and all brown coal is mined in surface mines is taken: https://www.britannica.com/technology/coal-mining/Choosing-a-mining-method
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "GHG_I": _subscript_dict["GHG_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
        },
        ["REGIONS_9_I", "GHG_I", "SECTORS_I"],
    )
    value.loc[:, _subscript_dict["GHG_ENERGY_USE_I"], ["MINING_COAL"]] = (
        (
            (
                float(extraction_of_coal().loc["HARD_COAL"])
                * underground_coal_mining_emission_factors()
                * ghg_volume_to_mass_conversion_factor()
                * unit_conversion_t_mt()
                * float(unit_conversion_mt_ej().loc["HARD_COAL"])
                + float(extraction_of_coal().loc["BROWN_COAL"])
                * surface_coal_mining_emission_factors()
                * ghg_volume_to_mass_conversion_factor()
                * unit_conversion_t_mt()
                * float(unit_conversion_mt_ej().loc["BROWN_COAL"])
            )
            * zidz(
                pe_by_commodity().loc[:, "PE_coal"].reset_coords(drop=True),
                float(world_pe_by_commodity().loc["PE_coal"]),
            )
        )
        .transpose("REGIONS_9_I", "GHG_ENERGY_USE_I")
        .expand_dims({"CLUSTER_MINNING": ["MINING_COAL"]}, 2)
        .values
    )
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, _subscript_dict["GHG_ENERGY_USE_I"], ["MINING_COAL"]] = False
    value.values[except_subs.values] = 0
    return value


@component.add(
    name="GHG_EMISSION_FACTORS_RESIDENTIAL_STATIONARY_COMBUSTION",
    units="kg/TJ",
    subscripts=["NRG_FE_I", "GHG_I"],
    comp_type="Constant",
    comp_subtype="External, Normal",
    depends_on={
        "__external__": "_ext_constant_ghg_emission_factors_residential_stationary_combustion"
    },
)
def ghg_emission_factors_residential_stationary_combustion():
    """
    Greenhouse gas emission factors in stationary combustion systems by type final energy and type of gas ( CO2, CH4 and N2O ) in kg/TJ.
    """
    value = xr.DataArray(
        np.nan,
        {"NRG_FE_I": _subscript_dict["NRG_FE_I"], "GHG_I": _subscript_dict["GHG_I"]},
        ["NRG_FE_I", "GHG_I"],
    )
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[:, ["CO2", "CH4", "N2O"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_ghg_emission_factors_residential_stationary_combustion().values[
        def_subs.values
    ]
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, _subscript_dict["GHG_ENERGY_USE_I"]] = False
    value.values[except_subs.values] = 0
    return value


_ext_constant_ghg_emission_factors_residential_stationary_combustion = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_STATIONARY_COM",
    "GHG_EMISSION_FACTORS_RESIDENTIAL_STATIONARY_COMBUSTION",
    {
        "NRG_FE_I": _subscript_dict["NRG_FE_I"],
        "GHG_I": _subscript_dict["GHG_ENERGY_USE_I"],
    },
    _root,
    {"NRG_FE_I": _subscript_dict["NRG_FE_I"], "GHG_I": _subscript_dict["GHG_I"]},
    "_ext_constant_ghg_emission_factors_residential_stationary_combustion",
)


@component.add(
    name="GHG_EMISSION_FACTORS_STATIONARY_COMBUSTION",
    units="kg/TJ",
    subscripts=["NRG_FE_I", "GHG_I"],
    comp_type="Constant",
    comp_subtype="External, Normal",
    depends_on={
        "__external__": "_ext_constant_ghg_emission_factors_stationary_combustion"
    },
)
def ghg_emission_factors_stationary_combustion():
    """
    Greenhouse gas emission factors in stationary combustion systems by type final energy and type of gas ( CO2, CH4 and N2O ) in kg/TJ.
    """
    value = xr.DataArray(
        np.nan,
        {"NRG_FE_I": _subscript_dict["NRG_FE_I"], "GHG_I": _subscript_dict["GHG_I"]},
        ["NRG_FE_I", "GHG_I"],
    )
    def_subs = xr.zeros_like(value, dtype=bool)
    def_subs.loc[:, ["CO2", "CH4", "N2O"]] = True
    value.values[
        def_subs.values
    ] = _ext_constant_ghg_emission_factors_stationary_combustion().values[
        def_subs.values
    ]
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, _subscript_dict["GHG_ENERGY_USE_I"]] = False
    value.values[except_subs.values] = 0
    return value


_ext_constant_ghg_emission_factors_stationary_combustion = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_STATIONARY_COM",
    "GHG_EMISSION_FACTORS_STATIONARY_COMBUSTION",
    {
        "NRG_FE_I": _subscript_dict["NRG_FE_I"],
        "GHG_I": _subscript_dict["GHG_ENERGY_USE_I"],
    },
    _root,
    {"NRG_FE_I": _subscript_dict["NRG_FE_I"], "GHG_I": _subscript_dict["GHG_I"]},
    "_ext_constant_ghg_emission_factors_stationary_combustion",
)


@component.add(
    name="GHG_emissions_all_energy_chain_35R_total",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ghg_emissions_all_energy_chain_by_sector_35r": 1},
)
def ghg_emissions_all_energy_chain_35r_total():
    return sum(
        ghg_emissions_all_energy_chain_by_sector_35r().rename(
            {"SECTORS_I": "SECTORS_I!"}
        ),
        dim=["SECTORS_I!"],
    )


@component.add(
    name="GHG_emissions_all_energy_chain_9R",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_emissions_by_protra_sectors_9r": 5,
        "ghg_fugitive_emissions_refining": 1,
        "ghg_fugitive_emissions_supply": 1,
        "ghg_coal_extraction_emissions": 1,
        "ghg_oil_extraction_emissions": 1,
        "ghg_nat_gas_extraction_emissions": 1,
    },
)
def ghg_emissions_all_energy_chain_9r():
    """
    GHG emissions of PROTRA sectors and the rest of all energy chain.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    )
    value.loc[:, ["ELECTRICITY_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        ghg_emissions_by_protra_sectors_9r()
        .loc[:, "ELECTRICITY_GAS", _subscript_dict["GHG_ENERGY_USE_I"]]
        .reset_coords(drop=True)
        .rename({"GHG_I": "GHG_ENERGY_USE_I"})
        .expand_dims(
            {"CLUSTER_GAS_POWER_PLANTS": _subscript_dict["CLUSTER_GAS_POWER_PLANTS"]}, 1
        )
        .values
    )
    value.loc[:, ["ELECTRICITY_OIL"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        ghg_emissions_by_protra_sectors_9r()
        .loc[:, "ELECTRICITY_OIL", _subscript_dict["GHG_ENERGY_USE_I"]]
        .reset_coords(drop=True)
        .rename({"GHG_I": "GHG_ENERGY_USE_I"})
        .expand_dims(
            {"CLUSTER_OIL_POWER_PLANTS": _subscript_dict["CLUSTER_OIL_POWER_PLANTS"]}, 1
        )
        .values
    )
    value.loc[:, ["ELECTRICITY_COAL"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        ghg_emissions_by_protra_sectors_9r()
        .loc[:, "ELECTRICITY_COAL", _subscript_dict["GHG_ENERGY_USE_I"]]
        .reset_coords(drop=True)
        .rename({"GHG_I": "GHG_ENERGY_USE_I"})
        .expand_dims(
            {"CLUSTER_COAL_POWER_PLANTS": _subscript_dict["CLUSTER_COAL_POWER_PLANTS"]},
            1,
        )
        .values
    )
    value.loc[:, ["ELECTRICITY_OTHER"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        ghg_emissions_by_protra_sectors_9r()
        .loc[:, "ELECTRICITY_OTHER", _subscript_dict["GHG_ENERGY_USE_I"]]
        .reset_coords(drop=True)
        .rename({"GHG_I": "GHG_ENERGY_USE_I"})
        .expand_dims(
            {
                "CLUSTER_BIOMASS_POWER_PLANTS": _subscript_dict[
                    "CLUSTER_BIOMASS_POWER_PLANTS"
                ]
            },
            1,
        )
        .values
    )
    value.loc[:, ["STEAM_HOT_WATER"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        ghg_emissions_by_protra_sectors_9r()
        .loc[:, "STEAM_HOT_WATER", _subscript_dict["GHG_ENERGY_USE_I"]]
        .reset_coords(drop=True)
        .rename({"GHG_I": "GHG_ENERGY_USE_I"})
        .expand_dims({"CLUSTER_OTHER_ENERGY_ACTIVITIES": ["STEAM_HOT_WATER"]}, 1)
        .values
    )
    except_subs = xr.zeros_like(value, dtype=bool)
    except_subs.loc[:, _subscript_dict["SECTORS_ENERGY_I"], :] = True
    except_subs.loc[:, ["ELECTRICITY_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[:, ["ELECTRICITY_OIL"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[
        :, ["ELECTRICITY_COAL"], _subscript_dict["GHG_ENERGY_USE_I"]
    ] = False
    except_subs.loc[
        :, ["ELECTRICITY_OTHER"], _subscript_dict["GHG_ENERGY_USE_I"]
    ] = False
    except_subs.loc[:, ["STEAM_HOT_WATER"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[:, ["REFINING"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[
        :, ["DISTRIBUTION_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]
    ] = False
    value.values[except_subs.values] = 0
    except_subs = xr.zeros_like(value, dtype=bool)
    except_subs.loc[:, _subscript_dict["SECTORS_NON_ENERGY_I"], :] = True
    except_subs.loc[:, ["EXTRACTION_GAS"], :] = False
    except_subs.loc[:, ["MINING_COAL"], :] = False
    except_subs.loc[:, ["EXTRACTION_OIL"], :] = False
    value.values[except_subs.values] = 0
    value.loc[:, ["REFINING"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        ghg_fugitive_emissions_refining()
        .loc[:, "REFINING", _subscript_dict["GHG_ENERGY_USE_I"]]
        .reset_coords(drop=True)
        .rename({"GHG_I": "GHG_ENERGY_USE_I"})
        .expand_dims({"CLUSTER_REFINERY": _subscript_dict["CLUSTER_REFINERY"]}, 1)
        .values
    )
    value.loc[:, ["DISTRIBUTION_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        ghg_fugitive_emissions_supply()
        .loc[:, "DISTRIBUTION_GAS", :]
        .reset_coords(drop=True)
        .expand_dims({"CLUSTER_OTHER_ENERGY_ACTIVITIES": ["DISTRIBUTION_GAS"]}, 1)
        .values
    )
    value.loc[:, ["MINING_COAL"], :] = (
        ghg_coal_extraction_emissions()
        .loc[:, :, "MINING_COAL"]
        .reset_coords(drop=True)
        .expand_dims({"CLUSTER_MINNING": ["MINING_COAL"]}, 1)
        .values
    )
    value.loc[:, ["EXTRACTION_OIL"], :] = (
        ghg_oil_extraction_emissions()
        .loc[_subscript_dict["REGIONS_9_I"], :, "EXTRACTION_OIL"]
        .reset_coords(drop=True)
        .rename({"REGIONS_36_I": "REGIONS_9_I"})
        .expand_dims({"CLUSTER_QUARRYING": ["EXTRACTION_OIL"]}, 1)
        .values
    )
    value.loc[:, ["EXTRACTION_GAS"], :] = (
        ghg_nat_gas_extraction_emissions()
        .loc[_subscript_dict["REGIONS_9_I"], :, "EXTRACTION_GAS"]
        .reset_coords(drop=True)
        .rename({"REGIONS_36_I": "REGIONS_9_I"})
        .expand_dims({"CLUSTER_QUARRYING": ["EXTRACTION_GAS"]}, 1)
        .values
    )
    return value


@component.add(
    name="GHG_emissions_all_energy_chain_by_sector_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "SECTORS_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_emissions_all_energy_chain_per_unit_of_sector_output_35r": 1,
        "output_real": 1,
        "unit_conversion_mt_t": 1,
    },
)
def ghg_emissions_all_energy_chain_by_sector_35r():
    return (
        ghg_emissions_all_energy_chain_per_unit_of_sector_output_35r()
        * output_real()
        * unit_conversion_mt_t()
    )


@component.add(
    name="GHG_emissions_all_energy_chain_per_unit_of_sector_output_35R",
    units="t/Mdollars_2015",
    subscripts=["REGIONS_35_I", "SECTORS_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ghg_emissions_all_energy_chain_per_unit_of_sector_output_9r": 2},
)
def ghg_emissions_all_energy_chain_per_unit_of_sector_output_35r():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_35_I", "SECTORS_I", "GHG_I"],
    )
    value.loc[_subscript_dict["REGIONS_8_I"], :, :] = (
        ghg_emissions_all_energy_chain_per_unit_of_sector_output_9r()
        .loc[_subscript_dict["REGIONS_8_I"], :, :]
        .rename({"REGIONS_9_I": "REGIONS_8_I"})
        .values
    )
    value.loc[_subscript_dict["REGIONS_EU27_I"], :, :] = (
        ghg_emissions_all_energy_chain_per_unit_of_sector_output_9r()
        .loc["EU27", :, :]
        .reset_coords(drop=True)
        .expand_dims({"REGIONS_EU27_I": _subscript_dict["REGIONS_EU27_I"]}, 0)
        .values
    )
    return value


@component.add(
    name="GHG_emissions_all_energy_chain_per_unit_of_sector_output_9R",
    units="t/Mdollars_2015",
    subscripts=["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_emissions_all_energy_chain_9r": 1,
        "output_real_9r": 1,
        "unit_conversion_t_mt": 1,
    },
)
def ghg_emissions_all_energy_chain_per_unit_of_sector_output_9r():
    return (
        zidz(
            ghg_emissions_all_energy_chain_9r(),
            output_real_9r().expand_dims({"GHG_I": _subscript_dict["GHG_I"]}, 2),
        )
        * unit_conversion_t_mt()
    )


@component.add(
    name="GHG_emissions_by_PROTRA_sectors_9R",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ti_by_protra_and_commodity": 16,
        "share_to_elec_chp_plants": 8,
        "emission_factors_stationary_combustion": 24,
        "unit_conversion_kg_mt": 5,
        "unit_conversion_tj_ej": 5,
    },
)
def ghg_emissions_by_protra_sectors_9r():
    """
    Greenhouse gas emissions in energy production sectors ( elec and heat ), by region, energy production sector and type of gas, in Mt/year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    )
    value.loc[:, ["ELECTRICITY_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_gas_fuels", "TI_gas_fossil"]
                .reset_coords(drop=True)
                * share_to_elec_chp_plants()
                .loc[:, "PROTRA_CHP_gas_fuels"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_gas_fuels",
                        "TI_gas_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_gas_fuels_CCS",
                        "TI_gas_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_PP_gas_fuels", "TI_gas_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_PP_gas_fuels",
                    "TI_gas_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims(
            {"CLUSTER_GAS_POWER_PLANTS": _subscript_dict["CLUSTER_GAS_POWER_PLANTS"]}, 1
        )
        .values
    )
    value.loc[:, ["ELECTRICITY_OIL"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_liquid_fuels", "TI_liquid_fossil"]
                .reset_coords(drop=True)
                * share_to_elec_chp_plants()
                .loc[:, "PROTRA_CHP_liquid_fuels"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_liquid_fuels",
                        "TI_liquid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_liquid_fuels_CCS",
                        "TI_liquid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_PP_liquid_fuels", "TI_liquid_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_PP_liquid_fuels",
                    "TI_liquid_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims(
            {"CLUSTER_OIL_POWER_PLANTS": _subscript_dict["CLUSTER_OIL_POWER_PLANTS"]}, 1
        )
        .values
    )
    value.loc[:, ["ELECTRICITY_COAL"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_solid_fossil", "TI_solid_fossil"]
                .reset_coords(drop=True)
                * share_to_elec_chp_plants()
                .loc[:, "PROTRA_CHP_solid_fossil"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_solid_fossil",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_solid_fossil_CCS",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_PP_solid_fossil", "TI_solid_fossil"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_PP_solid_fossil",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_PP_solid_fossil_CCS",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims(
            {"CLUSTER_COAL_POWER_PLANTS": _subscript_dict["CLUSTER_COAL_POWER_PLANTS"]},
            1,
        )
        .values
    )
    value.loc[:, ["ELECTRICITY_OTHER"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_waste", "TI_waste"]
                .reset_coords(drop=True)
                * share_to_elec_chp_plants()
                .loc[:, "PROTRA_CHP_waste"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_CHP_waste", "TI_waste", _subscript_dict["GHG_ENERGY_USE_I"]
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_PP_waste", "TI_waste"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_PP_waste",
                        "TI_waste",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_PP_waste_CCS",
                        "TI_waste",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims(
            {
                "CLUSTER_BIOMASS_POWER_PLANTS": _subscript_dict[
                    "CLUSTER_BIOMASS_POWER_PLANTS"
                ]
            },
            1,
        )
        .values
    )
    value.loc[:, ["STEAM_HOT_WATER"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_solid_fossil", "TI_solid_fossil"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_to_elec_chp_plants()
                    .loc[:, "PROTRA_CHP_solid_fossil"]
                    .reset_coords(drop=True)
                )
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_solid_fossil",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_solid_fossil_CCS",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_HP_solid_fossil", "TI_solid_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_HP_solid_fossil",
                    "TI_solid_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_waste", "TI_waste"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_to_elec_chp_plants()
                    .loc[:, "PROTRA_CHP_waste"]
                    .reset_coords(drop=True)
                )
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_CHP_waste", "TI_waste", _subscript_dict["GHG_ENERGY_USE_I"]
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_HP_waste", "TI_waste"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc["PROTRA_HP_waste", "TI_waste", _subscript_dict["GHG_ENERGY_USE_I"]]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_liquid_fuels", "TI_liquid_fossil"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_to_elec_chp_plants()
                    .loc[:, "PROTRA_CHP_liquid_fuels"]
                    .reset_coords(drop=True)
                )
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_liquid_fuels",
                        "TI_liquid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_liquid_fuels_CCS",
                        "TI_liquid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_HP_liquid_fuels", "TI_liquid_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_HP_liquid_fuels",
                    "TI_liquid_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_HP_gas_fuels", "TI_gas_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_HP_gas_fuels",
                    "TI_gas_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_gas_fuels", "TI_gas_fossil"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_to_elec_chp_plants()
                    .loc[:, "PROTRA_CHP_gas_fuels"]
                    .reset_coords(drop=True)
                )
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_gas_fuels",
                        "TI_gas_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_gas_fuels_CCS",
                        "TI_gas_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims({"CLUSTER_OTHER_ENERGY_ACTIVITIES": ["STEAM_HOT_WATER"]}, 1)
        .values
    )
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, ["ELECTRICITY_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[:, ["ELECTRICITY_OIL"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[
        :, ["ELECTRICITY_COAL"], _subscript_dict["GHG_ENERGY_USE_I"]
    ] = False
    except_subs.loc[
        :, ["ELECTRICITY_OTHER"], _subscript_dict["GHG_ENERGY_USE_I"]
    ] = False
    except_subs.loc[:, ["STEAM_HOT_WATER"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    value.values[except_subs.values] = 0
    return value


@component.add(
    name="GHG_emissions_by_sector",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ti_by_protra_and_commodity": 16,
        "share_to_elec_chp_plants": 8,
        "emission_factors_stationary_combustion": 24,
        "unit_conversion_kg_mt": 9,
        "unit_conversion_tj_ej": 5,
        "final_energy_demand_bysectors_and_fe_9r": 4,
        "ghg_emission_factors_stationary_combustion": 4,
        "ghg_fugitive_emissions_refining": 1,
        "ghg_fugitive_emissions_supply": 1,
        "ghg_coal_extraction_emissions": 1,
        "ghg_oil_extraction_emissions": 1,
        "ghg_nat_gas_extraction_emissions": 1,
    },
)
def ghg_emissions_by_sector():
    """
    Greenhouse gas emissions by region, sector and type of gas ( CO2, CH4 and N2O ) taking into account the source of the gas emission in Mt/year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    )
    value.loc[:, ["ELECTRICITY_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_gas_fuels", "TI_gas_fossil"]
                .reset_coords(drop=True)
                * share_to_elec_chp_plants()
                .loc[:, "PROTRA_CHP_gas_fuels"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_gas_fuels",
                        "TI_gas_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_gas_fuels_CCS",
                        "TI_gas_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_PP_gas_fuels", "TI_gas_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_PP_gas_fuels",
                    "TI_gas_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims(
            {"CLUSTER_GAS_POWER_PLANTS": _subscript_dict["CLUSTER_GAS_POWER_PLANTS"]}, 1
        )
        .values
    )
    value.loc[:, ["ELECTRICITY_OIL"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_liquid_fuels", "TI_liquid_fossil"]
                .reset_coords(drop=True)
                * share_to_elec_chp_plants()
                .loc[:, "PROTRA_CHP_liquid_fuels"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_liquid_fuels",
                        "TI_liquid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_liquid_fuels_CCS",
                        "TI_liquid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_PP_liquid_fuels", "TI_liquid_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_PP_liquid_fuels",
                    "TI_liquid_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims(
            {"CLUSTER_OIL_POWER_PLANTS": _subscript_dict["CLUSTER_OIL_POWER_PLANTS"]}, 1
        )
        .values
    )
    value.loc[:, ["ELECTRICITY_COAL"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_solid_fossil", "TI_solid_fossil"]
                .reset_coords(drop=True)
                * share_to_elec_chp_plants()
                .loc[:, "PROTRA_CHP_solid_fossil"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_solid_fossil",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_solid_fossil_CCS",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_PP_solid_fossil", "TI_solid_fossil"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_PP_solid_fossil",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_PP_solid_fossil_CCS",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims(
            {"CLUSTER_COAL_POWER_PLANTS": _subscript_dict["CLUSTER_COAL_POWER_PLANTS"]},
            1,
        )
        .values
    )
    value.loc[:, ["ELECTRICITY_OTHER"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_waste", "TI_waste"]
                .reset_coords(drop=True)
                * share_to_elec_chp_plants()
                .loc[:, "PROTRA_CHP_waste"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_CHP_waste", "TI_waste", _subscript_dict["GHG_ENERGY_USE_I"]
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_PP_waste", "TI_waste"]
                .reset_coords(drop=True)
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_PP_waste",
                        "TI_waste",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_PP_waste_CCS",
                        "TI_waste",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims(
            {
                "CLUSTER_BIOMASS_POWER_PLANTS": _subscript_dict[
                    "CLUSTER_BIOMASS_POWER_PLANTS"
                ]
            },
            1,
        )
        .values
    )
    value.loc[:, ["STEAM_HOT_WATER"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            (
                ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_solid_fossil", "TI_solid_fossil"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_to_elec_chp_plants()
                    .loc[:, "PROTRA_CHP_solid_fossil"]
                    .reset_coords(drop=True)
                )
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_solid_fossil",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_solid_fossil_CCS",
                        "TI_solid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_HP_solid_fossil", "TI_solid_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_HP_solid_fossil",
                    "TI_solid_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_waste", "TI_waste"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_to_elec_chp_plants()
                    .loc[:, "PROTRA_CHP_waste"]
                    .reset_coords(drop=True)
                )
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_CHP_waste", "TI_waste", _subscript_dict["GHG_ENERGY_USE_I"]
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_HP_waste", "TI_waste"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc["PROTRA_HP_waste", "TI_waste", _subscript_dict["GHG_ENERGY_USE_I"]]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_liquid_fuels", "TI_liquid_fossil"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_to_elec_chp_plants()
                    .loc[:, "PROTRA_CHP_liquid_fuels"]
                    .reset_coords(drop=True)
                )
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_liquid_fuels",
                        "TI_liquid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_liquid_fuels_CCS",
                        "TI_liquid_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_HP_liquid_fuels", "TI_liquid_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_HP_liquid_fuels",
                    "TI_liquid_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_HP_gas_fuels", "TI_gas_fossil"]
                .reset_coords(drop=True)
                * emission_factors_stationary_combustion()
                .loc[
                    "PROTRA_HP_gas_fuels",
                    "TI_gas_fossil",
                    _subscript_dict["GHG_ENERGY_USE_I"],
                ]
                .reset_coords(drop=True)
                .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                + ti_by_protra_and_commodity()
                .loc[:, "PROTRA_CHP_gas_fuels", "TI_gas_fossil"]
                .reset_coords(drop=True)
                * (
                    1
                    - share_to_elec_chp_plants()
                    .loc[:, "PROTRA_CHP_gas_fuels"]
                    .reset_coords(drop=True)
                )
                * (
                    emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_gas_fuels",
                        "TI_gas_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                    - emission_factors_stationary_combustion()
                    .loc[
                        "PROTRA_CHP_gas_fuels_CCS",
                        "TI_gas_fossil",
                        _subscript_dict["GHG_ENERGY_USE_I"],
                    ]
                    .reset_coords(drop=True)
                    .rename({"GHG_I": "GHG_ENERGY_USE_I"})
                )
            )
            / unit_conversion_kg_mt()
            * unit_conversion_tj_ej()
        )
        .expand_dims({"CLUSTER_OTHER_ENERGY_ACTIVITIES": ["STEAM_HOT_WATER"]}, 1)
        .values
    )
    except_subs = xr.zeros_like(value, dtype=bool)
    except_subs.loc[:, _subscript_dict["SECTORS_ENERGY_I"], :] = True
    except_subs.loc[:, ["ELECTRICITY_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[:, ["ELECTRICITY_OIL"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[
        :, ["ELECTRICITY_COAL"], _subscript_dict["GHG_ENERGY_USE_I"]
    ] = False
    except_subs.loc[
        :, ["ELECTRICITY_OTHER"], _subscript_dict["GHG_ENERGY_USE_I"]
    ] = False
    except_subs.loc[:, ["STEAM_HOT_WATER"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[:, ["REFINING"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    except_subs.loc[
        :, ["DISTRIBUTION_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]
    ] = False
    value.values[except_subs.values] = 0
    except_subs = xr.zeros_like(value, dtype=bool)
    except_subs.loc[:, _subscript_dict["SECTORS_NON_ENERGY_I"], :] = True
    except_subs.loc[:, ["EXTRACTION_GAS"], :] = False
    except_subs.loc[:, ["MINING_COAL"], :] = False
    except_subs.loc[:, ["EXTRACTION_OIL"], :] = False
    value.values[except_subs.values] = (
        sum(
            final_energy_demand_bysectors_and_fe_9r().rename({"NRG_FE_I": "NRG_FE_I!"})
            * ghg_emission_factors_stationary_combustion().rename(
                {"NRG_FE_I": "NRG_FE_I!"}
            ),
            dim=["NRG_FE_I!"],
        )
        / unit_conversion_kg_mt()
    ).values[except_subs.loc[:, _subscript_dict["SECTORS_NON_ENERGY_I"], :].values]
    value.loc[:, ["REFINING"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        ghg_fugitive_emissions_refining()
        .loc[:, "REFINING", _subscript_dict["GHG_ENERGY_USE_I"]]
        .reset_coords(drop=True)
        .rename({"GHG_I": "GHG_ENERGY_USE_I"})
        .expand_dims({"CLUSTER_REFINERY": _subscript_dict["CLUSTER_REFINERY"]}, 1)
        .values
    )
    value.loc[:, ["DISTRIBUTION_GAS"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        ghg_fugitive_emissions_supply()
        .loc[:, "DISTRIBUTION_GAS", :]
        .reset_coords(drop=True)
        .expand_dims({"CLUSTER_OTHER_ENERGY_ACTIVITIES": ["DISTRIBUTION_GAS"]}, 1)
        .values
    )
    value.loc[:, ["MINING_COAL"], :] = (
        (
            ghg_coal_extraction_emissions()
            .loc[:, :, "MINING_COAL"]
            .reset_coords(drop=True)
            + sum(
                final_energy_demand_bysectors_and_fe_9r()
                .loc[:, "MINING_COAL", :]
                .reset_coords(drop=True)
                .rename({"NRG_FE_I": "NRG_FE_I!"})
                * ghg_emission_factors_stationary_combustion().rename(
                    {"NRG_FE_I": "NRG_FE_I!"}
                ),
                dim=["NRG_FE_I!"],
            )
            / unit_conversion_kg_mt()
        )
        .expand_dims({"CLUSTER_MINNING": ["MINING_COAL"]}, 1)
        .values
    )
    value.loc[:, ["EXTRACTION_OIL"], :] = (
        (
            ghg_oil_extraction_emissions()
            .loc[_subscript_dict["REGIONS_9_I"], :, "EXTRACTION_OIL"]
            .reset_coords(drop=True)
            .rename({"REGIONS_36_I": "REGIONS_9_I"})
            + sum(
                final_energy_demand_bysectors_and_fe_9r()
                .loc[:, "EXTRACTION_OIL", :]
                .reset_coords(drop=True)
                .rename({"NRG_FE_I": "NRG_FE_I!"})
                * ghg_emission_factors_stationary_combustion().rename(
                    {"NRG_FE_I": "NRG_FE_I!"}
                ),
                dim=["NRG_FE_I!"],
            )
            / unit_conversion_kg_mt()
        )
        .expand_dims({"CLUSTER_QUARRYING": ["EXTRACTION_OIL"]}, 1)
        .values
    )
    value.loc[:, ["EXTRACTION_GAS"], :] = (
        (
            ghg_nat_gas_extraction_emissions()
            .loc[_subscript_dict["REGIONS_9_I"], :, "EXTRACTION_GAS"]
            .reset_coords(drop=True)
            .rename({"REGIONS_36_I": "REGIONS_9_I"})
            + sum(
                final_energy_demand_bysectors_and_fe_9r()
                .loc[:, "EXTRACTION_GAS", :]
                .reset_coords(drop=True)
                .rename({"NRG_FE_I": "NRG_FE_I!"})
                * ghg_emission_factors_stationary_combustion().rename(
                    {"NRG_FE_I": "NRG_FE_I!"}
                ),
                dim=["NRG_FE_I!"],
            )
            / unit_conversion_kg_mt()
        )
        .expand_dims({"CLUSTER_QUARRYING": ["EXTRACTION_GAS"]}, 1)
        .values
    )
    return value


@component.add(
    name="GHG_emissions_by_transport_mode",
    units="g/(Year*km*person)",
    subscripts=["REGIONS_35_I", "PASSENGERS_TRANSPORT_MODE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r": 1,
        "passenger_transport_real_supply": 1,
        "unit_conversion_g_mt": 1,
    },
)
def ghg_emissions_by_transport_mode():
    """
    GHG emissions per cápita and km by transport mode.
    """
    return (
        zidz(
            sum(
                passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r().rename(
                    {"NRG_FE_I": "NRG_FE_I!"}
                ),
                dim=["NRG_FE_I!"],
            ),
            sum(
                passenger_transport_real_supply().rename(
                    {
                        "TRANSPORT_POWER_TRAIN_I": "TRANSPORT_POWER_TRAIN_I!",
                        "HOUSEHOLDS_I": "HOUSEHOLDS_I!",
                    }
                ),
                dim=["TRANSPORT_POWER_TRAIN_I!", "HOUSEHOLDS_I!"],
            ).expand_dims({"GHG_I": _subscript_dict["GHG_I"]}, 2),
        )
        * unit_conversion_g_mt()
    )


@component.add(
    name="GHG_emissions_CO2eq_per_unit_of_sector_output_35R",
    units="tCO2eq/Mdollars_2015",
    subscripts=["REGIONS_35_I", "SECTORS_I", "GHG_ENERGY_USE_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_energy_emissions_35r_co2eq": 1,
        "output_real": 1,
        "unit_conversion_tco2eq_gtco2eq": 1,
    },
)
def ghg_emissions_co2eq_per_unit_of_sector_output_35r():
    return (
        zidz(
            ghg_energy_emissions_35r_co2eq(),
            output_real().expand_dims(
                {"GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"]}, 2
            ),
        )
        * unit_conversion_tco2eq_gtco2eq()
    )


@component.add(
    name="GHG_emissions_final_energy_by_sector_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "SECTORS_NON_ENERGY_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "final_energy_demand_by_sector_and_fe": 11,
        "ghg_emission_factors_stationary_combustion": 1,
        "unit_conversion_kg_mt": 6,
        "emission_factors_public_transport": 10,
    },
)
def ghg_emissions_final_energy_by_sector_35r():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "SECTORS_NON_ENERGY_I": _subscript_dict["SECTORS_NON_ENERGY_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_35_I", "SECTORS_NON_ENERGY_I", "GHG_I"],
    )
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, ["TRANSPORT_RAIL"], :] = False
    except_subs.loc[:, ["TRANSPORT_OTHER_LAND"], :] = False
    except_subs.loc[:, ["TRANSPORT_SEA"], :] = False
    except_subs.loc[:, ["TRANSPORT_INLAND_WATER"], :] = False
    except_subs.loc[:, ["TRANSPORT_AIR"], :] = False
    value.values[except_subs.values] = (
        sum(
            final_energy_demand_by_sector_and_fe().rename({"NRG_FE_I": "NRG_FE_I!"})
            * ghg_emission_factors_stationary_combustion().rename(
                {"NRG_FE_I": "NRG_FE_I!"}
            ),
            dim=["NRG_FE_I!"],
        )
        / unit_conversion_kg_mt()
    ).values[except_subs.values]
    value.loc[:, ["TRANSPORT_RAIL"], :] = (
        (
            (
                final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_RAIL", "FE_liquid"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_diesel", "RAIL", :]
                .reset_coords(drop=True)
                + final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_RAIL", "FE_gas"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_gas", "RAIL", :]
                .reset_coords(drop=True)
            )
            / unit_conversion_kg_mt()
        )
        .expand_dims({"CLUSTER_TRANSPORT": ["TRANSPORT_RAIL"]}, 1)
        .values
    )
    value.loc[:, ["TRANSPORT_OTHER_LAND"], :] = (
        (
            (
                final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_OTHER_LAND", "FE_liquid"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_diesel", "bus", :]
                .reset_coords(drop=True)
                + final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_OTHER_LAND", "FE_gas"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_gas", "bus", :]
                .reset_coords(drop=True)
            )
            / unit_conversion_kg_mt()
        )
        .expand_dims({"CLUSTER_TRANSPORT": ["TRANSPORT_OTHER_LAND"]}, 1)
        .values
    )
    value.loc[:, ["TRANSPORT_SEA"], :] = (
        (
            (
                final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_SEA", "FE_liquid"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_diesel", "MARINE", :]
                .reset_coords(drop=True)
                + final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_SEA", "FE_gas"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_gas", "MARINE", :]
                .reset_coords(drop=True)
            )
            / unit_conversion_kg_mt()
        )
        .expand_dims({"CLUSTER_TRANSPORT": ["TRANSPORT_SEA"]}, 1)
        .values
    )
    value.loc[:, ["TRANSPORT_INLAND_WATER"], :] = (
        (
            (
                final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_INLAND_WATER", "FE_liquid"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_diesel", "RAIL", :]
                .reset_coords(drop=True)
                + final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_INLAND_WATER", "FE_gas"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_gas", "MARINE", :]
                .reset_coords(drop=True)
            )
            / unit_conversion_kg_mt()
        )
        .expand_dims({"CLUSTER_TRANSPORT": ["TRANSPORT_INLAND_WATER"]}, 1)
        .values
    )
    value.loc[:, ["TRANSPORT_AIR"], :] = (
        (
            (
                final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_AIR", "FE_liquid"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_gasoline", "AIR_INTERNATIONAL", :]
                .reset_coords(drop=True)
                + final_energy_demand_by_sector_and_fe()
                .loc[:, "TRANSPORT_AIR", "FE_gas"]
                .reset_coords(drop=True)
                * emission_factors_public_transport()
                .loc["ICE_gas", "AIR_INTERNATIONAL", :]
                .reset_coords(drop=True)
            )
            / unit_conversion_kg_mt()
        )
        .expand_dims({"CLUSTER_TRANSPORT": ["TRANSPORT_AIR"]}, 1)
        .values
    )
    return value


@component.add(
    name="GHG_emissions_households_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "buildings_ghg_emissions_end_use_energy_by_fe_35r": 1,
        "unit_conversion_t_kg": 1,
        "unit_conversion_t_mt": 1,
        "private_transport_ghg_emissions_35r": 1,
    },
)
def ghg_emissions_households_35r():
    return (
        buildings_ghg_emissions_end_use_energy_by_fe_35r()
        * unit_conversion_t_kg()
        / unit_conversion_t_mt()
        + private_transport_ghg_emissions_35r()
    )


@component.add(
    name="GHG_emissions_in_energy_consuming_sectors",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "NRG_FE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_emission_factors_stationary_combustion": 1,
        "final_energy_demand_by_fe": 1,
        "unit_conversion_kg_mt": 1,
    },
)
def ghg_emissions_in_energy_consuming_sectors():
    """
    Greenhouse gas emissions in energy consuming sectors by region, type of final energy and type of gas, in Mt/year.
    """
    return (
        (
            ghg_emission_factors_stationary_combustion()
            * final_energy_demand_by_fe().transpose("NRG_FE_I", "REGIONS_9_I")
        )
        / unit_conversion_kg_mt()
    ).transpose("REGIONS_9_I", "NRG_FE_I", "GHG_I")


@component.add(
    name="GHG_emissions_per_unit_of_sector_output",
    units="t/Mdollars_2015",
    subscripts=["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_emissions_by_sector": 1,
        "output_real_9r": 1,
        "unit_conversion_t_mt": 1,
    },
)
def ghg_emissions_per_unit_of_sector_output():
    """
    Intensity of GHG emissions by sector and type of gas in t/M$
    """
    return (
        zidz(
            ghg_emissions_by_sector(),
            output_real_9r().expand_dims({"GHG_I": _subscript_dict["GHG_I"]}, 2),
        )
        * unit_conversion_t_mt()
    )


@component.add(
    name="GHG_energy_emissions_35R_CO2eq",
    units="GtCO2eq/Year",
    subscripts=["REGIONS_35_I", "SECTORS_I", "GHG_ENERGY_USE_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_energy_emissions_by_sector_35r": 3,
        "gwp_20_year": 3,
        "select_gwp_time_frame_sp": 3,
        "gwp_100_year": 3,
        "unit_conversion_tco2eq_gtco2eq": 3,
        "unit_conversion_mt_t": 3,
    },
)
def ghg_energy_emissions_35r_co2eq():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
            "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
        },
        ["REGIONS_35_I", "SECTORS_I", "GHG_ENERGY_USE_I"],
    )
    value.loc[:, :, ["CO2"]] = (
        (
            ghg_energy_emissions_by_sector_35r()
            .loc[:, :, "CO2"]
            .reset_coords(drop=True)
            * if_then_else(
                select_gwp_time_frame_sp() == 1,
                lambda: float(gwp_20_year().loc["CO2"]),
                lambda: float(gwp_100_year().loc["CO2"]),
            )
            / unit_conversion_tco2eq_gtco2eq()
            / unit_conversion_mt_t()
        )
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 2)
        .values
    )
    value.loc[:, :, ["CH4"]] = (
        (
            ghg_energy_emissions_by_sector_35r()
            .loc[:, :, "CH4"]
            .reset_coords(drop=True)
            * if_then_else(
                select_gwp_time_frame_sp() == 1,
                lambda: float(gwp_20_year().loc["CH4"]),
                lambda: float(gwp_100_year().loc["CH4"]),
            )
            / unit_conversion_tco2eq_gtco2eq()
            / unit_conversion_mt_t()
        )
        .expand_dims({"GHG_ENERGY_USE_I": ["CH4"]}, 2)
        .values
    )
    value.loc[:, :, ["N2O"]] = (
        (
            ghg_energy_emissions_by_sector_35r()
            .loc[:, :, "N2O"]
            .reset_coords(drop=True)
            * if_then_else(
                select_gwp_time_frame_sp() == 1,
                lambda: float(gwp_20_year().loc["N2O"]),
                lambda: float(gwp_100_year().loc["N2O"]),
            )
            / unit_conversion_tco2eq_gtco2eq()
            / unit_conversion_mt_t()
        )
        .expand_dims({"GHG_ENERGY_USE_I": ["N2O"]}, 2)
        .values
    )
    return value


@component.add(
    name="GHG_energy_emissions_35R_CO2eq_total",
    units="GtCO2eq/Year",
    subscripts=["REGIONS_35_I", "SECTORS_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ghg_energy_emissions_35r_co2eq": 1},
)
def ghg_energy_emissions_35r_co2eq_total():
    return sum(
        ghg_energy_emissions_35r_co2eq().rename(
            {"GHG_ENERGY_USE_I": "GHG_ENERGY_USE_I!"}
        ),
        dim=["GHG_ENERGY_USE_I!"],
    )


@component.add(
    name="GHG_energy_emissions_by_sector_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "SECTORS_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_emissions_all_energy_chain_by_sector_35r": 4,
        "ghg_emissions_final_energy_by_sector_35r": 4,
    },
)
def ghg_energy_emissions_by_sector_35r():
    """
    GHG emissions all energy sector chain sectors and final energy demand in non-energy sectors.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_35_I", "SECTORS_I", "GHG_I"],
    )
    value.loc[:, _subscript_dict["SECTORS_ENERGY_I"], :] = (
        ghg_emissions_all_energy_chain_by_sector_35r()
        .loc[:, _subscript_dict["SECTORS_ENERGY_I"], :]
        .rename({"SECTORS_I": "SECTORS_ENERGY_I"})
        .values
    )
    except_subs = xr.zeros_like(value, dtype=bool)
    except_subs.loc[:, _subscript_dict["SECTORS_NON_ENERGY_I"], :] = True
    except_subs.loc[:, ["EXTRACTION_GAS"], :] = False
    except_subs.loc[:, ["MINING_COAL"], :] = False
    except_subs.loc[:, ["EXTRACTION_OIL"], :] = False
    value.values[
        except_subs.values
    ] = ghg_emissions_final_energy_by_sector_35r().values[
        except_subs.loc[:, _subscript_dict["SECTORS_NON_ENERGY_I"], :].values
    ]
    value.loc[:, ["EXTRACTION_GAS"], :] = (
        (
            ghg_emissions_all_energy_chain_by_sector_35r()
            .loc[:, "EXTRACTION_GAS", :]
            .reset_coords(drop=True)
            + ghg_emissions_final_energy_by_sector_35r()
            .loc[:, "EXTRACTION_GAS", :]
            .reset_coords(drop=True)
        )
        .expand_dims({"CLUSTER_QUARRYING": ["EXTRACTION_GAS"]}, 1)
        .values
    )
    value.loc[:, ["MINING_COAL"], :] = (
        (
            ghg_emissions_all_energy_chain_by_sector_35r()
            .loc[:, "MINING_COAL", :]
            .reset_coords(drop=True)
            + ghg_emissions_final_energy_by_sector_35r()
            .loc[:, "MINING_COAL", :]
            .reset_coords(drop=True)
        )
        .expand_dims({"CLUSTER_MINNING": ["MINING_COAL"]}, 1)
        .values
    )
    value.loc[:, ["EXTRACTION_OIL"], :] = (
        (
            ghg_emissions_all_energy_chain_by_sector_35r()
            .loc[:, "EXTRACTION_OIL", :]
            .reset_coords(drop=True)
            + ghg_emissions_final_energy_by_sector_35r()
            .loc[:, "EXTRACTION_OIL", :]
            .reset_coords(drop=True)
        )
        .expand_dims({"CLUSTER_QUARRYING": ["EXTRACTION_OIL"]}, 1)
        .values
    )
    return value


@component.add(
    name="GHG_energy_emissions_households_heating_35R_CO2eq",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_ENERGY_USE_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "buildings_ghg_emissions_end_use_energy_by_fe_35r": 3,
        "gwp_20_year": 3,
        "select_gwp_time_frame_sp": 3,
        "gwp_100_year": 3,
        "unit_conversion_tco2eq_gtco2eq": 3,
        "unit_conversion_mt_t": 3,
    },
)
def ghg_energy_emissions_households_heating_35r_co2eq():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
            "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
        },
        ["REGIONS_35_I", "NRG_FE_I", "GHG_ENERGY_USE_I"],
    )
    value.loc[:, :, ["CO2"]] = (
        (
            buildings_ghg_emissions_end_use_energy_by_fe_35r()
            .loc[:, :, "CO2"]
            .reset_coords(drop=True)
            * if_then_else(
                select_gwp_time_frame_sp() == 1,
                lambda: float(gwp_20_year().loc["CO2"]),
                lambda: float(gwp_100_year().loc["CO2"]),
            )
            / unit_conversion_tco2eq_gtco2eq()
            / unit_conversion_mt_t()
        )
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 2)
        .values
    )
    value.loc[:, :, ["CH4"]] = (
        (
            buildings_ghg_emissions_end_use_energy_by_fe_35r()
            .loc[:, :, "CH4"]
            .reset_coords(drop=True)
            * if_then_else(
                select_gwp_time_frame_sp() == 1,
                lambda: float(gwp_20_year().loc["CH4"]),
                lambda: float(gwp_100_year().loc["CH4"]),
            )
            / unit_conversion_tco2eq_gtco2eq()
            / unit_conversion_mt_t()
        )
        .expand_dims({"GHG_ENERGY_USE_I": ["CH4"]}, 2)
        .values
    )
    value.loc[:, :, ["N2O"]] = (
        (
            buildings_ghg_emissions_end_use_energy_by_fe_35r()
            .loc[:, :, "N2O"]
            .reset_coords(drop=True)
            * if_then_else(
                select_gwp_time_frame_sp() == 1,
                lambda: float(gwp_20_year().loc["N2O"]),
                lambda: float(gwp_100_year().loc["N2O"]),
            )
            / unit_conversion_tco2eq_gtco2eq()
            / unit_conversion_mt_t()
        )
        .expand_dims({"GHG_ENERGY_USE_I": ["N2O"]}, 2)
        .values
    )
    return value


@component.add(
    name="GHG_energy_emissions_households_private_transport_35R_CO2eq",
    units="GtCO2eq/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_ENERGY_USE_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "private_transport_ghg_emissions_35r": 3,
        "gwp_20_year": 3,
        "select_gwp_time_frame_sp": 3,
        "gwp_100_year": 3,
        "unit_conversion_tco2eq_gtco2eq": 3,
        "unit_conversion_mt_t": 3,
    },
)
def ghg_energy_emissions_households_private_transport_35r_co2eq():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
            "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
        },
        ["REGIONS_35_I", "NRG_FE_I", "GHG_ENERGY_USE_I"],
    )
    value.loc[:, :, ["CO2"]] = (
        (
            private_transport_ghg_emissions_35r()
            .loc[:, :, "CO2"]
            .reset_coords(drop=True)
            * if_then_else(
                select_gwp_time_frame_sp() == 1,
                lambda: float(gwp_20_year().loc["CO2"]),
                lambda: float(gwp_100_year().loc["CO2"]),
            )
            / unit_conversion_tco2eq_gtco2eq()
            / unit_conversion_mt_t()
        )
        .expand_dims({"GHG_ENERGY_USE_I": ["CO2"]}, 2)
        .values
    )
    value.loc[:, :, ["CH4"]] = (
        (
            private_transport_ghg_emissions_35r()
            .loc[:, :, "CH4"]
            .reset_coords(drop=True)
            * if_then_else(
                select_gwp_time_frame_sp() == 1,
                lambda: float(gwp_20_year().loc["CH4"]),
                lambda: float(gwp_100_year().loc["CH4"]),
            )
            / unit_conversion_tco2eq_gtco2eq()
            / unit_conversion_mt_t()
        )
        .expand_dims({"GHG_ENERGY_USE_I": ["CH4"]}, 2)
        .values
    )
    value.loc[:, :, ["N2O"]] = (
        (
            private_transport_ghg_emissions_35r()
            .loc[:, :, "N2O"]
            .reset_coords(drop=True)
            * if_then_else(
                select_gwp_time_frame_sp() == 1,
                lambda: float(gwp_20_year().loc["N2O"]),
                lambda: float(gwp_100_year().loc["N2O"]),
            )
            / unit_conversion_tco2eq_gtco2eq()
            / unit_conversion_mt_t()
        )
        .expand_dims({"GHG_ENERGY_USE_I": ["N2O"]}, 2)
        .values
    )
    return value


@component.add(
    name="GHG_energy_supply_emissions",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "GHG_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={"ghg_fugitive_emissions_supply": 1},
)
def ghg_energy_supply_emissions():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_9_I", "GHG_I"],
    )
    value.loc[:, _subscript_dict["GHG_ENERGY_USE_I"]] = sum(
        ghg_fugitive_emissions_supply().rename({"SECTORS_I": "SECTORS_I!"}),
        dim=["SECTORS_I!"],
    ).values
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, _subscript_dict["GHG_ENERGY_USE_I"]] = False
    value.values[except_subs.values] = 0
    return value


@component.add(
    name="GHG_energy_transformation_emissions",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ghg_emissions_by_protra_sectors_9r": 1},
)
def ghg_energy_transformation_emissions():
    """
    Total greenhouse gas emissions generated in energy production sectors ( elec and heat )by region and type of gas, in Mt/year.
    """
    return sum(
        ghg_emissions_by_protra_sectors_9r().rename({"SECTORS_I": "SECTORS_I!"}),
        dim=["SECTORS_I!"],
    )


@component.add(
    name="GHG_extraction_emissions",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_coal_extraction_emissions": 1,
        "ghg_nat_gas_extraction_emissions": 1,
        "ghg_oil_extraction_emissions": 1,
    },
)
def ghg_extraction_emissions():
    """
    Greenhouse gas emissions generated by the extraction of fossil fuels, in Mt/year.
    """
    return (
        ghg_coal_extraction_emissions().loc[:, :, "MINING_COAL"].reset_coords(drop=True)
        + ghg_nat_gas_extraction_emissions()
        .loc[_subscript_dict["REGIONS_9_I"], :, "EXTRACTION_GAS"]
        .reset_coords(drop=True)
        .rename({"REGIONS_36_I": "REGIONS_9_I"})
        + ghg_oil_extraction_emissions()
        .loc[_subscript_dict["REGIONS_9_I"], :, "EXTRACTION_OIL"]
        .reset_coords(drop=True)
        .rename({"REGIONS_36_I": "REGIONS_9_I"})
    )


@component.add(
    name="GHG_fugitive_emissions_refining",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "emission_factors_fugitives_refining": 2,
        "ti_by_proref_and_commodity": 3,
        "unit_conversion_toe_m3": 1,
        "unit_conversion_j_toe": 1,
        "unit_conversion_j_ej": 2,
        "unit_conversion_g_mt": 2,
        "unit_conversion_j_m3_nat_gas": 1,
        "emission_factors_gas_to_liquid_production": 1,
        "unit_conversion_kg_mt": 1,
        "unit_conversion_tj_ej": 1,
        "emission_factors_coal_to_gas_production": 1,
    },
)
def ghg_fugitive_emissions_refining():
    """
    Greenhouse gas emissions due to fugitive emissions generated by the refining process, in Mt/year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_9_I", "SECTORS_I", "GHG_I"],
    )
    value.loc[:, ["REFINING"], _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            emission_factors_fugitives_refining()
            .loc["PE_oil", :]
            .reset_coords(drop=True)
            * ti_by_proref_and_commodity()
            .loc[:, "PROREF_refinery_oil", "TI_liquid_fossil"]
            .reset_coords(drop=True)
            * 1
            / unit_conversion_toe_m3()
            * 1
            / unit_conversion_j_toe()
            * unit_conversion_j_ej()
            / unit_conversion_g_mt()
            + emission_factors_fugitives_refining()
            .loc["PE_natural_gas", :]
            .reset_coords(drop=True)
            * ti_by_proref_and_commodity()
            .loc[:, "PROREF_refinery_oil", "TI_gas_fossil"]
            .reset_coords(drop=True)
            / unit_conversion_j_m3_nat_gas()
            * unit_conversion_j_ej()
            / unit_conversion_g_mt()
            + (
                emission_factors_coal_to_gas_production()
                + float(emission_factors_gas_to_liquid_production().loc["CO2"])
            )
            * ti_by_proref_and_commodity()
            .loc[:, "PROREF_refinery_coal", "TI_gas_fossil"]
            .reset_coords(drop=True)
            * unit_conversion_tj_ej()
            / unit_conversion_kg_mt()
        )
        .transpose("REGIONS_9_I", "GHG_ENERGY_USE_I")
        .expand_dims({"CLUSTER_REFINERY": _subscript_dict["CLUSTER_REFINERY"]}, 1)
        .values
    )
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, ["REFINING"], _subscript_dict["GHG_ENERGY_USE_I"]] = False
    value.values[except_subs.values] = 0
    return value


@component.add(
    name="GHG_fugitive_emissions_supply",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "SECTORS_I", "GHG_ENERGY_USE_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "emission_factors_fugitives_supply": 2,
        "total_fe_including_net_trade": 2,
        "unit_conversion_j_ej": 2,
        "unit_conversion_j_m3_nat_gas": 1,
        "unit_conversion_g_mt": 2,
        "unit_conversion_j_toe": 1,
        "unit_conversion_toe_m3": 1,
    },
)
def ghg_fugitive_emissions_supply():
    """
    Greenhouse gas emissions due to fugitive emissions generated during the fossil fuel transport, in Mt/year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
            "GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"],
        },
        ["REGIONS_9_I", "SECTORS_I", "GHG_ENERGY_USE_I"],
    )
    value.loc[:, ["DISTRIBUTION_GAS"], :] = (
        (
            (
                emission_factors_fugitives_supply()
                .loc["FE_gas", :]
                .reset_coords(drop=True)
                * total_fe_including_net_trade()
                .loc[:, "FE_gas"]
                .reset_coords(drop=True)
                * unit_conversion_j_ej()
                * 1
                / unit_conversion_j_m3_nat_gas()
            )
            / unit_conversion_g_mt()
        )
        .transpose("REGIONS_9_I", "GHG_ENERGY_USE_I")
        .expand_dims({"CLUSTER_OTHER_ENERGY_ACTIVITIES": ["DISTRIBUTION_GAS"]}, 1)
        .values
    )
    value.loc[:, ["TRANSPORT_PIPELINE"], :] = (
        (
            (
                emission_factors_fugitives_supply()
                .loc["FE_liquid", :]
                .reset_coords(drop=True)
                * total_fe_including_net_trade()
                .loc[:, "FE_liquid"]
                .reset_coords(drop=True)
                * 1
                / unit_conversion_toe_m3()
                * 1
                / unit_conversion_j_toe()
                * unit_conversion_j_ej()
            )
            / unit_conversion_g_mt()
        )
        .transpose("REGIONS_9_I", "GHG_ENERGY_USE_I")
        .expand_dims(
            {"CLUSTER_GAS_PIPELINES": _subscript_dict["CLUSTER_GAS_PIPELINES"]}, 1
        )
        .values
    )
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, ["DISTRIBUTION_GAS"], :] = False
    except_subs.loc[:, ["TRANSPORT_PIPELINE"], :] = False
    value.values[except_subs.values] = 0
    return value


@component.add(
    name="GHG_intensity_emissions_by_FE_35R",
    units="Mt/EJ",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_protra_emissions_by_fe_35r": 1,
        "unit_conversion_tj_ej": 1,
        "final_energy_demand_by_fe_35r": 1,
    },
)
def ghg_intensity_emissions_by_fe_35r():
    return zidz(
        ghg_protra_emissions_by_fe_35r(),
        (final_energy_demand_by_fe_35r() / unit_conversion_tj_ej()).expand_dims(
            {"GHG_I": _subscript_dict["GHG_I"]}, 2
        ),
    )


@component.add(
    name="GHG_intensity_of_passenger_transport_35R",
    units="g/(Year*km*person)",
    subscripts=["REGIONS_35_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "private_passenger_transport_ghg_emissions_all_energy_chain_35r": 1,
        "total_passenger_transport_demand": 1,
        "unit_conversion_g_mt": 1,
    },
)
def ghg_intensity_of_passenger_transport_35r():
    """
    GHG emissions per cápita and km.
    """
    return (
        zidz(
            sum(
                private_passenger_transport_ghg_emissions_all_energy_chain_35r().rename(
                    {"NRG_FE_I": "NRG_FE_I!"}
                ),
                dim=["NRG_FE_I!"],
            ),
            total_passenger_transport_demand().expand_dims(
                {"GHG_I": _subscript_dict["GHG_I"]}, 1
            ),
        )
        * unit_conversion_g_mt()
    )


@component.add(
    name="GHG_nat_gas_extraction_emissions",
    units="Mt/Year",
    subscripts=["REGIONS_36_I", "GHG_I", "SECTORS_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "world_pe_by_commodity": 2,
        "emission_factors_fugitives_extraction": 1,
        "unit_conversion_j_m3_nat_gas": 1,
        "unit_conversion_j_ej": 1,
        "unit_conversion_g_mt": 1,
        "pe_by_commodity": 1,
    },
)
def ghg_nat_gas_extraction_emissions():
    """
    Greenhouse gas emissions due to fugitive emissions generated by the extraction natural gas resources.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_36_I": _subscript_dict["REGIONS_36_I"],
            "GHG_I": _subscript_dict["GHG_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
        },
        ["REGIONS_36_I", "GHG_I", "SECTORS_I"],
    )
    value.loc[
        _subscript_dict["REGIONS_9_I"],
        _subscript_dict["GHG_ENERGY_USE_I"],
        ["EXTRACTION_GAS"],
    ] = (
        (
            float(world_pe_by_commodity().loc["PE_natural_gas"])
            * emission_factors_fugitives_extraction()
            .loc["PE_natural_gas", :]
            .reset_coords(drop=True)
            / unit_conversion_j_m3_nat_gas()
            * unit_conversion_j_ej()
            / unit_conversion_g_mt()
            * zidz(
                pe_by_commodity().loc[:, "PE_natural_gas"].reset_coords(drop=True),
                float(world_pe_by_commodity().loc["PE_natural_gas"]),
            )
        )
        .transpose("REGIONS_9_I", "GHG_ENERGY_USE_I")
        .expand_dims({"CLUSTER_QUARRYING": ["EXTRACTION_GAS"]}, 2)
        .values
    )
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[
        _subscript_dict["REGIONS_9_I"],
        _subscript_dict["GHG_ENERGY_USE_I"],
        ["EXTRACTION_GAS"],
    ] = False
    value.values[except_subs.values] = 0
    return value


@component.add(
    name="GHG_oil_extraction_emissions",
    units="Mt/Year",
    subscripts=["REGIONS_36_I", "GHG_I", "SECTORS_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "world_pe_by_commodity": 2,
        "emission_factors_fugitives_extraction": 1,
        "unit_conversion_toe_m3": 1,
        "unit_conversion_j_toe": 1,
        "unit_conversion_j_ej": 1,
        "unit_conversion_g_mt": 1,
        "pe_by_commodity": 1,
    },
)
def ghg_oil_extraction_emissions():
    """
    Greenhouse gas emissions due to fugitive emissions generated by the extraction of oil resources.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_36_I": _subscript_dict["REGIONS_36_I"],
            "GHG_I": _subscript_dict["GHG_I"],
            "SECTORS_I": _subscript_dict["SECTORS_I"],
        },
        ["REGIONS_36_I", "GHG_I", "SECTORS_I"],
    )
    value.loc[
        _subscript_dict["REGIONS_9_I"],
        _subscript_dict["GHG_ENERGY_USE_I"],
        ["EXTRACTION_OIL"],
    ] = (
        (
            float(world_pe_by_commodity().loc["PE_oil"])
            * emission_factors_fugitives_extraction()
            .loc["PE_oil", :]
            .reset_coords(drop=True)
            / unit_conversion_toe_m3()
            / unit_conversion_j_toe()
            * unit_conversion_j_ej()
            / unit_conversion_g_mt()
            * zidz(
                pe_by_commodity().loc[:, "PE_oil"].reset_coords(drop=True),
                float(world_pe_by_commodity().loc["PE_oil"]),
            )
        )
        .transpose("REGIONS_9_I", "GHG_ENERGY_USE_I")
        .expand_dims({"CLUSTER_QUARRYING": ["EXTRACTION_OIL"]}, 2)
        .values
    )
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[
        _subscript_dict["REGIONS_9_I"],
        _subscript_dict["GHG_ENERGY_USE_I"],
        ["EXTRACTION_OIL"],
    ] = False
    value.values[except_subs.values] = 0
    return value


@component.add(
    name="GHG_PROTRA_emissions_by_FE_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_emissions_all_energy_chain_by_sector_35r": 5,
        "buildings_ghg_emissions_end_use_energy_by_fe_35r": 5,
        "private_transport_ghg_emissions_35r": 5,
        "final_energy_demand_by_sector_and_fe": 5,
        "unit_conversion_kg_mt": 10,
        "ghg_emission_factors_stationary_combustion": 5,
    },
)
def ghg_protra_emissions_by_fe_35r():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    )
    value.loc[:, ["FE_elec"], :] = (
        (
            ghg_emissions_all_energy_chain_by_sector_35r()
            .loc[:, "ELECTRICITY_COAL", :]
            .reset_coords(drop=True)
            + ghg_emissions_all_energy_chain_by_sector_35r()
            .loc[:, "ELECTRICITY_GAS", :]
            .reset_coords(drop=True)
            + ghg_emissions_all_energy_chain_by_sector_35r()
            .loc[:, "ELECTRICITY_OIL", :]
            .reset_coords(drop=True)
            + ghg_emissions_all_energy_chain_by_sector_35r()
            .loc[:, "ELECTRICITY_OTHER", :]
            .reset_coords(drop=True)
        )
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_elec"]}, 1)
        .values
    )
    value.loc[:, ["FE_gas"], :] = (
        (
            sum(
                final_energy_demand_by_sector_and_fe()
                .loc[:, :, "FE_gas"]
                .reset_coords(drop=True)
                .rename({"SECTORS_NON_ENERGY_I": "SECTORS_NON_ENERGY_I!"}),
                dim=["SECTORS_NON_ENERGY_I!"],
            )
            * ghg_emission_factors_stationary_combustion()
            .loc["FE_gas", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
            + private_transport_ghg_emissions_35r()
            .loc[:, "FE_gas", :]
            .reset_coords(drop=True)
            + buildings_ghg_emissions_end_use_energy_by_fe_35r()
            .loc[:, "FE_gas", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_gas"]}, 1)
        .values
    )
    value.loc[:, ["FE_heat"], :] = (
        ghg_emissions_all_energy_chain_by_sector_35r()
        .loc[:, "STEAM_HOT_WATER", :]
        .reset_coords(drop=True)
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_heat"]}, 1)
        .values
    )
    value.loc[:, ["FE_hydrogen"], :] = (
        (
            sum(
                final_energy_demand_by_sector_and_fe()
                .loc[:, :, "FE_hydrogen"]
                .reset_coords(drop=True)
                .rename({"SECTORS_NON_ENERGY_I": "SECTORS_NON_ENERGY_I!"}),
                dim=["SECTORS_NON_ENERGY_I!"],
            )
            * ghg_emission_factors_stationary_combustion()
            .loc["FE_hydrogen", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
            + private_transport_ghg_emissions_35r()
            .loc[:, "FE_hydrogen", :]
            .reset_coords(drop=True)
            + buildings_ghg_emissions_end_use_energy_by_fe_35r()
            .loc[:, "FE_hydrogen", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_hydrogen"]}, 1)
        .values
    )
    value.loc[:, ["FE_liquid"], :] = (
        (
            sum(
                final_energy_demand_by_sector_and_fe()
                .loc[:, :, "FE_liquid"]
                .reset_coords(drop=True)
                .rename({"SECTORS_NON_ENERGY_I": "SECTORS_NON_ENERGY_I!"}),
                dim=["SECTORS_NON_ENERGY_I!"],
            )
            * ghg_emission_factors_stationary_combustion()
            .loc["FE_liquid", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
            + private_transport_ghg_emissions_35r()
            .loc[:, "FE_liquid", :]
            .reset_coords(drop=True)
            + buildings_ghg_emissions_end_use_energy_by_fe_35r()
            .loc[:, "FE_liquid", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_liquid"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_bio"], :] = (
        (
            sum(
                final_energy_demand_by_sector_and_fe()
                .loc[:, :, "FE_solid_bio"]
                .reset_coords(drop=True)
                .rename({"SECTORS_NON_ENERGY_I": "SECTORS_NON_ENERGY_I!"}),
                dim=["SECTORS_NON_ENERGY_I!"],
            )
            * ghg_emission_factors_stationary_combustion()
            .loc["FE_solid_bio", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
            + private_transport_ghg_emissions_35r()
            .loc[:, "FE_solid_bio", :]
            .reset_coords(drop=True)
            + buildings_ghg_emissions_end_use_energy_by_fe_35r()
            .loc[:, "FE_solid_bio", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_bio"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_fossil"], :] = (
        (
            sum(
                final_energy_demand_by_sector_and_fe()
                .loc[:, :, "FE_solid_fossil"]
                .reset_coords(drop=True)
                .rename({"SECTORS_NON_ENERGY_I": "SECTORS_NON_ENERGY_I!"}),
                dim=["SECTORS_NON_ENERGY_I!"],
            )
            * ghg_emission_factors_stationary_combustion()
            .loc["FE_solid_fossil", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
            + private_transport_ghg_emissions_35r()
            .loc[:, "FE_solid_fossil", :]
            .reset_coords(drop=True)
            + buildings_ghg_emissions_end_use_energy_by_fe_35r()
            .loc[:, "FE_solid_fossil", :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_fossil"]}, 1)
        .values
    )
    return value


@component.add(
    name="GHG_refining_emissions",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ghg_fugitive_emissions_refining": 1},
)
def ghg_refining_emissions():
    """
    Greenhouse gas emissions generated by the refining process, in Mt/year.
    """
    return (
        ghg_fugitive_emissions_refining().loc[:, "REFINING", :].reset_coords(drop=True)
    )


@component.add(
    name="households_end_use_energy_emissions_9R",
    units="Mt/Year",
    subscripts=["REGIONS_9_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"households_ghg_emissions_end_use_energy_35r": 2},
)
def households_end_use_energy_emissions_9r():
    """
    Greenhouse gas emissions generated in households by region ( 9 regions), type of final energy and type of gas, in Mt/year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_9_I", "GHG_I"],
    )
    value.loc[_subscript_dict["REGIONS_8_I"], :] = sum(
        households_ghg_emissions_end_use_energy_35r()
        .loc[_subscript_dict["REGIONS_8_I"], :, :]
        .rename({"REGIONS_35_I": "REGIONS_8_I", "NRG_FE_I": "NRG_FE_I!"}),
        dim=["NRG_FE_I!"],
    ).values
    value.loc[["EU27"], :] = (
        sum(
            households_ghg_emissions_end_use_energy_35r()
            .loc[_subscript_dict["REGIONS_EU27_I"], :, :]
            .rename({"REGIONS_35_I": "REGIONS_EU27_I!", "NRG_FE_I": "NRG_FE_I!"}),
            dim=["REGIONS_EU27_I!", "NRG_FE_I!"],
        )
        .expand_dims({"REGIONS_36_I": ["EU27"]}, 0)
        .values
    )
    return value


@component.add(
    name="households_GHG_emissions_end_use_energy_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "buildings_ghg_emissions_end_use_energy_by_fe_35r": 1,
        "private_passenger_transport_emissions_end_use_energy_by_fe": 1,
        "unit_conversion_kg_mt": 1,
    },
)
def households_ghg_emissions_end_use_energy_35r():
    """
    Greenhouse gas emissions generated in households by region, type of final energy and type of gas, in Mt/year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    )
    value.loc[:, :, _subscript_dict["GHG_ENERGY_USE_I"]] = (
        (
            buildings_ghg_emissions_end_use_energy_by_fe_35r()
            .loc[:, :, _subscript_dict["GHG_ENERGY_USE_I"]]
            .rename({"GHG_I": "GHG_ENERGY_USE_I"})
            + private_passenger_transport_emissions_end_use_energy_by_fe()
            .loc[:, :, _subscript_dict["GHG_ENERGY_USE_I"]]
            .rename({"GHG_I": "GHG_ENERGY_USE_I"})
        )
        / unit_conversion_kg_mt()
    ).values
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, :, ["CO2"]] = False
    except_subs.loc[:, :, ["CH4"]] = False
    except_subs.loc[:, :, ["N2O"]] = False
    value.values[except_subs.values] = 0
    return value


@component.add(
    name="INITIAL_CO2eq_emissions_per_unit_of_sector_output",
    units="tCO2eq/Mdollars_2015",
    subscripts=["REGIONS_35_I", "SECTORS_I"],
    comp_type="Stateful",
    comp_subtype="Initial",
    depends_on={"_initial_initial_co2eq_emissions_per_unit_of_sector_output": 1},
    other_deps={
        "_initial_initial_co2eq_emissions_per_unit_of_sector_output": {
            "initial": {"co2eq_emissions_per_unit_of_sector_output_35r": 1},
            "step": {},
        }
    },
)
def initial_co2eq_emissions_per_unit_of_sector_output():
    return _initial_initial_co2eq_emissions_per_unit_of_sector_output()


_initial_initial_co2eq_emissions_per_unit_of_sector_output = Initial(
    lambda: co2eq_emissions_per_unit_of_sector_output_35r(),
    "_initial_initial_co2eq_emissions_per_unit_of_sector_output",
)


@component.add(
    name="INITIAL_GHG_CO2eq_emissions_per_unit_of_sector_output",
    units="tCO2eq/Mdollars_2015",
    subscripts=["REGIONS_35_I", "SECTORS_I", "GHG_ENERGY_USE_I"],
    comp_type="Stateful",
    comp_subtype="Initial",
    depends_on={"_initial_initial_ghg_co2eq_emissions_per_unit_of_sector_output": 1},
    other_deps={
        "_initial_initial_ghg_co2eq_emissions_per_unit_of_sector_output": {
            "initial": {"ghg_emissions_co2eq_per_unit_of_sector_output_35r": 1},
            "step": {},
        }
    },
)
def initial_ghg_co2eq_emissions_per_unit_of_sector_output():
    return _initial_initial_ghg_co2eq_emissions_per_unit_of_sector_output()


_initial_initial_ghg_co2eq_emissions_per_unit_of_sector_output = Initial(
    lambda: ghg_emissions_co2eq_per_unit_of_sector_output_35r(),
    "_initial_initial_ghg_co2eq_emissions_per_unit_of_sector_output",
)


@component.add(
    name="initial_share_passengers_private_transport_by_type_of_power_train",
    units="1",
    subscripts=["REGIONS_35_I", "TRANSPORT_POWER_TRAIN_I", "PRIVATE_TRANSPORT_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"initial_passenger_private_fleet_by_type_of_hh": 2},
)
def initial_share_passengers_private_transport_by_type_of_power_train():
    """
    Initial share of passengers transport by type of power train (share of gasoline_engine, diesel_engines,...)
    """
    return zidz(
        sum(
            initial_passenger_private_fleet_by_type_of_hh().rename(
                {"HOUSEHOLDS_I": "HOUSEHOLDS_I!"}
            ),
            dim=["HOUSEHOLDS_I!"],
        ),
        sum(
            initial_passenger_private_fleet_by_type_of_hh().rename(
                {
                    "TRANSPORT_POWER_TRAIN_I": "TRANSPORT_POWER_TRAIN_I!",
                    "PRIVATE_TRANSPORT_I": "PRIVATE_TRANSPORT_I!",
                    "HOUSEHOLDS_I": "HOUSEHOLDS_I!",
                }
            ),
            dim=["TRANSPORT_POWER_TRAIN_I!", "PRIVATE_TRANSPORT_I!", "HOUSEHOLDS_I!"],
        )
        .expand_dims(
            {"TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"]}, 1
        )
        .expand_dims(
            {"PRIVATE_TRANSPORT_I": _subscript_dict["PRIVATE_TRANSPORT_I"]}, 2
        ),
    )


@component.add(
    name="passenger_transport_emissions_end_use_energy",
    units="kg/Year",
    subscripts=[
        "REGIONS_35_I",
        "TRANSPORT_POWER_TRAIN_I",
        "PASSENGERS_TRANSPORT_MODE_I",
        "GHG_I",
    ],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "energy_passenger_transport_consumption": 4,
        "share_elec_in_phev": 2,
        "emission_factors_private_transport": 2,
        "unit_conversion_j_mj": 4,
        "unit_conversion_j_tj": 4,
        "emission_factors_public_transport": 2,
    },
)
def passenger_transport_emissions_end_use_energy():
    """
    Greenhouse gas emissions generated by passengers transport vehicles, by region, power train, transport mode and type of gas, in kg/year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
            "PASSENGERS_TRANSPORT_MODE_I": _subscript_dict[
                "PASSENGERS_TRANSPORT_MODE_I"
            ],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        [
            "REGIONS_35_I",
            "TRANSPORT_POWER_TRAIN_I",
            "PASSENGERS_TRANSPORT_MODE_I",
            "GHG_I",
        ],
    )
    value.loc[:, ["PHEV"], _subscript_dict["PRIVATE_TRANSPORT_I"], :] = (
        (
            sum(
                energy_passenger_transport_consumption()
                .loc[:, "PHEV", _subscript_dict["PRIVATE_TRANSPORT_I"], :]
                .reset_coords(drop=True)
                .rename(
                    {
                        "PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I",
                        "HOUSEHOLDS_I": "HOUSEHOLDS_I!",
                    }
                ),
                dim=["HOUSEHOLDS_I!"],
            )
            * (1 - share_elec_in_phev())
            * emission_factors_private_transport()
            .loc["PHEV", :, :]
            .reset_coords(drop=True)
            * unit_conversion_j_mj()
            / unit_conversion_j_tj()
        )
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["PHEV"]}, 1)
        .values
    )
    except_subs = xr.zeros_like(value, dtype=bool)
    except_subs.loc[:, :, _subscript_dict["PRIVATE_TRANSPORT_I"], :] = True
    except_subs.loc[:, ["PHEV"], _subscript_dict["PRIVATE_TRANSPORT_I"], :] = False
    value.values[except_subs.values] = (
        sum(
            energy_passenger_transport_consumption()
            .loc[:, :, _subscript_dict["PRIVATE_TRANSPORT_I"], :]
            .rename(
                {
                    "PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I",
                    "HOUSEHOLDS_I": "HOUSEHOLDS_I!",
                }
            ),
            dim=["HOUSEHOLDS_I!"],
        )
        * emission_factors_private_transport()
        * unit_conversion_j_mj()
        / unit_conversion_j_tj()
    ).values[except_subs.loc[:, :, _subscript_dict["PRIVATE_TRANSPORT_I"], :].values]
    except_subs = xr.zeros_like(value, dtype=bool)
    except_subs.loc[:, :, _subscript_dict["PUBLIC_TRANSPORT_I"], :] = True
    except_subs.loc[:, ["PHEV"], _subscript_dict["PUBLIC_TRANSPORT_I"], :] = False
    value.values[except_subs.values] = (
        sum(
            energy_passenger_transport_consumption()
            .loc[:, :, _subscript_dict["PUBLIC_TRANSPORT_I"], :]
            .rename(
                {
                    "PASSENGERS_TRANSPORT_MODE_I": "PUBLIC_TRANSPORT_I",
                    "HOUSEHOLDS_I": "HOUSEHOLDS_I!",
                }
            ),
            dim=["HOUSEHOLDS_I!"],
        )
        * emission_factors_public_transport()
        * unit_conversion_j_mj()
        / unit_conversion_j_tj()
    ).values[except_subs.loc[:, :, _subscript_dict["PUBLIC_TRANSPORT_I"], :].values]
    value.loc[:, ["PHEV"], _subscript_dict["PUBLIC_TRANSPORT_I"], :] = (
        (
            sum(
                energy_passenger_transport_consumption()
                .loc[:, "PHEV", _subscript_dict["PUBLIC_TRANSPORT_I"], :]
                .reset_coords(drop=True)
                .rename(
                    {
                        "PASSENGERS_TRANSPORT_MODE_I": "PUBLIC_TRANSPORT_I",
                        "HOUSEHOLDS_I": "HOUSEHOLDS_I!",
                    }
                ),
                dim=["HOUSEHOLDS_I!"],
            )
            * (1 - share_elec_in_phev())
            * emission_factors_public_transport()
            .loc["PHEV", :, :]
            .reset_coords(drop=True)
            * unit_conversion_j_mj()
            / unit_conversion_j_tj()
        )
        .expand_dims({"TRANSPORT_POWER_TRAIN_I": ["PHEV"]}, 1)
        .values
    )
    return value


@component.add(
    name="passenger_transport_emissions_end_use_energy_by_FE_and_transport_mode",
    units="kg/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "PASSENGERS_TRANSPORT_MODE_I", "GHG_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "switch_eco_hh_transport_energy_bottom_up": 2,
        "passengers_transport_ghg_emissions": 5,
        "passenger_transport_emissions_end_use_energy": 5,
    },
)
def passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode():
    """
    Greenhouse gas emissions generated by passengers transport vehicles, by region, type of final energy and type of gas, in kg/year.
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
            "PASSENGERS_TRANSPORT_MODE_I": _subscript_dict[
                "PASSENGERS_TRANSPORT_MODE_I"
            ],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_35_I", "NRG_FE_I", "PASSENGERS_TRANSPORT_MODE_I", "GHG_I"],
    )
    value.loc[:, ["FE_elec"], :, :] = 0
    value.loc[:, ["FE_gas"], :, :] = (
        if_then_else(
            switch_eco_hh_transport_energy_bottom_up() == 0,
            lambda: passengers_transport_ghg_emissions()
            .loc[:, "ICE_gas", :, :]
            .reset_coords(drop=True),
            lambda: passenger_transport_emissions_end_use_energy()
            .loc[:, "ICE_gas", :, :]
            .reset_coords(drop=True),
        )
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_gas"]}, 1)
        .values
    )
    value.loc[:, ["FE_heat"], :, :] = 0
    value.loc[:, ["FE_hydrogen"], :, :] = 0
    value.loc[:, ["FE_liquid"], :, :] = (
        if_then_else(
            switch_eco_hh_transport_energy_bottom_up() == 0,
            lambda: passengers_transport_ghg_emissions()
            .loc[:, "ICE_gasoline", :, :]
            .reset_coords(drop=True)
            + passengers_transport_ghg_emissions()
            .loc[:, "ICE_diesel", :, :]
            .reset_coords(drop=True)
            + passengers_transport_ghg_emissions()
            .loc[:, "ICE_LPG", :, :]
            .reset_coords(drop=True)
            + passengers_transport_ghg_emissions()
            .loc[:, "PHEV", :, :]
            .reset_coords(drop=True),
            lambda: passenger_transport_emissions_end_use_energy()
            .loc[:, "ICE_gasoline", :, :]
            .reset_coords(drop=True)
            + passenger_transport_emissions_end_use_energy()
            .loc[:, "ICE_diesel", :, :]
            .reset_coords(drop=True)
            + passenger_transport_emissions_end_use_energy()
            .loc[:, "ICE_LPG", :, :]
            .reset_coords(drop=True)
            + passenger_transport_emissions_end_use_energy()
            .loc[:, "PHEV", :, :]
            .reset_coords(drop=True),
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_liquid"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_bio"], :, :] = 0
    value.loc[:, ["FE_solid_fossil"], :, :] = 0
    return value


@component.add(
    name="passenger_transport_GHG_emissions_all_energy_chain_by_transport_mode_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "PASSENGERS_TRANSPORT_MODE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec": 6,
        "passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_fe_elec": 1,
    },
)
def passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
            "PASSENGERS_TRANSPORT_MODE_I": _subscript_dict[
                "PASSENGERS_TRANSPORT_MODE_I"
            ],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_35_I", "NRG_FE_I", "PASSENGERS_TRANSPORT_MODE_I", "GHG_I"],
    )
    value.loc[:, ["FE_gas"], :, :] = (
        passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
        .loc[:, "FE_gas", :, :]
        .reset_coords(drop=True)
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_gas"]}, 1)
        .values
    )
    value.loc[:, ["FE_heat"], :, :] = (
        passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
        .loc[:, "FE_heat", :, :]
        .reset_coords(drop=True)
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_heat"]}, 1)
        .values
    )
    value.loc[:, ["FE_liquid"], :, :] = (
        passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
        .loc[:, "FE_liquid", :, :]
        .reset_coords(drop=True)
        .expand_dims({"NRG_COMMODITIES_I": ["FE_liquid"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_fossil"], :, :] = (
        passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
        .loc[:, "FE_solid_fossil", :, :]
        .reset_coords(drop=True)
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_fossil"]}, 1)
        .values
    )
    value.loc[:, ["FE_elec"], :, :] = (
        passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_fe_elec()
        .loc[:, "FE_elec", :, :]
        .reset_coords(drop=True)
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_elec"]}, 1)
        .values
    )
    value.loc[:, ["FE_hydrogen"], :, :] = (
        passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
        .loc[:, "FE_hydrogen", :, :]
        .reset_coords(drop=True)
        .expand_dims({"NRG_COMMODITIES_I": ["FE_hydrogen"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_bio"], :, :] = (
        passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
        .loc[:, "FE_solid_bio", :, :]
        .reset_coords(drop=True)
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_bio"]}, 1)
        .values
    )
    return value


@component.add(
    name="passenger_transport_GHG_emissions_all_energy_chain_by_transport_mode_35R_exc_FE_elec",
    units="Mt/Year",
    subscripts=[
        "REGIONS_35_I",
        "NRG_COMMODITIES_I",
        "PASSENGERS_TRANSPORT_MODE_I",
        "GHG_I",
    ],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode": 6,
        "unit_conversion_kg_mt": 6,
    },
)
def passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_COMMODITIES_I": _subscript_dict["NRG_COMMODITIES_I"],
            "PASSENGERS_TRANSPORT_MODE_I": _subscript_dict[
                "PASSENGERS_TRANSPORT_MODE_I"
            ],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_35_I", "NRG_COMMODITIES_I", "PASSENGERS_TRANSPORT_MODE_I", "GHG_I"],
    )
    value.loc[:, ["FE_gas"], :, :] = (
        (
            passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode()
            .loc[:, "FE_gas", :, :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_gas"]}, 1)
        .values
    )
    value.loc[:, ["FE_heat"], :, :] = (
        (
            passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode()
            .loc[:, "FE_heat", :, :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_heat"]}, 1)
        .values
    )
    value.loc[:, ["FE_liquid"], :, :] = (
        (
            passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode()
            .loc[:, "FE_liquid", :, :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_liquid"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_fossil"], :, :] = (
        (
            passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode()
            .loc[:, "FE_solid_fossil", :, :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_fossil"]}, 1)
        .values
    )
    value.loc[:, ["FE_hydrogen"], :, :] = (
        (
            passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode()
            .loc[:, "FE_hydrogen", :, :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_hydrogen"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_bio"], :, :] = (
        (
            passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode()
            .loc[:, "FE_solid_bio", :, :]
            .reset_coords(drop=True)
            / unit_conversion_kg_mt()
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_bio"]}, 1)
        .values
    )
    return value


@component.add(
    name="passenger_transport_GHG_emissions_all_energy_chain_by_transport_mode_35R_FE_elec",
    subscripts=[
        "REGIONS_35_I",
        "FINAL_ENERGY_TRANSMISSION_I",
        "PASSENGERS_TRANSPORT_MODE_I",
        "GHG_I",
    ],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "ghg_intensity_emissions_by_fe_35r": 1,
        "energy_passenger_transport_consumption_by_fe_35r": 1,
        "unit_conversion_mj_ej": 1,
    },
)
def passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_fe_elec():
    return (
        (
            ghg_intensity_emissions_by_fe_35r()
            .loc[:, "FE_elec", :]
            .reset_coords(drop=True)
            * sum(
                energy_passenger_transport_consumption_by_fe_35r()
                .loc[:, "FE_elec", :, :]
                .reset_coords(drop=True)
                .rename({"HOUSEHOLDS_I": "HOUSEHOLDS_I!"}),
                dim=["HOUSEHOLDS_I!"],
            )
            / unit_conversion_mj_ej()
        )
        .transpose("REGIONS_35_I", "PASSENGERS_TRANSPORT_MODE_I", "GHG_I")
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_elec"]}, 1)
    )


@component.add(
    name="passengers_transport_GHG_emissions",
    units="kg/Year",
    subscripts=[
        "REGIONS_35_I",
        "TRANSPORT_POWER_TRAIN_I",
        "PASSENGERS_TRANSPORT_MODE_I",
        "GHG_I",
    ],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "transport_final_energy_consumption_by_fe": 1,
        "emission_factors_private_transport": 1,
        "initial_share_passengers_private_transport_by_type_of_power_train": 1,
    },
)
def passengers_transport_ghg_emissions():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "TRANSPORT_POWER_TRAIN_I": _subscript_dict["TRANSPORT_POWER_TRAIN_I"],
            "PASSENGERS_TRANSPORT_MODE_I": _subscript_dict[
                "PASSENGERS_TRANSPORT_MODE_I"
            ],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        [
            "REGIONS_35_I",
            "TRANSPORT_POWER_TRAIN_I",
            "PASSENGERS_TRANSPORT_MODE_I",
            "GHG_I",
        ],
    )
    value.loc[:, :, _subscript_dict["PRIVATE_TRANSPORT_I"], :] = (
        transport_final_energy_consumption_by_fe()
        .loc[:, "FE_liquid"]
        .reset_coords(drop=True)
        * emission_factors_private_transport()
        * initial_share_passengers_private_transport_by_type_of_power_train()
    ).values
    value.loc[:, :, _subscript_dict["PUBLIC_TRANSPORT_I"], :] = 0
    return value


@component.add(
    name="private_passenger_transport_emissions_end_use_energy_by_FE",
    units="kg/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode": 1
    },
)
def private_passenger_transport_emissions_end_use_energy_by_fe():
    return sum(
        passenger_transport_emissions_end_use_energy_by_fe_and_transport_mode()
        .loc[:, :, _subscript_dict["PRIVATE_TRANSPORT_I"], :]
        .rename({"PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I!"}),
        dim=["PRIVATE_TRANSPORT_I!"],
    )


@component.add(
    name="private_passenger_transport_GHG_emissions_all_energy_chain_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r": 1
    },
)
def private_passenger_transport_ghg_emissions_all_energy_chain_35r():
    """
    Private passenger transport GHG direct emissions including indirect electricity consumption PROTRA emissions.
    """
    return sum(
        passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r()
        .loc[:, :, _subscript_dict["PRIVATE_TRANSPORT_I"], :]
        .rename({"PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I!"}),
        dim=["PRIVATE_TRANSPORT_I!"],
    )


@component.add(
    name="private_transport_GHG_emissions_35R",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec": 5
    },
)
def private_transport_ghg_emissions_35r():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_35_I", "NRG_FE_I", "GHG_I"],
    )
    value.loc[:, ["FE_gas"], :] = (
        sum(
            passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
            .loc[:, "FE_gas", _subscript_dict["PRIVATE_TRANSPORT_I"], :]
            .reset_coords(drop=True)
            .rename({"PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I!"}),
            dim=["PRIVATE_TRANSPORT_I!"],
        )
        .expand_dims({"FINAL_ENERGY_TRANSMISSION_I": ["FE_gas"]}, 1)
        .values
    )
    value.loc[:, ["FE_elec"], :] = 0
    value.loc[:, ["FE_heat"], :] = 0
    value.loc[:, ["FE_hydrogen"], :] = (
        sum(
            passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
            .loc[:, "FE_hydrogen", _subscript_dict["PRIVATE_TRANSPORT_I"], :]
            .reset_coords(drop=True)
            .rename({"PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I!"}),
            dim=["PRIVATE_TRANSPORT_I!"],
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_hydrogen"]}, 1)
        .values
    )
    value.loc[:, ["FE_liquid"], :] = (
        sum(
            passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
            .loc[:, "FE_liquid", _subscript_dict["PRIVATE_TRANSPORT_I"], :]
            .reset_coords(drop=True)
            .rename({"PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I!"}),
            dim=["PRIVATE_TRANSPORT_I!"],
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_liquid"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_bio"], :] = (
        sum(
            passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
            .loc[:, "FE_solid_bio", _subscript_dict["PRIVATE_TRANSPORT_I"], :]
            .reset_coords(drop=True)
            .rename({"PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I!"}),
            dim=["PRIVATE_TRANSPORT_I!"],
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_bio"]}, 1)
        .values
    )
    value.loc[:, ["FE_solid_fossil"], :] = (
        sum(
            passenger_transport_ghg_emissions_all_energy_chain_by_transport_mode_35r_exc_fe_elec()
            .loc[:, "FE_solid_fossil", _subscript_dict["PRIVATE_TRANSPORT_I"], :]
            .reset_coords(drop=True)
            .rename({"PASSENGERS_TRANSPORT_MODE_I": "PRIVATE_TRANSPORT_I!"}),
            dim=["PRIVATE_TRANSPORT_I!"],
        )
        .expand_dims({"NRG_COMMODITIES_I": ["FE_solid_fossil"]}, 1)
        .values
    )
    return value


@component.add(
    name="SURFACE_COAL_MINING_EMISSION_FACTORS",
    units="m3/t",
    subscripts=["GHG_ENERGY_USE_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_surface_coal_mining_emission_factors"},
)
def surface_coal_mining_emission_factors():
    """
    Greenhouse gas factors emission due to fugitive emissions generated by the extraction of coal in surface mines.
    """
    return _ext_constant_surface_coal_mining_emission_factors()


_ext_constant_surface_coal_mining_emission_factors = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MINING",
    "SURFACE_COAL_MINING_EMISSION_FACTORS*",
    {"GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"]},
    _root,
    {"GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"]},
    "_ext_constant_surface_coal_mining_emission_factors",
)


@component.add(
    name="top_down_transport_emissions",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "PASSENGERS_TRANSPORT_MODE_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"passengers_transport_ghg_emissions": 1, "unit_conversion_kg_mt": 1},
)
def top_down_transport_emissions():
    return (
        sum(
            passengers_transport_ghg_emissions().rename(
                {"TRANSPORT_POWER_TRAIN_I": "TRANSPORT_POWER_TRAIN_I!"}
            ),
            dim=["TRANSPORT_POWER_TRAIN_I!"],
        )
        / unit_conversion_kg_mt()
    )


@component.add(
    name="total_GHG_emissions_35R",
    units="Gt/Year",
    subscripts=["GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ghg_all_emissions_35r": 1},
)
def total_ghg_emissions_35r():
    return sum(
        ghg_all_emissions_35r().rename({"REGIONS_35_I": "REGIONS_35_I!"}),
        dim=["REGIONS_35_I!"],
    )


@component.add(
    name="total_GHG_energy_chain_emissions_9R",
    units="Gt/Year",
    subscripts=["REGIONS_9_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"ghg_all_emissions_35r": 2},
)
def total_ghg_energy_chain_emissions_9r():
    """
    Total greenhouse gas emissions generated in all energy chain, by region and type of gas, in Gt/year. ---9R_old_eq--- (GHG_extraction_emissions[REGIONS 9 I,GHG I]+ GHG_refining_emissions[REGIONS 9 I,GHG I]+ GHG_energy_transformation_emissions[REGIONS 9 I,GHG I]+ GHG_energy_supply_emissions[REGIONS 9 I,GHG I]+ GHG_energy_use_emissions[REGIONS 9 I,GHG I])/UNIT_CONVERSION_Mt_Gt
    """
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_9_I": _subscript_dict["REGIONS_9_I"],
            "GHG_I": _subscript_dict["GHG_I"],
        },
        ["REGIONS_9_I", "GHG_I"],
    )
    value.loc[_subscript_dict["REGIONS_8_I"], :] = (
        ghg_all_emissions_35r()
        .loc[_subscript_dict["REGIONS_8_I"], :]
        .rename({"REGIONS_35_I": "REGIONS_8_I"})
        .values
    )
    value.loc[["EU27"], :] = (
        sum(
            ghg_all_emissions_35r()
            .loc[_subscript_dict["REGIONS_EU27_I"], :]
            .rename({"REGIONS_35_I": "REGIONS_EU27_I!"}),
            dim=["REGIONS_EU27_I!"],
        )
        .expand_dims({"REGIONS_36_I": ["EU27"]}, 0)
        .values
    )
    return value


@component.add(
    name="total_passenger_transport_GHG_emissions",
    units="Mt/Year",
    subscripts=["REGIONS_35_I", "GHG_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={"private_passenger_transport_ghg_emissions_all_energy_chain_35r": 1},
)
def total_passenger_transport_ghg_emissions():
    return sum(
        private_passenger_transport_ghg_emissions_all_energy_chain_35r().rename(
            {"NRG_FE_I": "NRG_FE_I!"}
        ),
        dim=["NRG_FE_I!"],
    )


@component.add(
    name="total_private_transport_CO2_emissions_by_region",
    units="Mt/Year",
    subscripts=["REGIONS_35_I"],
    comp_type="Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "co2_emissions_private_transport_by_region": 1,
        "unit_conversion_kg_mt": 1,
    },
)
def total_private_transport_co2_emissions_by_region():
    return (
        sum(
            co2_emissions_private_transport_by_region().rename(
                {"PRIVATE_TRANSPORT_I": "PRIVATE_TRANSPORT_I!"}
            ),
            dim=["PRIVATE_TRANSPORT_I!"],
        )
        / unit_conversion_kg_mt()
    )


@component.add(
    name="transport_final_energy_consumption_by_FE",
    units="TJ/Year",
    subscripts=["REGIONS_35_I", "NRG_FE_I"],
    comp_type="Constant, Auxiliary",
    comp_subtype="Normal",
    depends_on={
        "imv_final_energy_consumption_buildings_and_transport_top_down_coicop": 1
    },
)
def transport_final_energy_consumption_by_fe():
    value = xr.DataArray(
        np.nan,
        {
            "REGIONS_35_I": _subscript_dict["REGIONS_35_I"],
            "NRG_FE_I": _subscript_dict["NRG_FE_I"],
        },
        ["REGIONS_35_I", "NRG_FE_I"],
    )
    value.loc[:, ["FE_liquid"]] = (
        imv_final_energy_consumption_buildings_and_transport_top_down_coicop()
        .loc[:, "HH_FUEL_TRANSPORT"]
        .reset_coords(drop=True)
        .expand_dims({"NRG_COMMODITIES_I": ["FE_liquid"]}, 1)
        .values
    )
    except_subs = xr.ones_like(value, dtype=bool)
    except_subs.loc[:, ["FE_liquid"]] = False
    value.values[except_subs.values] = 0
    return value


@component.add(
    name="UNDERGROUND_COAL_MINING_EMISSION_FACTORS",
    units="m3/t",
    subscripts=["GHG_ENERGY_USE_I"],
    comp_type="Constant",
    comp_subtype="External",
    depends_on={
        "__external__": "_ext_constant_underground_coal_mining_emission_factors"
    },
)
def underground_coal_mining_emission_factors():
    """
    Greenhouse gas factors emission due to fugitive emissions generated by the extraction of coal in underground mines.
    """
    return _ext_constant_underground_coal_mining_emission_factors()


_ext_constant_underground_coal_mining_emission_factors = ExtConstant(
    "model_parameters/energy/energy-emission_factors.xlsx",
    "EF_MINING",
    "UNDERGROUND_COAL_MINING_EMISSION_FACTORS*",
    {"GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"]},
    _root,
    {"GHG_ENERGY_USE_I": _subscript_dict["GHG_ENERGY_USE_I"]},
    "_ext_constant_underground_coal_mining_emission_factors",
)


@component.add(
    name="UNIT_CONVERSION_J_m3_nat_gas",
    units="J/m3",
    comp_type="Constant",
    comp_subtype="External",
    depends_on={"__external__": "_ext_constant_unit_conversion_j_m3_nat_gas"},
)
def unit_conversion_j_m3_nat_gas():
    return _ext_constant_unit_conversion_j_m3_nat_gas()


_ext_constant_unit_conversion_j_m3_nat_gas = ExtConstant(
    "model_parameters/constants.xlsx",
    "Constants",
    "UNIT_CONVERSION_J_m3_nat_gas",
    {},
    _root,
    {},
    "_ext_constant_unit_conversion_j_m3_nat_gas",
)
